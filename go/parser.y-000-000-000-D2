%{

//TODO Put your favorite license here
		
// yacc source generated by ebnf2y[1]
// at 2013-08-19 14:39:10.295407348 +0200 CEST.
//
// CAUTION: If this file is a Go source file (*.go), it was generated
// automatically by '$ go tool yacc' from a *.y file - DO NOT EDIT in that case!
// 
//   [1]: http://github.com/cznic/ebnf2y

package main //TODO real package name

//TODO required only be the demo _dump function
import (
	"bytes"
	"fmt"
	"strings"

	"github.com/cznic/strutil"
)

%}

%union {
	item interface{} //TODO insert real field(s)
}

%token	ANDAND
%token	ANDNOT
%token	ASSIGN_OP
%token	BUILT_IN_NAME
%token	CHANCOMM
%token	COMM
%token	COMMCHAN
%token	DDD
%token	DEC
%token	EQ
%token	FLOAT_LIT
%token	GE
%token	IDENTIFIER
%token	IDENTIFIER_LIST
%token	IDLIST_COLAS
%token	IMAGINARY_LIT
%token	INC
%token	INT_LIT
%token	LE
%token	LSH
%token	NE
%token	OCOMMA_RPAREN
%token	OROR
%token	PACK_NAME
%token	RSH
%token	RUNE_LIT
%token	STRING_LIT
%token	TYPE_NAME

%type	<item> 	/*TODO real type(s), if/where applicable */
	ANDAND
	ANDNOT
	ASSIGN_OP
	BUILT_IN_NAME
	CHANCOMM
	COMM
	COMMCHAN
	DDD
	DEC
	EQ
	FLOAT_LIT
	GE
	IDENTIFIER
	IDENTIFIER_LIST
	IDLIST_COLAS
	IMAGINARY_LIT
	INC
	INT_LIT
	LE
	LSH
	NE
	OCOMMA_RPAREN
	OROR
	PACK_NAME
	RSH
	RUNE_LIT
	STRING_LIT
	TYPE_NAME

%token BREAK
%token CASE
%token CHAN
%token CONST
%token CONTINUE
%token DEFAULT
%token DEFER
%token ELSE
%token FALLTHROUGH
%token FOR
%token FUNC
%token GO
%token GOTO
%token IF
%token IMPORT
%token INTERFACE
%token MAP
%token PACKAGE
%token RANGE
%token RETURN
%token SELECT
%token STRUCT
%token SWITCH
%token TYPE
%token VAR

%type	<item> 	/*TODO real type(s), if/where applicable */
	ArgumentList
	ArrayType
	Block
	Condition
	ConstDecl11
	ConstSpec
	Declaration
	Element
	ElementList1
	ElementType
	ExprSwitchStmt3
	Expression
	ExpressionList
	ExpressionList1
	FieldDecl1
	Function
	FunctionName
	IfStmt
	ImportDecl11
	ImportSpec
	InterfaceType1
	Label
	LiteralValue
	MapType
	MethodName
	ParameterDecl
	ParameterDecl2
	ParameterList1
	Parameters
	PostStmt
	PrimaryExpr
	Receiver
	Receiver1
	SelectStmt1
	SendStmt
	Signature
	SimpleStmt
	Slice2
	SliceType
	SourceFile
	SourceFile1
	SourceFile2
	Start
	Statement
	StatementList
	StatementList1
	StructType
	StructType1
	Type
	TypeDecl11
	TypeList1
	TypeLit
	TypeName
	TypeSpec
	TypeSwitchStmt2
	UnaryExpr
	VarDecl11
	VarSpec

/*TODO %left, %right, ... declarations */

%left		OROR
%left		ANDAND
%left		EQ NE LE GE '<' '>'
%left		'+' '-' '|' '^'
%left		'*' '/' '%' '&' LSH RSH ANDNOT

%left	notParen // in Signature
%left	'('
%left	notRParen // in Type
%left	')'

%start Start

%%

ArgumentList:
	ExpressionList
	{
		$$ = $1 //TODO 1
	}
|	ExpressionList DDD
	{
		$$ = []ArgumentList{$1, $2} //TODO 2
	}

ArrayType:
	'[' Expression ']' ElementType
	{
		$$ = []ArrayType{"[", $2, "]", $4} //TODO 3
	}

Block:
	'{' StatementList '}'
	{
		$$ = []Block{"{", $2, "}"} //TODO 4
	}

Condition:
	Expression
	{
		$$ = $1 //TODO 5
	}

ConstDecl11:
	/* EMPTY */
	{
		$$ = []ConstDecl11(nil) //TODO 6
	}
|	ConstDecl11 ConstSpec ';'
	{
		$$ = append($1.([]ConstDecl11), $2, ";") //TODO 7
	}

ConstSpec:
	IDENTIFIER_LIST
	{
		$$ = $1 //TODO 8
	}
|	IDENTIFIER_LIST '=' ExpressionList
	{
		$$ = []ConstSpec{$1, "=", $3} //TODO 9
	}
|	IDENTIFIER_LIST Type '=' ExpressionList
	{
		$$ = []ConstSpec{$1, $2, "=", $4} //TODO 10
	}

Declaration:
	CONST ConstSpec
	{
		$$ = []Declaration{"const", $2} //TODO 11
	}
|	CONST '(' ConstDecl11 ')'
	{
		$$ = []Declaration{"const", "(", $3, ")"} //TODO 12
	}
|	TYPE TypeSpec
	{
		$$ = []Declaration{"type", $2} //TODO 13
	}
|	TYPE '(' TypeDecl11 ')'
	{
		$$ = []Declaration{"type", "(", $3, ")"} //TODO 14
	}
|	VAR VarSpec
	{
		$$ = []Declaration{"var", $2} //TODO 15
	}
|	VAR '(' VarDecl11 ')'
	{
		$$ = []Declaration{"var", "(", $3, ")"} //TODO 16
	}

Element:
	Expression
	{
		$$ = $1 //TODO 17
	}
|	Expression ':' Expression
	{
		$$ = []Element{$1, ":", $3} //TODO 18
	}
|	LiteralValue
	{
		$$ = $1 //TODO 19
	}
|	Expression ':' LiteralValue
	{
		$$ = []Element{$1, ":", $3} //TODO 20
	}

ElementList1:
	/* EMPTY */
	{
		$$ = []ElementList1(nil) //TODO 21
	}
|	ElementList1 ',' Element
	{
		$$ = append($1.([]ElementList1), ",", $3) //TODO 22
	}

ElementType:
	Type
	{
		$$ = $1 //TODO 23
	}

ExprSwitchStmt3:
	/* EMPTY */
	{
		$$ = []ExprSwitchStmt3(nil) //TODO 24
	}
|	ExprSwitchStmt3 CASE ExpressionList ':' StatementList
	{
		$$ = append($1.([]ExprSwitchStmt3), "case", $3, ":", $5) //TODO 25
	}
|	ExprSwitchStmt3 DEFAULT ':' StatementList
	{
		$$ = append($1.([]ExprSwitchStmt3), "default", ":", $4) //TODO 26
	}

Expression:
	UnaryExpr
	{
		$$ = $1 //TODO 27
	}
|	Expression OROR Expression
	{
		$$ = []Expression{$1, $2, $3} //TODO 28
	}
|	Expression ANDAND Expression
	{
		$$ = []Expression{$1, $2, $3} //TODO 29
	}
|	Expression EQ Expression
	{
		$$ = []Expression{$1, $2, $3} //TODO 30
	}
|	Expression NE Expression
	{
		$$ = []Expression{$1, $2, $3} //TODO 31
	}
|	Expression '<' Expression
	{
		$$ = []Expression{$1, "<", $3} //TODO 32
	}
|	Expression LE Expression
	{
		$$ = []Expression{$1, $2, $3} //TODO 33
	}
|	Expression '>' Expression
	{
		$$ = []Expression{$1, ">", $3} //TODO 34
	}
|	Expression GE Expression
	{
		$$ = []Expression{$1, $2, $3} //TODO 35
	}
|	Expression '+' Expression
	{
		$$ = []Expression{$1, "+", $3} //TODO 36
	}
|	Expression '-' Expression
	{
		$$ = []Expression{$1, "-", $3} //TODO 37
	}
|	Expression '|' Expression
	{
		$$ = []Expression{$1, "|", $3} //TODO 38
	}
|	Expression '^' Expression
	{
		$$ = []Expression{$1, "^", $3} //TODO 39
	}
|	Expression '*' Expression
	{
		$$ = []Expression{$1, "*", $3} //TODO 40
	}
|	Expression '/' Expression
	{
		$$ = []Expression{$1, "/", $3} //TODO 41
	}
|	Expression '%' Expression
	{
		$$ = []Expression{$1, "%", $3} //TODO 42
	}
|	Expression LSH Expression
	{
		$$ = []Expression{$1, $2, $3} //TODO 43
	}
|	Expression RSH Expression
	{
		$$ = []Expression{$1, $2, $3} //TODO 44
	}
|	Expression '&' Expression
	{
		$$ = []Expression{$1, "&", $3} //TODO 45
	}
|	Expression ANDNOT Expression
	{
		$$ = []Expression{$1, $2, $3} //TODO 46
	}

ExpressionList:
	Expression ExpressionList1
	{
		$$ = []ExpressionList{$1, $2} //TODO 47
	}

ExpressionList1:
	/* EMPTY */
	{
		$$ = []ExpressionList1(nil) //TODO 48
	}
|	ExpressionList1 ',' Expression
	{
		$$ = append($1.([]ExpressionList1), ",", $3) //TODO 49
	}

FieldDecl1:
	IDENTIFIER_LIST Type
	{
		$$ = []FieldDecl1{$1, $2} //TODO 50
	}
|	TypeName
	{
		$$ = $1 //TODO 51
	}
|	'*' TypeName
	{
		$$ = []FieldDecl1{"*", $2} //TODO 52
	}

Function:
	Signature Block
	{
		$$ = []Function{$1, $2} //TODO 53
	}

FunctionName:
	IDENTIFIER
	{
		$$ = $1 //TODO 54
	}

IfStmt:
	IF Expression Block
	{
		$$ = []IfStmt{"if", $2, $3} //TODO 55
	}
|	IF SimpleStmt ';' Expression Block
	{
		$$ = []IfStmt{"if", $2, ";", $4, $5} //TODO 56
	}
|	IF Expression Block ELSE IfStmt
	{
		$$ = []IfStmt{"if", $2, $3, "else", $5} //TODO 57
	}
|	IF SimpleStmt ';' Expression Block ELSE IfStmt
	{
		$$ = []IfStmt{"if", $2, ";", $4, $5, "else", $7} //TODO 58
	}
|	IF Expression Block ELSE Block
	{
		$$ = []IfStmt{"if", $2, $3, "else", $5} //TODO 59
	}
|	IF SimpleStmt ';' Expression Block ELSE Block
	{
		$$ = []IfStmt{"if", $2, ";", $4, $5, "else", $7} //TODO 60
	}

ImportDecl11:
	/* EMPTY */
	{
		$$ = []ImportDecl11(nil) //TODO 61
	}
|	ImportDecl11 ImportSpec ';'
	{
		$$ = append($1.([]ImportDecl11), $2, ";") //TODO 62
	}

ImportSpec:
	STRING_LIT
	{
		$$ = $1 //TODO 63
	}
|	'.' STRING_LIT
	{
		$$ = []ImportSpec{".", $2} //TODO 64
	}
|	IDENTIFIER STRING_LIT
	{
		$$ = []ImportSpec{$1, $2} //TODO 65
	}

InterfaceType1:
	/* EMPTY */
	{
		$$ = []InterfaceType1(nil) //TODO 66
	}
|	InterfaceType1 MethodName Signature ';'
	{
		$$ = append($1.([]InterfaceType1), $2, $3, ";") //TODO 67
	}
|	InterfaceType1 TypeName ';'
	{
		$$ = append($1.([]InterfaceType1), $2, ";") //TODO 68
	}

Label:
	IDENTIFIER
	{
		$$ = $1 //TODO 69
	}

LiteralValue:
	'{' '}'
	{
		$$ = []LiteralValue{"{", "}"} //TODO 70
	}
|	'{' Element ElementList1 '}'
	{
		$$ = []LiteralValue{"{", $2, $3, "}"} //TODO 71
	}
|	'{' Element ElementList1 ',' '}'
	{
		$$ = []LiteralValue{"{", $2, $3, ",", "}"} //TODO 72
	}

MapType:
	MAP '[' Type ']' ElementType
	{
		$$ = []MapType{"map", "[", $3, "]", $5} //TODO 73
	}

MethodName:
	IDENTIFIER
	{
		$$ = $1 //TODO 74
	}

ParameterDecl:
	ParameterDecl2 Type
	{
		$$ = []ParameterDecl{$1, $2} //TODO 75
	}
|	IDENTIFIER_LIST ParameterDecl2 Type
	{
		$$ = []ParameterDecl{$1, $2, $3} //TODO 76
	}

ParameterDecl2:
	/* EMPTY */
	{
		$$ = nil //TODO 77
	}
|	DDD
	{
		$$ = $1 //TODO 78
	}

ParameterList1:
	/* EMPTY */
	{
		$$ = []ParameterList1(nil) //TODO 79
	}
|	ParameterList1 ',' ParameterDecl
	{
		$$ = append($1.([]ParameterList1), ",", $3) //TODO 80
	}

Parameters:
	'(' ')'
	{
		$$ = []Parameters{"(", ")"} //TODO 81
	}
|	'(' ParameterDecl ParameterList1 OCOMMA_RPAREN
	{
		$$ = []Parameters{"(", $2, $3, $4} //TODO 82
	}

PostStmt:
	SimpleStmt
	{
		$$ = $1 //TODO 83
	}

PrimaryExpr:
	INT_LIT
	{
		$$ = $1 //TODO 84
	}
|	FLOAT_LIT
	{
		$$ = $1 //TODO 85
	}
|	IMAGINARY_LIT
	{
		$$ = $1 //TODO 86
	}
|	RUNE_LIT
	{
		$$ = $1 //TODO 87
	}
|	STRING_LIT
	{
		$$ = $1 //TODO 88
	}
|	StructType LiteralValue
	{
		$$ = []PrimaryExpr{$1, $2} //TODO 89
	}
|	ArrayType LiteralValue
	{
		$$ = []PrimaryExpr{$1, $2} //TODO 90
	}
|	'[' DDD ']' ElementType LiteralValue
	{
		$$ = []PrimaryExpr{"[", $2, "]", $4, $5} //TODO 91
	}
|	SliceType LiteralValue
	{
		$$ = []PrimaryExpr{$1, $2} //TODO 92
	}
|	MapType LiteralValue
	{
		$$ = []PrimaryExpr{$1, $2} //TODO 93
	}
|	TypeName LiteralValue
	{
		$$ = []PrimaryExpr{$1, $2} //TODO 94
	}
|	FUNC Function
	{
		$$ = []PrimaryExpr{"func", $2} //TODO 95
	}
|	IDENTIFIER
	{
		$$ = $1 //TODO 96
	}
|	PACK_NAME IDENTIFIER
	{
		$$ = []PrimaryExpr{$1, $2} //TODO 97
	}
|	TypeName '.' MethodName
	{
		$$ = []PrimaryExpr{$1, ".", $3} //TODO 98
	}
|	'(' '*' TypeName ')' '.' MethodName
	{
		$$ = []PrimaryExpr{"(", "*", $3, ")", ".", $6} //TODO 99
	}
|	'(' TypeName ')' '.' MethodName
	{
		$$ = []PrimaryExpr{"(", $2, ")", ".", $5} //TODO 100
	}
|	'(' Expression ')'
	{
		$$ = []PrimaryExpr{"(", $2, ")"} //TODO 101
	}
|	Type '(' Expression OCOMMA_RPAREN
	{
		$$ = []PrimaryExpr{$1, "(", $3, $4} //TODO 102
	}
|	BUILT_IN_NAME '(' Type OCOMMA_RPAREN
	{
		$$ = []PrimaryExpr{$1, "(", $3, $4} //TODO 103
	}
|	BUILT_IN_NAME '(' Type ',' ArgumentList OCOMMA_RPAREN
	{
		$$ = []PrimaryExpr{$1, "(", $3, ",", $5, $6} //TODO 104
	}
|	BUILT_IN_NAME '(' ArgumentList OCOMMA_RPAREN
	{
		$$ = []PrimaryExpr{$1, "(", $3, $4} //TODO 105
	}
|	PrimaryExpr '.' IDENTIFIER
	{
		$$ = []PrimaryExpr{$1, ".", $3} //TODO 106
	}
|	PrimaryExpr '[' Expression ']'
	{
		$$ = []PrimaryExpr{$1, "[", $3, "]"} //TODO 107
	}
|	PrimaryExpr '[' ':' Slice2 ']'
	{
		$$ = []PrimaryExpr{$1, "[", ":", $4, "]"} //TODO 108
	}
|	PrimaryExpr '[' Expression ':' Slice2 ']'
	{
		$$ = []PrimaryExpr{$1, "[", $3, ":", $5, "]"} //TODO 109
	}
|	PrimaryExpr '.' '(' Type ')'
	{
		$$ = []PrimaryExpr{$1, ".", "(", $4, ")"} //TODO 110
	}
|	PrimaryExpr '(' ')'
	{
		$$ = []PrimaryExpr{$1, "(", ")"} //TODO 111
	}
|	PrimaryExpr '(' ArgumentList OCOMMA_RPAREN
	{
		$$ = []PrimaryExpr{$1, "(", $3, $4} //TODO 112
	}

Receiver:
	'(' Receiver1 TYPE_NAME ')'
	{
		$$ = []Receiver{"(", $2, $3, ")"} //TODO 113
	}
|	'(' Receiver1 '*' TYPE_NAME ')'
	{
		$$ = []Receiver{"(", $2, "*", $4, ")"} //TODO 114
	}

Receiver1:
	/* EMPTY */
	{
		$$ = nil //TODO 115
	}
|	IDENTIFIER
	{
		$$ = $1 //TODO 116
	}

SelectStmt1:
	/* EMPTY */
	{
		$$ = []SelectStmt1(nil) //TODO 117
	}
|	SelectStmt1 CASE SendStmt ':' StatementList
	{
		$$ = append($1.([]SelectStmt1), "case", $3, ":", $5) //TODO 118
	}
|	SelectStmt1 CASE Expression ':' StatementList
	{
		$$ = append($1.([]SelectStmt1), "case", $3, ":", $5) //TODO 119
	}
|	SelectStmt1 CASE ExpressionList '=' Expression ':' StatementList
	{
		$$ = append($1.([]SelectStmt1), "case", $3, "=", $5, ":", $7) //TODO 120
	}
|	SelectStmt1 CASE IDLIST_COLAS Expression ':' StatementList
	{
		$$ = append($1.([]SelectStmt1), "case", $3, $4, ":", $6) //TODO 121
	}
|	SelectStmt1 DEFAULT ':' StatementList
	{
		$$ = append($1.([]SelectStmt1), "default", ":", $4) //TODO 122
	}

SendStmt:
	Expression COMM Expression
	{
		$$ = []SendStmt{$1, $2, $3} //TODO 123
	}

Signature:
	Parameters %prec notParen
	{
		$$ = $1 //TODO 124
	}
|	Parameters Parameters
	{
		$$ = []Signature{$1, $2} //TODO 125
	}
|	Parameters TypeName
	{
		$$ = []Signature{$1, $2} //TODO 126
	}
|	Parameters TypeLit
	{
		$$ = []Signature{$1, $2} //TODO 127
	}

SimpleStmt:
	/* EMPTY */
	{
		$$ = nil //TODO 128
	}
|	Expression
	{
		$$ = $1 //TODO 129
	}
|	SendStmt
	{
		$$ = $1 //TODO 130
	}
|	Expression INC
	{
		$$ = []SimpleStmt{$1, $2} //TODO 131
	}
|	Expression DEC
	{
		$$ = []SimpleStmt{$1, $2} //TODO 132
	}
|	ExpressionList ASSIGN_OP ExpressionList
	{
		$$ = []SimpleStmt{$1, $2, $3} //TODO 133
	}
|	IDLIST_COLAS ExpressionList
	{
		$$ = []SimpleStmt{$1, $2} //TODO 134
	}

Slice2:
	/* EMPTY */
	{
		$$ = nil //TODO 135
	}
|	Expression
	{
		$$ = $1 //TODO 136
	}

SliceType:
	'[' ']' ElementType
	{
		$$ = []SliceType{"[", "]", $3} //TODO 137
	}

SourceFile:
	PACKAGE IDENTIFIER ';' SourceFile1 SourceFile2
	{
		$$ = []SourceFile{"package", $2, ";", $4, $5} //TODO 138
	}

SourceFile1:
	/* EMPTY */
	{
		$$ = []SourceFile1(nil) //TODO 139
	}
|	SourceFile1 IMPORT ImportSpec ';'
	{
		$$ = append($1.([]SourceFile1), "import", $3, ";") //TODO 140
	}
|	SourceFile1 IMPORT '(' ImportDecl11 ')' ';'
	{
		$$ = append($1.([]SourceFile1), "import", "(", $4, ")", ";") //TODO 141
	}

SourceFile2:
	/* EMPTY */
	{
		$$ = []SourceFile2(nil) //TODO 142
	}
|	SourceFile2 Declaration ';'
	{
		$$ = append($1.([]SourceFile2), $2, ";") //TODO 143
	}
|	SourceFile2 FUNC FunctionName Function ';'
	{
		$$ = append($1.([]SourceFile2), "func", $3, $4, ";") //TODO 144
	}
|	SourceFile2 FUNC FunctionName Signature ';'
	{
		$$ = append($1.([]SourceFile2), "func", $3, $4, ";") //TODO 145
	}
|	SourceFile2 FUNC Receiver MethodName Function ';'
	{
		$$ = append($1.([]SourceFile2), "func", $3, $4, $5, ";") //TODO 146
	}
|	SourceFile2 FUNC Receiver MethodName Signature ';'
	{
		$$ = append($1.([]SourceFile2), "func", $3, $4, $5, ";") //TODO 147
	}

Start:
	SourceFile
	{
		_parserResult = $1 //TODO 148
	}

Statement:
	Declaration
	{
		$$ = $1 //TODO 149
	}
|	Label ':' Statement
	{
		$$ = []Statement{$1, ":", $3} //TODO 150
	}
|	SimpleStmt
	{
		$$ = $1 //TODO 151
	}
|	GO Expression
	{
		$$ = []Statement{"go", $2} //TODO 152
	}
|	RETURN
	{
		$$ = "return" //TODO 153
	}
|	RETURN ExpressionList
	{
		$$ = []Statement{"return", $2} //TODO 154
	}
|	BREAK
	{
		$$ = "break" //TODO 155
	}
|	BREAK Label
	{
		$$ = []Statement{"break", $2} //TODO 156
	}
|	CONTINUE
	{
		$$ = "continue" //TODO 157
	}
|	CONTINUE Label
	{
		$$ = []Statement{"continue", $2} //TODO 158
	}
|	GOTO Label
	{
		$$ = []Statement{"goto", $2} //TODO 159
	}
|	FALLTHROUGH
	{
		$$ = "fallthrough" //TODO 160
	}
|	Block
	{
		$$ = $1 //TODO 161
	}
|	IfStmt
	{
		$$ = $1 //TODO 162
	}
|	SWITCH '{' ExprSwitchStmt3 '}'
	{
		$$ = []Statement{"switch", "{", $3, "}"} //TODO 163
	}
|	SWITCH SimpleStmt ';' '{' ExprSwitchStmt3 '}'
	{
		$$ = []Statement{"switch", $2, ";", "{", $5, "}"} //TODO 164
	}
|	SWITCH Expression '{' ExprSwitchStmt3 '}'
	{
		$$ = []Statement{"switch", $2, "{", $4, "}"} //TODO 165
	}
|	SWITCH SimpleStmt ';' Expression '{' ExprSwitchStmt3 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, "{", $6, "}"} //TODO 166
	}
|	SWITCH PrimaryExpr '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ".", "(", "type", ")", "{", $8, "}"} //TODO 167
	}
|	SWITCH IDLIST_COLAS PrimaryExpr '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, $3, ".", "(", "type", ")", "{", $9, "}"} //TODO 168
	}
|	SWITCH SimpleStmt ';' PrimaryExpr '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, ".", "(", "type", ")", "{", $10, "}"} //TODO 169
	}
|	SWITCH SimpleStmt ';' IDLIST_COLAS PrimaryExpr '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, $5, ".", "(", "type", ")", "{", $11, "}"} //TODO 170
	}
|	SELECT '{' SelectStmt1 '}'
	{
		$$ = []Statement{"select", "{", $3, "}"} //TODO 171
	}
|	FOR Block
	{
		$$ = []Statement{"for", $2} //TODO 172
	}
|	FOR Condition Block
	{
		$$ = []Statement{"for", $2, $3} //TODO 173
	}
|	FOR SimpleStmt ';' ';' PostStmt Block
	{
		$$ = []Statement{"for", $2, ";", ";", $5, $6} //TODO 174
	}
|	FOR SimpleStmt ';' Condition ';' PostStmt Block
	{
		$$ = []Statement{"for", $2, ";", $4, ";", $6, $7} //TODO 175
	}
|	FOR ExpressionList '=' RANGE Expression Block
	{
		$$ = []Statement{"for", $2, "=", "range", $5, $6} //TODO 176
	}
|	FOR IDLIST_COLAS RANGE Expression Block
	{
		$$ = []Statement{"for", $2, "range", $4, $5} //TODO 177
	}
|	DEFER Expression
	{
		$$ = []Statement{"defer", $2} //TODO 178
	}

StatementList:
	StatementList1
	{
		$$ = $1 //TODO 179
	}

StatementList1:
	/* EMPTY */
	{
		$$ = []StatementList1(nil) //TODO 180
	}
|	StatementList1 Statement ';'
	{
		$$ = append($1.([]StatementList1), $2, ";") //TODO 181
	}

StructType:
	STRUCT '{' StructType1 '}'
	{
		$$ = []StructType{"struct", "{", $3, "}"} //TODO 182
	}

StructType1:
	/* EMPTY */
	{
		$$ = []StructType1(nil) //TODO 183
	}
|	StructType1 FieldDecl1 ';'
	{
		$$ = append($1.([]StructType1), $2, ";") //TODO 184
	}
|	StructType1 FieldDecl1 STRING_LIT ';'
	{
		$$ = append($1.([]StructType1), $2, $3, ";") //TODO 185
	}

Type:
	TypeName %prec notRParen
	{
		$$ = $1 //TODO 186
	}
|	TypeLit
	{
		$$ = $1 //TODO 187
	}
|	'(' TypeName ')'
	{
		$$ = []Type{"(", $2, ")"} //TODO 188
	}
|	'(' TypeLit ')'
	{
		$$ = []Type{"(", $2, ")"} //TODO 189
	}

TypeDecl11:
	/* EMPTY */
	{
		$$ = []TypeDecl11(nil) //TODO 190
	}
|	TypeDecl11 TypeSpec ';'
	{
		$$ = append($1.([]TypeDecl11), $2, ";") //TODO 191
	}

TypeList1:
	/* EMPTY */
	{
		$$ = []TypeList1(nil) //TODO 192
	}
|	TypeList1 ',' Type
	{
		$$ = append($1.([]TypeList1), ",", $3) //TODO 193
	}

TypeLit:
	ArrayType
	{
		$$ = $1 //TODO 194
	}
|	StructType
	{
		$$ = $1 //TODO 195
	}
|	'*' Type
	{
		$$ = []TypeLit{"*", $2} //TODO 196
	}
|	FUNC Signature
	{
		$$ = []TypeLit{"func", $2} //TODO 197
	}
|	INTERFACE '{' InterfaceType1 '}'
	{
		$$ = []TypeLit{"interface", "{", $3, "}"} //TODO 198
	}
|	SliceType
	{
		$$ = $1 //TODO 199
	}
|	MapType
	{
		$$ = $1 //TODO 200
	}
|	CHAN ElementType
	{
		$$ = []TypeLit{"chan", $2} //TODO 201
	}
|	CHANCOMM ElementType
	{
		$$ = []TypeLit{$1, $2} //TODO 202
	}
|	COMMCHAN ElementType
	{
		$$ = []TypeLit{$1, $2} //TODO 203
	}

TypeName:
	TYPE_NAME
	{
		$$ = $1 //TODO 204
	}
|	PACK_NAME TYPE_NAME
	{
		$$ = []TypeName{$1, $2} //TODO 205
	}

TypeSpec:
	IDENTIFIER Type
	{
		$$ = []TypeSpec{$1, $2} //TODO 206
	}

TypeSwitchStmt2:
	/* EMPTY */
	{
		$$ = []TypeSwitchStmt2(nil) //TODO 207
	}
|	TypeSwitchStmt2 CASE Type TypeList1 ':' StatementList
	{
		$$ = append($1.([]TypeSwitchStmt2), "case", $3, $4, ":", $6) //TODO 208
	}
|	TypeSwitchStmt2 DEFAULT ':' StatementList
	{
		$$ = append($1.([]TypeSwitchStmt2), "default", ":", $4) //TODO 209
	}

UnaryExpr:
	PrimaryExpr
	{
		$$ = $1 //TODO 210
	}
|	'+' UnaryExpr
	{
		$$ = []UnaryExpr{"+", $2} //TODO 211
	}
|	'-' UnaryExpr
	{
		$$ = []UnaryExpr{"-", $2} //TODO 212
	}
|	'!' UnaryExpr
	{
		$$ = []UnaryExpr{"!", $2} //TODO 213
	}
|	'^' UnaryExpr
	{
		$$ = []UnaryExpr{"^", $2} //TODO 214
	}
|	'*' UnaryExpr
	{
		$$ = []UnaryExpr{"*", $2} //TODO 215
	}
|	'&' UnaryExpr
	{
		$$ = []UnaryExpr{"&", $2} //TODO 216
	}
|	COMM UnaryExpr
	{
		$$ = []UnaryExpr{$1, $2} //TODO 217
	}

VarDecl11:
	/* EMPTY */
	{
		$$ = []VarDecl11(nil) //TODO 218
	}
|	VarDecl11 VarSpec ';'
	{
		$$ = append($1.([]VarDecl11), $2, ";") //TODO 219
	}

VarSpec:
	IDENTIFIER_LIST Type
	{
		$$ = []VarSpec{$1, $2} //TODO 220
	}
|	IDENTIFIER_LIST Type '=' ExpressionList
	{
		$$ = []VarSpec{$1, $2, "=", $4} //TODO 221
	}
|	IDENTIFIER_LIST '=' ExpressionList
	{
		$$ = []VarSpec{$1, "=", $3} //TODO 222
	}

%%

//TODO remove demo stuff below

var _parserResult interface{}

type (
	ArgumentList interface{}
	ArrayType interface{}
	Block interface{}
	Condition interface{}
	ConstDecl11 interface{}
	ConstSpec interface{}
	Declaration interface{}
	Element interface{}
	ElementList1 interface{}
	ElementType interface{}
	ExprSwitchStmt3 interface{}
	Expression interface{}
	ExpressionList interface{}
	ExpressionList1 interface{}
	FieldDecl1 interface{}
	Function interface{}
	FunctionName interface{}
	IfStmt interface{}
	ImportDecl11 interface{}
	ImportSpec interface{}
	InterfaceType1 interface{}
	Label interface{}
	LiteralValue interface{}
	MapType interface{}
	MethodName interface{}
	ParameterDecl interface{}
	ParameterDecl2 interface{}
	ParameterList1 interface{}
	Parameters interface{}
	PostStmt interface{}
	PrimaryExpr interface{}
	Receiver interface{}
	Receiver1 interface{}
	SelectStmt1 interface{}
	SendStmt interface{}
	Signature interface{}
	SimpleStmt interface{}
	Slice2 interface{}
	SliceType interface{}
	SourceFile interface{}
	SourceFile1 interface{}
	SourceFile2 interface{}
	Start interface{}
	Statement interface{}
	StatementList interface{}
	StatementList1 interface{}
	StructType interface{}
	StructType1 interface{}
	Type interface{}
	TypeDecl11 interface{}
	TypeList1 interface{}
	TypeLit interface{}
	TypeName interface{}
	TypeSpec interface{}
	TypeSwitchStmt2 interface{}
	UnaryExpr interface{}
	VarDecl11 interface{}
	VarSpec interface{}
)
	
func _dump() {
	s := fmt.Sprintf("%#v", _parserResult)
	s = strings.Replace(s, "%", "%%", -1)
	s = strings.Replace(s, "{", "{%i\n", -1)
	s = strings.Replace(s, "}", "%u\n}", -1)
	s = strings.Replace(s, ", ", ",\n", -1)
	var buf bytes.Buffer
	strutil.IndentFormatter(&buf, ". ").Format(s)
	buf.WriteString("\n")
	a := strings.Split(buf.String(), "\n")
	for _, v := range a {
		if strings.HasSuffix(v, "(nil)") || strings.HasSuffix(v, "(nil),") {
			continue
		}
	
		fmt.Println(v)
	}
}

// End of demo stuff
