%{

//TODO Put your favorite license here
		
// yacc source generated by ebnf2y[1]
// at 2013-09-03 14:44:54.703082306 +0200 CEST.
//
// CAUTION: If this file is a Go source file (*.go), it was generated
// automatically by '$ go tool yacc' from a *.y file - DO NOT EDIT in that case!
// 
//   [1]: http://github.com/cznic/ebnf2y

package main //TODO real package name

//TODO required only be the demo _dump function
import (
	"bytes"
	"fmt"
	"strings"

	"github.com/cznic/strutil"
)

%}

%left	OROR
%left	ANDAND
%left	'<' '>' EQ GE LE NE
%left	'+' '-' '^' '|'
%left	'%' '&' '*' '/' ANDNOT LSH RSH

%left	notDot
%left	'.'	// Name

%union {
	item interface{} //TODO insert real field(s)
}

%token	ADD_ASSIGN
%token	ANDAND
%token	ANDNOT
%token	AND_ASSIGN
%token	AND_NOT_ASSIGN
%token	CHANCOMM
%token	COMM
%token	COMMCHAN
%token	DDD
%token	DEC
%token	EQ
%token	FLOAT_LIT
%token	GE
%token	IDENTIFIER
%token	IDENTIFIER_LIST
%token	IDLIST_COLAS
%token	IMAGINARY_LIT
%token	INC
%token	INT_LIT
%token	LBR
%token	LE
%token	LSH
%token	MUL_ASSIGN
%token	NE
%token	OROR
%token	OR_ASSIGN
%token	QUO_ASSIGN
%token	REM_ASSIGN
%token	RSH
%token	RUNE_LIT
%token	SHL_ASSIGN
%token	SHR_ASSIGN
%token	STRING_LIT
%token	SUB_ASSIGN
%token	XOR_ASSIGN

%type	<item> 	/*TODO real type(s), if/where applicable */
	ADD_ASSIGN
	ANDAND
	ANDNOT
	AND_ASSIGN
	AND_NOT_ASSIGN
	CHANCOMM
	COMM
	COMMCHAN
	DDD
	DEC
	EQ
	FLOAT_LIT
	GE
	IDENTIFIER
	IDENTIFIER_LIST
	IDLIST_COLAS
	IMAGINARY_LIT
	INC
	INT_LIT
	LBR
	LE
	LSH
	MUL_ASSIGN
	NE
	OROR
	OR_ASSIGN
	QUO_ASSIGN
	REM_ASSIGN
	RSH
	RUNE_LIT
	SHL_ASSIGN
	SHR_ASSIGN
	STRING_LIT
	SUB_ASSIGN
	XOR_ASSIGN

%token BREAK
%token CASE
%token CHAN
%token CONST
%token CONTINUE
%token DEFAULT
%token DEFER
%token ELSE
%token FALLTHROUGH
%token FOR
%token FUNC
%token GO
%token GOTO
%token IF
%token IMPORT
%token INTERFACE
%token MAP
%token PACKAGE
%token RANGE
%token RETURN
%token SELECT
%token STRUCT
%token SWITCH
%token TYPE
%token VAR

%type	<item> 	/*TODO real type(s), if/where applicable */
	ArrayType
	Block
	Condition
	ConstDecl111
	ConstSpec
	Declaration
	Element
	ElementList1
	ElementType
	ExprSwitchStmt2
	ExprSwitchStmt3
	Expression
	ExpressionList
	ExpressionList1
	FieldDecl
	FieldDecl2
	Function
	FunctionName
	IfStmt
	IfStmt2
	ImportDecl111
	ImportPath
	ImportSpec
	InitStmt
	InterfaceType11
	Label
	LiteralValue
	MapType
	MethodName
	MethodSpec
	Name
	PackageName
	ParameterDecl
	ParameterList1
	Parameters
	PostStmt
	PrimaryExpr
	Receiver
	ReceiverType
	RecvExpr
	SelectStmt1
	SendStmt
	Signature
	SimpleStmt
	Slice1
	SliceType
	SourceFile
	SourceFile1
	SourceFile2
	Start
	Statement
	StatementList
	StatementList1
	StructType
	StructType11
	Type
	TypeDecl111
	TypeList1
	TypeLitNoPtr
	TypeSpec
	TypeSwitchStmt2
	UnaryExpr
	VarDecl111
	VarSpec

/*TODO %left, %right, ... declarations */

%start Start

%%

ArrayType:
	'[' Expression ']' ElementType
	{
		$$ = []ArrayType{"[", $2, "]", $4} //TODO 1
	}

Block:
	'{' StatementList '}'
	{
		$$ = []Block{"{", $2, "}"} //TODO 2
	}

Condition:
	Expression
	{
		$$ = $1 //TODO 3
	}

ConstDecl111:
	/* EMPTY */
	{
		$$ = []ConstDecl111(nil) //TODO 4
	}
|	ConstDecl111 ';' ConstSpec
	{
		$$ = append($1.([]ConstDecl111), ";", $3) //TODO 5
	}

ConstSpec:
	IDENTIFIER_LIST
	{
		$$ = $1 //TODO 6
	}
|	IDENTIFIER_LIST '=' ExpressionList
	{
		$$ = []ConstSpec{$1, "=", $3} //TODO 7
	}
|	IDENTIFIER_LIST Type '=' ExpressionList
	{
		$$ = []ConstSpec{$1, $2, "=", $4} //TODO 8
	}

Declaration:
	CONST ConstSpec
	{
		$$ = []Declaration{"const", $2} //TODO 9
	}
|	CONST '(' ')'
	{
		$$ = []Declaration{"const", "(", ")"} //TODO 10
	}
|	CONST '(' ConstSpec ConstDecl111 ')'
	{
		$$ = []Declaration{"const", "(", $3, $4, ")"} //TODO 11
	}
|	TYPE TypeSpec
	{
		$$ = []Declaration{"type", $2} //TODO 12
	}
|	TYPE '(' ')'
	{
		$$ = []Declaration{"type", "(", ")"} //TODO 13
	}
|	TYPE '(' TypeSpec TypeDecl111 ')'
	{
		$$ = []Declaration{"type", "(", $3, $4, ")"} //TODO 14
	}
|	VAR VarSpec
	{
		$$ = []Declaration{"var", $2} //TODO 15
	}
|	VAR '(' ')'
	{
		$$ = []Declaration{"var", "(", ")"} //TODO 16
	}
|	VAR '(' VarSpec VarDecl111 ')'
	{
		$$ = []Declaration{"var", "(", $3, $4, ")"} //TODO 17
	}

Element:
	Expression
	{
		$$ = $1 //TODO 18
	}
|	Expression ':' Expression
	{
		$$ = []Element{$1, ":", $3} //TODO 19
	}
|	LiteralValue
	{
		$$ = $1 //TODO 20
	}
|	Expression ':' LiteralValue
	{
		$$ = []Element{$1, ":", $3} //TODO 21
	}

ElementList1:
	/* EMPTY */
	{
		$$ = []ElementList1(nil) //TODO 22
	}
|	ElementList1 ',' Element
	{
		$$ = append($1.([]ElementList1), ",", $3) //TODO 23
	}

ElementType:
	Type
	{
		$$ = $1 //TODO 24
	}

ExprSwitchStmt2:
	/* EMPTY */
	{
		$$ = nil //TODO 25
	}
|	Expression
	{
		$$ = $1 //TODO 26
	}

ExprSwitchStmt3:
	/* EMPTY */
	{
		$$ = []ExprSwitchStmt3(nil) //TODO 27
	}
|	ExprSwitchStmt3 CASE ExpressionList ':' StatementList
	{
		$$ = append($1.([]ExprSwitchStmt3), "case", $3, ":", $5) //TODO 28
	}
|	ExprSwitchStmt3 DEFAULT ':' StatementList
	{
		$$ = append($1.([]ExprSwitchStmt3), "default", ":", $4) //TODO 29
	}

Expression:
	UnaryExpr
	{
		$$ = $1 //TODO 30
	}
|	Expression OROR Expression
	{
		$$ = []Expression{$1, $2, $3} //TODO 31
	}
|	Expression ANDAND Expression
	{
		$$ = []Expression{$1, $2, $3} //TODO 32
	}
|	Expression EQ Expression
	{
		$$ = []Expression{$1, $2, $3} //TODO 33
	}
|	Expression NE Expression
	{
		$$ = []Expression{$1, $2, $3} //TODO 34
	}
|	Expression '<' Expression
	{
		$$ = []Expression{$1, "<", $3} //TODO 35
	}
|	Expression LE Expression
	{
		$$ = []Expression{$1, $2, $3} //TODO 36
	}
|	Expression '>' Expression
	{
		$$ = []Expression{$1, ">", $3} //TODO 37
	}
|	Expression GE Expression
	{
		$$ = []Expression{$1, $2, $3} //TODO 38
	}
|	Expression '+' Expression
	{
		$$ = []Expression{$1, "+", $3} //TODO 39
	}
|	Expression '-' Expression
	{
		$$ = []Expression{$1, "-", $3} //TODO 40
	}
|	Expression '|' Expression
	{
		$$ = []Expression{$1, "|", $3} //TODO 41
	}
|	Expression '^' Expression
	{
		$$ = []Expression{$1, "^", $3} //TODO 42
	}
|	Expression '*' Expression
	{
		$$ = []Expression{$1, "*", $3} //TODO 43
	}
|	Expression '/' Expression
	{
		$$ = []Expression{$1, "/", $3} //TODO 44
	}
|	Expression '%' Expression
	{
		$$ = []Expression{$1, "%", $3} //TODO 45
	}
|	Expression LSH Expression
	{
		$$ = []Expression{$1, $2, $3} //TODO 46
	}
|	Expression RSH Expression
	{
		$$ = []Expression{$1, $2, $3} //TODO 47
	}
|	Expression '&' Expression
	{
		$$ = []Expression{$1, "&", $3} //TODO 48
	}
|	Expression ANDNOT Expression
	{
		$$ = []Expression{$1, $2, $3} //TODO 49
	}

ExpressionList:
	Expression ExpressionList1
	{
		$$ = []ExpressionList{$1, $2} //TODO 50
	}

ExpressionList1:
	/* EMPTY */
	{
		$$ = []ExpressionList1(nil) //TODO 51
	}
|	ExpressionList1 ',' Expression
	{
		$$ = append($1.([]ExpressionList1), ",", $3) //TODO 52
	}

FieldDecl:
	IDENTIFIER_LIST Type FieldDecl2
	{
		$$ = []FieldDecl{$1, $2, $3} //TODO 53
	}
|	Name FieldDecl2
	{
		$$ = []FieldDecl{$1, $2} //TODO 54
	}
|	'*' Name FieldDecl2
	{
		$$ = []FieldDecl{"*", $2, $3} //TODO 55
	}

FieldDecl2:
	/* EMPTY */
	{
		$$ = nil //TODO 56
	}
|	STRING_LIT
	{
		$$ = $1 //TODO 57
	}

Function:
	Signature Block
	{
		$$ = []Function{$1, $2} //TODO 58
	}

FunctionName:
	IDENTIFIER
	{
		$$ = $1 //TODO 59
	}

IfStmt:
	IF Expression LBR StatementList '}' IfStmt2
	{
		$$ = []IfStmt{"if", $2, $3, $4, "}", $6} //TODO 60
	}
|	IF SimpleStmt ';' Expression LBR StatementList '}' IfStmt2
	{
		$$ = []IfStmt{"if", $2, ";", $4, $5, $6, "}", $8} //TODO 61
	}

IfStmt2:
	/* EMPTY */
	{
		$$ = nil //TODO 62
	}
|	ELSE IfStmt
	{
		$$ = []IfStmt2{"else", $2} //TODO 63
	}
|	ELSE Block
	{
		$$ = []IfStmt2{"else", $2} //TODO 64
	}

ImportDecl111:
	/* EMPTY */
	{
		$$ = []ImportDecl111(nil) //TODO 65
	}
|	ImportDecl111 ';' ImportSpec
	{
		$$ = append($1.([]ImportDecl111), ";", $3) //TODO 66
	}

ImportPath:
	STRING_LIT
	{
		$$ = $1 //TODO 67
	}

ImportSpec:
	ImportPath
	{
		$$ = $1 //TODO 68
	}
|	'.' ImportPath
	{
		$$ = []ImportSpec{".", $2} //TODO 69
	}
|	PackageName ImportPath
	{
		$$ = []ImportSpec{$1, $2} //TODO 70
	}

InitStmt:
	SimpleStmt
	{
		$$ = $1 //TODO 71
	}

InterfaceType11:
	/* EMPTY */
	{
		$$ = []InterfaceType11(nil) //TODO 72
	}
|	InterfaceType11 ';' MethodSpec
	{
		$$ = append($1.([]InterfaceType11), ";", $3) //TODO 73
	}

Label:
	IDENTIFIER
	{
		$$ = $1 //TODO 74
	}

LiteralValue:
	'{' '}'
	{
		$$ = []LiteralValue{"{", "}"} //TODO 75
	}
|	'{' Element ElementList1 '}'
	{
		$$ = []LiteralValue{"{", $2, $3, "}"} //TODO 76
	}

MapType:
	MAP '[' Type ']' ElementType
	{
		$$ = []MapType{"map", "[", $3, "]", $5} //TODO 77
	}

MethodName:
	IDENTIFIER
	{
		$$ = $1 //TODO 78
	}

MethodSpec:
	MethodName Signature
	{
		$$ = []MethodSpec{$1, $2} //TODO 79
	}
|	Name
	{
		$$ = $1 //TODO 80
	}

Name:
	IDENTIFIER %prec notDot
	{
		$$ = $1 //TODO 81
	}
|	IDENTIFIER '.' IDENTIFIER
	{
		$$ = []Name{$1, ".", $3} //TODO 82
	}

PackageName:
	IDENTIFIER
	{
		$$ = $1 //TODO 83
	}

ParameterDecl:
	Type
	{
		$$ = $1 //TODO 84
	}
|	IDENTIFIER_LIST Type
	{
		$$ = []ParameterDecl{$1, $2} //TODO 85
	}
|	DDD Type
	{
		$$ = []ParameterDecl{$1, $2} //TODO 86
	}
|	IDENTIFIER_LIST DDD Type
	{
		$$ = []ParameterDecl{$1, $2, $3} //TODO 87
	}

ParameterList1:
	/* EMPTY */
	{
		$$ = []ParameterList1(nil) //TODO 88
	}
|	ParameterList1 ',' ParameterDecl
	{
		$$ = append($1.([]ParameterList1), ",", $3) //TODO 89
	}

Parameters:
	'(' ')'
	{
		$$ = []Parameters{"(", ")"} //TODO 90
	}
|	'(' ParameterDecl ParameterList1 ')'
	{
		$$ = []Parameters{"(", $2, $3, ")"} //TODO 91
	}

PostStmt:
	SimpleStmt
	{
		$$ = $1 //TODO 92
	}

PrimaryExpr:
	INT_LIT
	{
		$$ = $1 //TODO 93
	}
|	FLOAT_LIT
	{
		$$ = $1 //TODO 94
	}
|	IMAGINARY_LIT
	{
		$$ = $1 //TODO 95
	}
|	RUNE_LIT
	{
		$$ = $1 //TODO 96
	}
|	STRING_LIT
	{
		$$ = $1 //TODO 97
	}
|	StructType LiteralValue
	{
		$$ = []PrimaryExpr{$1, $2} //TODO 98
	}
|	ArrayType LiteralValue
	{
		$$ = []PrimaryExpr{$1, $2} //TODO 99
	}
|	'[' DDD ']' ElementType LiteralValue
	{
		$$ = []PrimaryExpr{"[", $2, "]", $4, $5} //TODO 100
	}
|	SliceType LiteralValue
	{
		$$ = []PrimaryExpr{$1, $2} //TODO 101
	}
|	MapType LiteralValue
	{
		$$ = []PrimaryExpr{$1, $2} //TODO 102
	}
|	Name LiteralValue
	{
		$$ = []PrimaryExpr{$1, $2} //TODO 103
	}
|	FUNC Function
	{
		$$ = []PrimaryExpr{"func", $2} //TODO 104
	}
|	Name
	{
		$$ = $1 //TODO 105
	}
|	ReceiverType '.' MethodName
	{
		$$ = []PrimaryExpr{$1, ".", $3} //TODO 106
	}
|	'(' Expression ')'
	{
		$$ = []PrimaryExpr{"(", $2, ")"} //TODO 107
	}
|	Type '(' Expression ')'
	{
		$$ = []PrimaryExpr{$1, "(", $3, ")"} //TODO 108
	}
|	PrimaryExpr '.' IDENTIFIER
	{
		$$ = []PrimaryExpr{$1, ".", $3} //TODO 109
	}
|	PrimaryExpr '[' Expression ']'
	{
		$$ = []PrimaryExpr{$1, "[", $3, "]"} //TODO 110
	}
|	PrimaryExpr '[' Slice1 ':' ']'
	{
		$$ = []PrimaryExpr{$1, "[", $3, ":", "]"} //TODO 111
	}
|	PrimaryExpr '[' Slice1 ':' Expression ']'
	{
		$$ = []PrimaryExpr{$1, "[", $3, ":", $5, "]"} //TODO 112
	}
|	PrimaryExpr '.' '(' Type ')'
	{
		$$ = []PrimaryExpr{$1, ".", "(", $4, ")"} //TODO 113
	}
|	PrimaryExpr '(' ')'
	{
		$$ = []PrimaryExpr{$1, "(", ")"} //TODO 114
	}
|	PrimaryExpr '(' ExpressionList ')'
	{
		$$ = []PrimaryExpr{$1, "(", $3, ")"} //TODO 115
	}
|	PrimaryExpr '(' TypeLitNoPtr ',' ExpressionList ')'
	{
		$$ = []PrimaryExpr{$1, "(", $3, ",", $5, ")"} //TODO 116
	}
|	PrimaryExpr '(' ExpressionList DDD ')'
	{
		$$ = []PrimaryExpr{$1, "(", $3, $4, ")"} //TODO 117
	}
|	PrimaryExpr '(' TypeLitNoPtr ',' ExpressionList DDD ')'
	{
		$$ = []PrimaryExpr{$1, "(", $3, ",", $5, $6, ")"} //TODO 118
	}

Receiver:
	'(' IDENTIFIER ')'
	{
		$$ = []Receiver{"(", $2, ")"} //TODO 119
	}
|	'(' '*' IDENTIFIER ')'
	{
		$$ = []Receiver{"(", "*", $3, ")"} //TODO 120
	}
|	'(' IDENTIFIER IDENTIFIER ')'
	{
		$$ = []Receiver{"(", $2, $3, ")"} //TODO 121
	}
|	'(' IDENTIFIER '*' IDENTIFIER ')'
	{
		$$ = []Receiver{"(", $2, "*", $4, ")"} //TODO 122
	}

ReceiverType:
	Name
	{
		$$ = $1 //TODO 123
	}
|	'(' '*' Name ')'
	{
		$$ = []ReceiverType{"(", "*", $3, ")"} //TODO 124
	}
|	'(' ReceiverType ')'
	{
		$$ = []ReceiverType{"(", $2, ")"} //TODO 125
	}

RecvExpr:
	Expression
	{
		$$ = $1 //TODO 126
	}

SelectStmt1:
	/* EMPTY */
	{
		$$ = []SelectStmt1(nil) //TODO 127
	}
|	SelectStmt1 CASE SendStmt ':' StatementList
	{
		$$ = append($1.([]SelectStmt1), "case", $3, ":", $5) //TODO 128
	}
|	SelectStmt1 CASE RecvExpr ':' StatementList
	{
		$$ = append($1.([]SelectStmt1), "case", $3, ":", $5) //TODO 129
	}
|	SelectStmt1 CASE ExpressionList '=' RecvExpr ':' StatementList
	{
		$$ = append($1.([]SelectStmt1), "case", $3, "=", $5, ":", $7) //TODO 130
	}
|	SelectStmt1 CASE IDLIST_COLAS RecvExpr ':' StatementList
	{
		$$ = append($1.([]SelectStmt1), "case", $3, $4, ":", $6) //TODO 131
	}
|	SelectStmt1 DEFAULT ':' StatementList
	{
		$$ = append($1.([]SelectStmt1), "default", ":", $4) //TODO 132
	}

SendStmt:
	Expression COMM Expression
	{
		$$ = []SendStmt{$1, $2, $3} //TODO 133
	}

Signature:
	Parameters
	{
		$$ = $1 //TODO 134
	}
|	Parameters Parameters
	{
		$$ = []Signature{$1, $2} //TODO 135
	}
|	Parameters Type
	{
		$$ = []Signature{$1, $2} //TODO 136
	}

SimpleStmt:
	/* EMPTY */
	{
		$$ = nil //TODO 137
	}
|	Expression
	{
		$$ = $1 //TODO 138
	}
|	SendStmt
	{
		$$ = $1 //TODO 139
	}
|	Expression INC
	{
		$$ = []SimpleStmt{$1, $2} //TODO 140
	}
|	Expression DEC
	{
		$$ = []SimpleStmt{$1, $2} //TODO 141
	}
|	ExpressionList '=' ExpressionList
	{
		$$ = []SimpleStmt{$1, "=", $3} //TODO 142
	}
|	ExpressionList ADD_ASSIGN ExpressionList
	{
		$$ = []SimpleStmt{$1, $2, $3} //TODO 143
	}
|	ExpressionList AND_ASSIGN ExpressionList
	{
		$$ = []SimpleStmt{$1, $2, $3} //TODO 144
	}
|	ExpressionList MUL_ASSIGN ExpressionList
	{
		$$ = []SimpleStmt{$1, $2, $3} //TODO 145
	}
|	ExpressionList OR_ASSIGN ExpressionList
	{
		$$ = []SimpleStmt{$1, $2, $3} //TODO 146
	}
|	ExpressionList QUO_ASSIGN ExpressionList
	{
		$$ = []SimpleStmt{$1, $2, $3} //TODO 147
	}
|	ExpressionList REM_ASSIGN ExpressionList
	{
		$$ = []SimpleStmt{$1, $2, $3} //TODO 148
	}
|	ExpressionList SHL_ASSIGN ExpressionList
	{
		$$ = []SimpleStmt{$1, $2, $3} //TODO 149
	}
|	ExpressionList SHR_ASSIGN ExpressionList
	{
		$$ = []SimpleStmt{$1, $2, $3} //TODO 150
	}
|	ExpressionList SUB_ASSIGN ExpressionList
	{
		$$ = []SimpleStmt{$1, $2, $3} //TODO 151
	}
|	ExpressionList XOR_ASSIGN ExpressionList
	{
		$$ = []SimpleStmt{$1, $2, $3} //TODO 152
	}
|	ExpressionList AND_NOT_ASSIGN ExpressionList
	{
		$$ = []SimpleStmt{$1, $2, $3} //TODO 153
	}
|	IDLIST_COLAS ExpressionList
	{
		$$ = []SimpleStmt{$1, $2} //TODO 154
	}

Slice1:
	/* EMPTY */
	{
		$$ = nil //TODO 155
	}
|	Expression
	{
		$$ = $1 //TODO 156
	}

SliceType:
	'[' ']' ElementType
	{
		$$ = []SliceType{"[", "]", $3} //TODO 157
	}

SourceFile:
	PACKAGE PackageName ';' SourceFile1 SourceFile2
	{
		$$ = []SourceFile{"package", $2, ";", $4, $5} //TODO 158
	}

SourceFile1:
	/* EMPTY */
	{
		$$ = []SourceFile1(nil) //TODO 159
	}
|	SourceFile1 IMPORT ImportSpec ';'
	{
		$$ = append($1.([]SourceFile1), "import", $3, ";") //TODO 160
	}
|	SourceFile1 IMPORT '(' ')' ';'
	{
		$$ = append($1.([]SourceFile1), "import", "(", ")", ";") //TODO 161
	}
|	SourceFile1 IMPORT '(' ImportSpec ImportDecl111 ')' ';'
	{
		$$ = append($1.([]SourceFile1), "import", "(", $4, $5, ")", ";") //TODO 162
	}

SourceFile2:
	/* EMPTY */
	{
		$$ = []SourceFile2(nil) //TODO 163
	}
|	SourceFile2 Declaration ';'
	{
		$$ = append($1.([]SourceFile2), $2, ";") //TODO 164
	}
|	SourceFile2 FUNC FunctionName Function ';'
	{
		$$ = append($1.([]SourceFile2), "func", $3, $4, ";") //TODO 165
	}
|	SourceFile2 FUNC FunctionName Signature ';'
	{
		$$ = append($1.([]SourceFile2), "func", $3, $4, ";") //TODO 166
	}
|	SourceFile2 FUNC Receiver MethodName Function ';'
	{
		$$ = append($1.([]SourceFile2), "func", $3, $4, $5, ";") //TODO 167
	}
|	SourceFile2 FUNC Receiver MethodName Signature ';'
	{
		$$ = append($1.([]SourceFile2), "func", $3, $4, $5, ";") //TODO 168
	}

Start:
	SourceFile
	{
		_parserResult = $1 //TODO 169
	}

Statement:
	Declaration
	{
		$$ = $1 //TODO 170
	}
|	Label ':' Statement
	{
		$$ = []Statement{$1, ":", $3} //TODO 171
	}
|	SimpleStmt
	{
		$$ = $1 //TODO 172
	}
|	GO Expression
	{
		$$ = []Statement{"go", $2} //TODO 173
	}
|	RETURN
	{
		$$ = "return" //TODO 174
	}
|	RETURN ExpressionList
	{
		$$ = []Statement{"return", $2} //TODO 175
	}
|	BREAK
	{
		$$ = "break" //TODO 176
	}
|	BREAK Label
	{
		$$ = []Statement{"break", $2} //TODO 177
	}
|	CONTINUE
	{
		$$ = "continue" //TODO 178
	}
|	CONTINUE Label
	{
		$$ = []Statement{"continue", $2} //TODO 179
	}
|	GOTO Label
	{
		$$ = []Statement{"goto", $2} //TODO 180
	}
|	FALLTHROUGH
	{
		$$ = "fallthrough" //TODO 181
	}
|	Block
	{
		$$ = $1 //TODO 182
	}
|	IfStmt
	{
		$$ = $1 //TODO 183
	}
|	SWITCH ExprSwitchStmt2 LBR ExprSwitchStmt3 '}'
	{
		$$ = []Statement{"switch", $2, $3, $4, "}"} //TODO 184
	}
|	SWITCH SimpleStmt ';' ExprSwitchStmt2 LBR ExprSwitchStmt3 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, $5, $6, "}"} //TODO 185
	}
|	SWITCH PrimaryExpr '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ".", "(", "type", ")", "{", $8, "}"} //TODO 186
	}
|	SWITCH SimpleStmt ';' PrimaryExpr '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, ".", "(", "type", ")", "{", $10, "}"} //TODO 187
	}
|	SWITCH IDLIST_COLAS PrimaryExpr '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, $3, ".", "(", "type", ")", "{", $9, "}"} //TODO 188
	}
|	SWITCH SimpleStmt ';' IDLIST_COLAS PrimaryExpr '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, $5, ".", "(", "type", ")", "{", $11, "}"} //TODO 189
	}
|	SELECT '{' SelectStmt1 '}'
	{
		$$ = []Statement{"select", "{", $3, "}"} //TODO 190
	}
|	FOR LBR StatementList '}'
	{
		$$ = []Statement{"for", $2, $3, "}"} //TODO 191
	}
|	FOR Condition LBR StatementList '}'
	{
		$$ = []Statement{"for", $2, $3, $4, "}"} //TODO 192
	}
|	FOR InitStmt ';' ';' PostStmt LBR StatementList '}'
	{
		$$ = []Statement{"for", $2, ";", ";", $5, $6, $7, "}"} //TODO 193
	}
|	FOR InitStmt ';' Condition ';' PostStmt LBR StatementList '}'
	{
		$$ = []Statement{"for", $2, ";", $4, ";", $6, $7, $8, "}"} //TODO 194
	}
|	FOR ExpressionList '=' RANGE Expression LBR StatementList '}'
	{
		$$ = []Statement{"for", $2, "=", "range", $5, $6, $7, "}"} //TODO 195
	}
|	FOR IDLIST_COLAS RANGE Expression LBR StatementList '}'
	{
		$$ = []Statement{"for", $2, "range", $4, $5, $6, "}"} //TODO 196
	}
|	DEFER Expression
	{
		$$ = []Statement{"defer", $2} //TODO 197
	}

StatementList:
	Statement StatementList1
	{
		$$ = []StatementList{$1, $2} //TODO 198
	}

StatementList1:
	/* EMPTY */
	{
		$$ = []StatementList1(nil) //TODO 199
	}
|	StatementList1 ';' Statement
	{
		$$ = append($1.([]StatementList1), ";", $3) //TODO 200
	}

StructType:
	STRUCT '{' '}'
	{
		$$ = []StructType{"struct", "{", "}"} //TODO 201
	}
|	STRUCT '{' FieldDecl StructType11 '}'
	{
		$$ = []StructType{"struct", "{", $3, $4, "}"} //TODO 202
	}

StructType11:
	/* EMPTY */
	{
		$$ = []StructType11(nil) //TODO 203
	}
|	StructType11 ';' FieldDecl
	{
		$$ = append($1.([]StructType11), ";", $3) //TODO 204
	}

Type:
	Name
	{
		$$ = $1 //TODO 205
	}
|	TypeLitNoPtr
	{
		$$ = $1 //TODO 206
	}
|	'*' Type
	{
		$$ = []Type{"*", $2} //TODO 207
	}
|	'(' Type ')'
	{
		$$ = []Type{"(", $2, ")"} //TODO 208
	}

TypeDecl111:
	/* EMPTY */
	{
		$$ = []TypeDecl111(nil) //TODO 209
	}
|	TypeDecl111 ';' TypeSpec
	{
		$$ = append($1.([]TypeDecl111), ";", $3) //TODO 210
	}

TypeList1:
	/* EMPTY */
	{
		$$ = []TypeList1(nil) //TODO 211
	}
|	TypeList1 ',' Type
	{
		$$ = append($1.([]TypeList1), ",", $3) //TODO 212
	}

TypeLitNoPtr:
	ArrayType
	{
		$$ = $1 //TODO 213
	}
|	StructType
	{
		$$ = $1 //TODO 214
	}
|	FUNC Signature
	{
		$$ = []TypeLitNoPtr{"func", $2} //TODO 215
	}
|	INTERFACE '{' '}'
	{
		$$ = []TypeLitNoPtr{"interface", "{", "}"} //TODO 216
	}
|	INTERFACE '{' MethodSpec InterfaceType11 '}'
	{
		$$ = []TypeLitNoPtr{"interface", "{", $3, $4, "}"} //TODO 217
	}
|	SliceType
	{
		$$ = $1 //TODO 218
	}
|	MapType
	{
		$$ = $1 //TODO 219
	}
|	CHAN ElementType
	{
		$$ = []TypeLitNoPtr{"chan", $2} //TODO 220
	}
|	CHANCOMM ElementType
	{
		$$ = []TypeLitNoPtr{$1, $2} //TODO 221
	}
|	COMMCHAN ElementType
	{
		$$ = []TypeLitNoPtr{$1, $2} //TODO 222
	}

TypeSpec:
	IDENTIFIER Type
	{
		$$ = []TypeSpec{$1, $2} //TODO 223
	}

TypeSwitchStmt2:
	/* EMPTY */
	{
		$$ = []TypeSwitchStmt2(nil) //TODO 224
	}
|	TypeSwitchStmt2 CASE Type TypeList1 ':' StatementList
	{
		$$ = append($1.([]TypeSwitchStmt2), "case", $3, $4, ":", $6) //TODO 225
	}
|	TypeSwitchStmt2 DEFAULT ':' StatementList
	{
		$$ = append($1.([]TypeSwitchStmt2), "default", ":", $4) //TODO 226
	}

UnaryExpr:
	PrimaryExpr
	{
		$$ = $1 //TODO 227
	}
|	'+' UnaryExpr
	{
		$$ = []UnaryExpr{"+", $2} //TODO 228
	}
|	'-' UnaryExpr
	{
		$$ = []UnaryExpr{"-", $2} //TODO 229
	}
|	'!' UnaryExpr
	{
		$$ = []UnaryExpr{"!", $2} //TODO 230
	}
|	'^' UnaryExpr
	{
		$$ = []UnaryExpr{"^", $2} //TODO 231
	}
|	'*' UnaryExpr
	{
		$$ = []UnaryExpr{"*", $2} //TODO 232
	}
|	'&' UnaryExpr
	{
		$$ = []UnaryExpr{"&", $2} //TODO 233
	}
|	COMM UnaryExpr
	{
		$$ = []UnaryExpr{$1, $2} //TODO 234
	}

VarDecl111:
	/* EMPTY */
	{
		$$ = []VarDecl111(nil) //TODO 235
	}
|	VarDecl111 ';' VarSpec
	{
		$$ = append($1.([]VarDecl111), ";", $3) //TODO 236
	}

VarSpec:
	IDENTIFIER_LIST Type
	{
		$$ = []VarSpec{$1, $2} //TODO 237
	}
|	IDENTIFIER_LIST Type '=' ExpressionList
	{
		$$ = []VarSpec{$1, $2, "=", $4} //TODO 238
	}
|	IDENTIFIER_LIST '=' ExpressionList
	{
		$$ = []VarSpec{$1, "=", $3} //TODO 239
	}

%%

//TODO remove demo stuff below

var _parserResult interface{}

type (
	ArrayType interface{}
	Block interface{}
	Condition interface{}
	ConstDecl111 interface{}
	ConstSpec interface{}
	Declaration interface{}
	Element interface{}
	ElementList1 interface{}
	ElementType interface{}
	ExprSwitchStmt2 interface{}
	ExprSwitchStmt3 interface{}
	Expression interface{}
	ExpressionList interface{}
	ExpressionList1 interface{}
	FieldDecl interface{}
	FieldDecl2 interface{}
	Function interface{}
	FunctionName interface{}
	IfStmt interface{}
	IfStmt2 interface{}
	ImportDecl111 interface{}
	ImportPath interface{}
	ImportSpec interface{}
	InitStmt interface{}
	InterfaceType11 interface{}
	Label interface{}
	LiteralValue interface{}
	MapType interface{}
	MethodName interface{}
	MethodSpec interface{}
	Name interface{}
	PackageName interface{}
	ParameterDecl interface{}
	ParameterList1 interface{}
	Parameters interface{}
	PostStmt interface{}
	PrimaryExpr interface{}
	Receiver interface{}
	ReceiverType interface{}
	RecvExpr interface{}
	SelectStmt1 interface{}
	SendStmt interface{}
	Signature interface{}
	SimpleStmt interface{}
	Slice1 interface{}
	SliceType interface{}
	SourceFile interface{}
	SourceFile1 interface{}
	SourceFile2 interface{}
	Start interface{}
	Statement interface{}
	StatementList interface{}
	StatementList1 interface{}
	StructType interface{}
	StructType11 interface{}
	Type interface{}
	TypeDecl111 interface{}
	TypeList1 interface{}
	TypeLitNoPtr interface{}
	TypeSpec interface{}
	TypeSwitchStmt2 interface{}
	UnaryExpr interface{}
	VarDecl111 interface{}
	VarSpec interface{}
)
	
func _dump() {
	s := fmt.Sprintf("%#v", _parserResult)
	s = strings.Replace(s, "%", "%%", -1)
	s = strings.Replace(s, "{", "{%i\n", -1)
	s = strings.Replace(s, "}", "%u\n}", -1)
	s = strings.Replace(s, ", ", ",\n", -1)
	var buf bytes.Buffer
	strutil.IndentFormatter(&buf, ". ").Format(s)
	buf.WriteString("\n")
	a := strings.Split(buf.String(), "\n")
	for _, v := range a {
		if strings.HasSuffix(v, "(nil)") || strings.HasSuffix(v, "(nil),") {
			continue
		}
	
		fmt.Println(v)
	}
}

// End of demo stuff
