%{

//TODO Put your favorite license here
		
// yacc source generated by ebnf2y[1]
// at 2013-08-08 18:15:27.620841165 +0200 CEST.
//
// CAUTION: If this file is a Go source file (*.go), it was generated
// automatically by '$ go tool yacc' from a *.y file - DO NOT EDIT in that case!
// 
//   [1]: http://github.com/cznic/ebnf2y

package main //TODO real package name

//TODO required only be the demo _dump function
import (
	"bytes"
	"fmt"
	"strings"

	"github.com/cznic/strutil"
)

%}

%union {
	item interface{} //TODO insert real field(s)
}

%token	ANDAND
%token	ANDNOT
%token	ASSIGN_OP
%token	CHANCOMM
%token	COLAS
%token	COMM
%token	COMMCHAN
%token	DDD
%token	DEC
%token	EQ
%token	FLOAT_LIT
%token	GE
%token	IDENTIFIER_BUILT_IN
%token	IDENTIFIER_FIELD
%token	IDENTIFIER_LABEL
%token	IDENTIFIER_LIST
%token	IDENTIFIER_METHOD
%token	IDENTIFIER_OPERAND
%token	IDENTIFIER_SELECTOR
%token	IDENTIFIER_TYPE
%token	IMAGINARY_LIT
%token	INC
%token	INT_LIT
%token	LE
%token	LSH
%token	NAME
%token	NE
%token	OROR
%token	RSH
%token	RUNE_LIT
%token	STRING_LIT

%type	<item> 	/*TODO real type(s), if/where applicable */
	ANDAND
	ANDNOT
	ASSIGN_OP
	CHANCOMM
	COLAS
	COMM
	COMMCHAN
	DDD
	DEC
	EQ
	FLOAT_LIT
	GE
	IDENTIFIER_BUILT_IN
	IDENTIFIER_FIELD
	IDENTIFIER_LABEL
	IDENTIFIER_LIST
	IDENTIFIER_METHOD
	IDENTIFIER_OPERAND
	IDENTIFIER_SELECTOR
	IDENTIFIER_TYPE
	IMAGINARY_LIT
	INC
	INT_LIT
	LE
	LSH
	NAME
	NE
	OROR
	RSH
	RUNE_LIT
	STRING_LIT

%token BREAK
%token CASE
%token CHAN
%token CONST
%token CONTINUE
%token DEFAULT
%token DEFER
%token ELSE
%token FALLTHROUGH
%token FOR
%token FUNC
%token GO
%token GOTO
%token IF
%token IMPORT
%token INTERFACE
%token MAP
%token PACKAGE
%token RANGE
%token RETURN
%token SELECT
%token STRUCT
%token SWITCH
%token TYPE
%token VAR

%type	<item> 	/*TODO real type(s), if/where applicable */
	AnonymousField
	AnonymousField1
	ArgumentList
	ArrayLength
	ArrayType
	Assignment
	BaseType
	BaseTypeName
	BasicLit
	Binary_op
	Block
	BreakStmt
	BreakStmt1
	BuiltinArgs
	BuiltinCall
	BuiltinCall1
	BuiltinCall11
	Call
	Call1
	Call11
	Channel
	ChannelType
	ChannelType1
	CommCase
	CommCase1
	CommClause
	CompositeLit
	Condition
	ConstDecl
	ConstDecl1
	ConstDecl11
	ConstSpec
	ConstSpec1
	ConstSpec11
	ContinueStmt
	ContinueStmt1
	Conversion
	Conversion1
	Declaration
	DeferStmt
	Element
	ElementIndex
	ElementList1
	ElementType
	EmptyStmt
	ExprCaseClause
	ExprSwitchCase
	ExprSwitchStmt
	ExprSwitchStmt2
	ExprSwitchStmt3
	Expression
	ExpressionList
	ExpressionStmt
	FallthroughStmt
	FieldDecl
	FieldDecl1
	FieldDecl2
	FieldName
	ForClause
	ForClause1
	ForStmt
	ForStmt1
	ForStmt11
	Function
	FunctionBody
	FunctionDecl
	FunctionDecl1
	FunctionLit
	FunctionType
	GoStmt
	GotoStmt
	IfStmt
	IfStmt2
	IfStmt21
	ImportDecl
	ImportDecl1
	ImportDecl11
	ImportPath
	ImportSpec
	ImportSpec1
	ImportSpec11
	IncDecStmt
	IncDecStmt1
	Index
	InitStmt
	InterfaceType
	InterfaceType1
	Key
	KeyType
	Label
	LabeledStmt
	Literal
	LiteralType
	LiteralValue
	LiteralValue1
	LiteralValue11
	MapType
	MethodDecl
	MethodDecl1
	MethodExpr
	MethodName
	MethodSpec
	MethodSpec1
	Operand
	PackageClause
	ParameterDecl
	ParameterDecl1
	ParameterDecl2
	ParameterList1
	Parameters
	Parameters1
	Parameters11
	PointerType
	PostStmt
	PrimaryExpr1
	PrimaryExpr2
	PrimaryExpr21
	RangeClause
	RangeClause1
	Receiver
	Receiver1
	Receiver2
	ReceiverType
	RecvExpr
	RecvStmt
	RecvStmt11
	Result
	ReturnStmt
	ReturnStmt1
	SelectStmt
	SelectStmt1
	Selector
	SendStmt
	ShortVarDecl
	Signature
	SimpleStmt
	Slice
	Slice1
	Slice2
	SliceType
	SourceFile
	SourceFile1
	SourceFile2
	Start
	Statement
	StatementList
	StatementList1
	StructType
	StructType1
	SwitchStmt
	Tag
	TopLevelDecl
	Type
	TypeAssertion
	TypeCaseClause
	TypeDecl
	TypeDecl1
	TypeDecl11
	TypeList
	TypeList1
	TypeLit
	TypeName
	TypeSpec
	TypeSwitchCase
	TypeSwitchGuard
	TypeSwitchStmt
	TypeSwitchStmt2
	UnaryExpr
	Value
	VarDecl
	VarDecl1
	VarDecl11
	VarSpec
	VarSpec1
	VarSpec11

/*TODO %left, %right, ... declarations */

%left		NotComma
%left		','

%left		NotParen
%left		'('
%left		PreferToLeftParen

%left		')'
%left		PreferToRightParen

%start Start

%%

AnonymousField:
	AnonymousField1 TypeName
	{
		$$ = []AnonymousField{$1, $2} //TODO 1
	}

AnonymousField1:
	/* EMPTY */
	{
		$$ = nil //TODO 2
	}
|	'*'
	{
		$$ = "*" //TODO 3
	}

ArgumentList:
	ExpressionList %prec NotComma
	{
		//$$ = []ArgumentList{$1, $2} //TODO 4
	}
|	ExpressionList DDD
	{
		//$$ = []ArgumentList{$1, $2} //TODO 4
	}

ArrayLength:
	Expression
	{
		$$ = $1 //TODO 7
	}

ArrayType:
	'[' ArrayLength ']' ElementType
	{
		$$ = []ArrayType{"[", $2, "]", $4} //TODO 8
	}

Assignment:
	ExpressionList ASSIGN_OP ExpressionList
	{
		$$ = []Assignment{$1, $2, $3} //TODO 9
	}

BaseType:
	Type %prec NotParen
	{
		$$ = $1 //TODO 10
	}

BaseTypeName:
	IDENTIFIER_TYPE
	{
		$$ = $1 //TODO 11
	}

BasicLit:
	INT_LIT
	{
		$$ = $1 //TODO 12
	}
|	FLOAT_LIT
	{
		$$ = $1 //TODO 13
	}
|	IMAGINARY_LIT
	{
		$$ = $1 //TODO 14
	}
|	RUNE_LIT
	{
		$$ = $1 //TODO 15
	}
|	STRING_LIT
	{
		$$ = $1 //TODO 16
	}

Binary_op:
	OROR
	{
		$$ = $1 //TODO 17
	}
|	ANDAND
	{
		$$ = $1 //TODO 18
	}
|	EQ
	{
		$$ = $1 //TODO 19
	}
|	NE
	{
		$$ = $1 //TODO 20
	}
|	'<'
	{
		$$ = "<" //TODO 21
	}
|	LE
	{
		$$ = $1 //TODO 22
	}
|	'>'
	{
		$$ = ">" //TODO 23
	}
|	GE
	{
		$$ = $1 //TODO 24
	}
|	'+'
	{
		$$ = "+" //TODO 25
	}
|	'-'
	{
		$$ = "-" //TODO 26
	}
|	'|'
	{
		$$ = "|" //TODO 27
	}
|	'^'
	{
		$$ = "^" //TODO 28
	}
|	'*'
	{
		$$ = "*" //TODO 29
	}
|	'/'
	{
		$$ = "/" //TODO 30
	}
|	'%'
	{
		$$ = "%" //TODO 31
	}
|	LSH
	{
		$$ = $1 //TODO 32
	}
|	RSH
	{
		$$ = $1 //TODO 33
	}
|	'&'
	{
		$$ = "&" //TODO 34
	}
|	ANDNOT
	{
		$$ = $1 //TODO 35
	}

Block:
	'{' StatementList '}'
	{
		$$ = []Block{"{", $2, "}"} //TODO 36
	}

BreakStmt:
	BREAK BreakStmt1
	{
		$$ = []BreakStmt{"break", $2} //TODO 37
	}

BreakStmt1:
	/* EMPTY */
	{
		$$ = nil //TODO 38
	}
|	Label
	{
		$$ = $1 //TODO 39
	}

BuiltinArgs:
	Type %prec NotComma
	{
		//$$ = []BuiltinArgs{$1, $2} //TODO 40
	}
|	Type ',' ArgumentList
	{
		//$$ = []BuiltinArgs{$1, $2} //TODO 40
	}
|	ArgumentList
	{
		$$ = $1 //TODO 41
	}

BuiltinCall:
	IDENTIFIER_BUILT_IN '(' BuiltinCall1 ')'
	{
		$$ = []BuiltinCall{$1, "(", $3, ")"} //TODO 44
	}

BuiltinCall1:
	/* EMPTY */
	{
		$$ = nil //TODO 45
	}
|	BuiltinArgs BuiltinCall11
	{
		$$ = []BuiltinCall1{$1, $2} //TODO 46
	}

BuiltinCall11:
	/* EMPTY */
	{
		$$ = nil //TODO 47
	}
|	','
	{
		$$ = "," //TODO 48
	}

Call:
	'(' Call1 ')'
	{
		$$ = []Call{"(", $2, ")"} //TODO 49
	}

Call1:
	/* EMPTY */
	{
		$$ = nil //TODO 50
	}
|	ArgumentList Call11
	{
		$$ = []Call1{$1, $2} //TODO 51
	}

Call11:
	/* EMPTY */
	{
		$$ = nil //TODO 52
	}
|	','
	{
		$$ = "," //TODO 53
	}

Channel:
	Expression
	{
		$$ = $1 //TODO 54
	}

ChannelType:
	ChannelType1 ElementType
	{
		$$ = []ChannelType{$1, $2} //TODO 55
	}

ChannelType1:
	CHAN CHANCOMM
	{
		$$ = []ChannelType1{"chan", $2} //TODO 56
	}
|	COMMCHAN
	{
		$$ = $1 //TODO 57
	}

CommCase:
	CASE CommCase1
	{
		$$ = []CommCase{"case", $2} //TODO 58
	}
|	DEFAULT
	{
		$$ = "default" //TODO 59
	}

CommCase1:
	SendStmt
	{
		$$ = $1 //TODO 60
	}
|	RecvStmt
	{
		$$ = $1 //TODO 61
	}

CommClause:
	CommCase ':' StatementList
	{
		$$ = []CommClause{$1, ":", $3} //TODO 62
	}

CompositeLit:
	LiteralType LiteralValue
	{
		$$ = []CompositeLit{$1, $2} //TODO 63
	}

Condition:
	Expression
	{
		$$ = $1 //TODO 64
	}

ConstDecl:
	CONST ConstDecl1
	{
		$$ = []ConstDecl{"const", $2} //TODO 65
	}

ConstDecl1:
	ConstSpec
	{
		$$ = $1 //TODO 66
	}
|	'(' ConstDecl11 ')'
	{
		$$ = []ConstDecl1{"(", $2, ")"} //TODO 67
	}

ConstDecl11:
	/* EMPTY */
	{
		$$ = []ConstDecl11(nil) //TODO 68
	}
|	ConstDecl11 ConstSpec ';'
	{
		$$ = append($1.([]ConstDecl11), $2, ";") //TODO 69
	}

ConstSpec:
	IDENTIFIER_LIST ConstSpec1
	{
		$$ = []ConstSpec{$1, $2} //TODO 70
	}

ConstSpec1:
	/* EMPTY */
	{
		$$ = nil //TODO 71
	}
|	ConstSpec11 '=' ExpressionList
	{
		$$ = []ConstSpec1{$1, "=", $3} //TODO 72
	}

ConstSpec11:
	/* EMPTY */
	{
		$$ = nil //TODO 73
	}
|	Type
	{
		$$ = $1 //TODO 74
	}

ContinueStmt:
	CONTINUE ContinueStmt1
	{
		$$ = []ContinueStmt{"continue", $2} //TODO 75
	}

ContinueStmt1:
	/* EMPTY */
	{
		$$ = nil //TODO 76
	}
|	Label
	{
		$$ = $1 //TODO 77
	}

Conversion:
	Type '(' Expression Conversion1 ')'
	{
		$$ = []Conversion{$1, "(", $3, $4, ")"} //TODO 78
	}

Conversion1:
	/* EMPTY */
	{
		$$ = nil //TODO 79
	}
|	','
	{
		$$ = "," //TODO 80
	}

Declaration:
	ConstDecl
	{
		$$ = $1 //TODO 81
	}
|	TypeDecl
	{
		$$ = $1 //TODO 82
	}
|	VarDecl
	{
		$$ = $1 //TODO 83
	}

DeferStmt:
	DEFER Expression
	{
		$$ = []DeferStmt{"defer", $2} //TODO 84
	}

Element:
	Value
	{
		$$ = $1 //TODO 85
	}
|	Key ':' Value
	{
		$$ = []Element{$1, ":", $3} //TODO 86
	}

ElementIndex:
	Expression
	{
		$$ = $1 //TODO 87
	}

ElementList1:
	/* EMPTY */
	{
		$$ = []ElementList1(nil) //TODO 88
	}
|	ElementList1 ',' Element
	{
		$$ = append($1.([]ElementList1), ",", $3) //TODO 89
	}

ElementType:
	Type
	{
		$$ = $1 //TODO 90
	}

EmptyStmt:
	/* EMPTY */
	{
		$$ = nil //TODO 91
	}

ExprCaseClause:
	ExprSwitchCase ':' StatementList
	{
		$$ = []ExprCaseClause{$1, ":", $3} //TODO 92
	}

ExprSwitchCase:
	CASE ExpressionList
	{
		$$ = []ExprSwitchCase{"case", $2} //TODO 93
	}
|	DEFAULT
	{
		$$ = "default" //TODO 94
	}

ExprSwitchStmt:
	SWITCH ExprSwitchStmt2 '{' ExprSwitchStmt3 '}'
	{
		$$ = []ExprSwitchStmt{"switch", $2, "{", $4, "}"} //TODO 95
	}
|	SWITCH SimpleStmt ';' ExprSwitchStmt2 '{' ExprSwitchStmt3 '}'
	{
		$$ = []ExprSwitchStmt{"switch", $2, ";", $4, "{", $6, "}"} //TODO 96
	}

ExprSwitchStmt2:
	/* EMPTY */
	{
		$$ = nil //TODO 97
	}
|	Expression
	{
		$$ = $1 //TODO 98
	}

ExprSwitchStmt3:
	/* EMPTY */
	{
		$$ = []ExprSwitchStmt3(nil) //TODO 99
	}
|	ExprSwitchStmt3 ExprCaseClause
	{
		$$ = append($1.([]ExprSwitchStmt3), $2) //TODO 100
	}

Expression:
	UnaryExpr
	{
		$$ = $1 //TODO 101
	}
|	Expression Binary_op UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 102
	}

ExpressionList:
	Expression
	{
		//$$ = []ExpressionList{$1, $2} //TODO 103
	}
|	ExpressionList ',' Expression
	{
		//$$ = append($1.([]ExpressionList1), ",", $3) //TODO 105
	}

ExpressionStmt:
	Expression
	{
		$$ = $1 //TODO 106
	}

FallthroughStmt:
	FALLTHROUGH
	{
		$$ = "fallthrough" //TODO 107
	}

FieldDecl:
	FieldDecl1 FieldDecl2
	{
		$$ = []FieldDecl{$1, $2} //TODO 108
	}

FieldDecl1:
	IDENTIFIER_LIST Type
	{
		$$ = []FieldDecl1{$1, $2} //TODO 109
	}
|	AnonymousField
	{
		$$ = $1 //TODO 110
	}

FieldDecl2:
	/* EMPTY */
	{
		$$ = nil //TODO 111
	}
|	Tag
	{
		$$ = $1 //TODO 112
	}

FieldName:
	IDENTIFIER_FIELD
	{
		$$ = $1 //TODO 113
	}

ForClause:
	InitStmt ';' ForClause1 ';' PostStmt
	{
		$$ = []ForClause{$1, ";", $3, ";", $5} //TODO 114
	}

ForClause1:
	/* EMPTY */
	{
		$$ = nil //TODO 115
	}
|	Condition
	{
		$$ = $1 //TODO 116
	}

ForStmt:
	FOR ForStmt1 Block
	{
		$$ = []ForStmt{"for", $2, $3} //TODO 117
	}

ForStmt1:
	/* EMPTY */
	{
		$$ = nil //TODO 118
	}
|	ForStmt11
	{
		$$ = $1 //TODO 119
	}

ForStmt11:
	Condition
	{
		$$ = $1 //TODO 120
	}
|	ForClause
	{
		$$ = $1 //TODO 121
	}
|	RangeClause
	{
		$$ = $1 //TODO 122
	}

Function:
	Signature FunctionBody
	{
		$$ = []Function{$1, $2} //TODO 123
	}

FunctionBody:
	Block
	{
		$$ = $1 //TODO 124
	}

FunctionDecl:
	FUNC NAME FunctionDecl1
	{
		$$ = []FunctionDecl{"func", $2, $3} //TODO 125
	}

FunctionDecl1:
	Function
	{
		$$ = $1 //TODO 126
	}
|	Signature
	{
		$$ = $1 //TODO 127
	}

FunctionLit:
	FUNC Function
	{
		$$ = []FunctionLit{"func", $2} //TODO 128
	}

FunctionType:
	FUNC Signature
	{
		$$ = []FunctionType{"func", $2} //TODO 129
	}

GoStmt:
	GO Expression
	{
		$$ = []GoStmt{"go", $2} //TODO 130
	}

GotoStmt:
	GOTO Label
	{
		$$ = []GotoStmt{"goto", $2} //TODO 131
	}

IfStmt:
	IF Expression Block IfStmt2
	{
		$$ = []IfStmt{"if", $2, $3, $4} //TODO 132
	}
|	IF SimpleStmt ';' Expression Block IfStmt2
	{
		$$ = []IfStmt{"if", $2, ";", $4, $5, $6} //TODO 133
	}

IfStmt2:
	/* EMPTY */
	{
		$$ = nil //TODO 134
	}
|	ELSE IfStmt21
	{
		$$ = []IfStmt2{"else", $2} //TODO 135
	}

IfStmt21:
	IfStmt
	{
		$$ = $1 //TODO 136
	}
|	Block
	{
		$$ = $1 //TODO 137
	}

ImportDecl:
	IMPORT ImportDecl1
	{
		$$ = []ImportDecl{"import", $2} //TODO 138
	}

ImportDecl1:
	ImportSpec
	{
		$$ = $1 //TODO 139
	}
|	'(' ImportDecl11 ')'
	{
		$$ = []ImportDecl1{"(", $2, ")"} //TODO 140
	}

ImportDecl11:
	/* EMPTY */
	{
		$$ = []ImportDecl11(nil) //TODO 141
	}
|	ImportDecl11 ImportSpec ';'
	{
		$$ = append($1.([]ImportDecl11), $2, ";") //TODO 142
	}

ImportPath:
	STRING_LIT
	{
		$$ = $1 //TODO 143
	}

ImportSpec:
	ImportSpec1 ImportPath
	{
		$$ = []ImportSpec{$1, $2} //TODO 144
	}

ImportSpec1:
	/* EMPTY */
	{
		$$ = nil //TODO 145
	}
|	ImportSpec11
	{
		$$ = $1 //TODO 146
	}

ImportSpec11:
	'.'
	{
		$$ = "." //TODO 147
	}
|	NAME
	{
		$$ = $1 //TODO 148
	}

IncDecStmt:
	Expression IncDecStmt1
	{
		$$ = []IncDecStmt{$1, $2} //TODO 149
	}

IncDecStmt1:
	INC
	{
		$$ = $1 //TODO 150
	}
|	DEC
	{
		$$ = $1 //TODO 151
	}

Index:
	'[' Expression ']'
	{
		$$ = []Index{"[", $2, "]"} //TODO 152
	}

InitStmt:
	SimpleStmt
	{
		$$ = $1 //TODO 153
	}

InterfaceType:
	INTERFACE '{' InterfaceType1 '}'
	{
		$$ = []InterfaceType{"interface", "{", $3, "}"} //TODO 154
	}

InterfaceType1:
	/* EMPTY */
	{
		$$ = []InterfaceType1(nil) //TODO 155
	}
|	InterfaceType1 MethodSpec ';'
	{
		$$ = append($1.([]InterfaceType1), $2, ";") //TODO 156
	}

Key:
	FieldName
	{
		$$ = $1 //TODO 157
	}
|	ElementIndex
	{
		$$ = $1 //TODO 158
	}

KeyType:
	Type
	{
		$$ = $1 //TODO 159
	}

Label:
	IDENTIFIER_LABEL
	{
		$$ = $1 //TODO 160
	}

LabeledStmt:
	IDENTIFIER_LABEL Statement
	{
		$$ = []LabeledStmt{$1, $2} //TODO 161
	}

Literal:
	BasicLit
	{
		$$ = $1 //TODO 162
	}
|	CompositeLit
	{
		$$ = $1 //TODO 163
	}
|	FunctionLit
	{
		$$ = $1 //TODO 164
	}

LiteralType:
	StructType
	{
		$$ = $1 //TODO 165
	}
|	ArrayType
	{
		$$ = $1 //TODO 166
	}
|	'[' DDD ']' ElementType
	{
		$$ = []LiteralType{"[", $2, "]", $4} //TODO 167
	}
|	SliceType
	{
		$$ = $1 //TODO 168
	}
|	MapType
	{
		$$ = $1 //TODO 169
	}
|	TypeName
	{
		$$ = $1 //TODO 170
	}

LiteralValue:
	'{' LiteralValue1 '}'
	{
		$$ = []LiteralValue{"{", $2, "}"} //TODO 171
	}

LiteralValue1:
	/* EMPTY */
	{
		$$ = nil //TODO 172
	}
|	Element ElementList1 LiteralValue11
	{
		$$ = []LiteralValue1{$1, $2, $3} //TODO 173
	}

LiteralValue11:
	/* EMPTY */
	{
		$$ = nil //TODO 174
	}
|	','
	{
		$$ = "," //TODO 175
	}

MapType:
	MAP '[' KeyType ']' ElementType
	{
		$$ = []MapType{"map", "[", $3, "]", $5} //TODO 176
	}

MethodDecl:
	FUNC Receiver NAME MethodDecl1
	{
		$$ = []MethodDecl{"func", $2, $3, $4} //TODO 177
	}

MethodDecl1:
	Function
	{
		$$ = $1 //TODO 178
	}
|	Signature
	{
		$$ = $1 //TODO 179
	}

MethodExpr:
	ReceiverType '.' MethodName
	{
		$$ = []MethodExpr{$1, ".", $3} //TODO 180
	}

MethodName:
	IDENTIFIER_METHOD
	{
		$$ = $1 //TODO 181
	}

MethodSpec:
	NAME Signature
	{
		$$ = []MethodSpec{$1, $2} //TODO 182
	}
|	NAME MethodSpec1
	{
		$$ = []MethodSpec{$1, $2} //TODO 183
	}

MethodSpec1:
	/* EMPTY */
	{
		$$ = nil //TODO 184
	}
|	'.' NAME
	{
		$$ = []MethodSpec1{".", $2} //TODO 185
	}

Operand:
	Literal
	{
		$$ = $1 //TODO 186
	}
|	IDENTIFIER_OPERAND
	{
		$$ = $1 //TODO 187
	}
|	MethodExpr
	{
		$$ = $1 //TODO 188
	}
|	'(' Expression ')'
	{
		$$ = []Operand{"(", $2, ")"} //TODO 189
	}

PackageClause:
	PACKAGE NAME
	{
		$$ = []PackageClause{"package", $2} //TODO 190
	}

ParameterDecl:
	ParameterDecl1 ParameterDecl2 Type
	{
		$$ = []ParameterDecl{$1, $2, $3} //TODO 191
	}

ParameterDecl1:
	/* EMPTY */
	{
		$$ = nil //TODO 192
	}
|	IDENTIFIER_LIST
	{
		$$ = $1 //TODO 193
	}

ParameterDecl2:
	/* EMPTY */
	{
		$$ = nil //TODO 194
	}
|	DDD
	{
		$$ = $1 //TODO 195
	}

ParameterList1:
	/* EMPTY */
	{
		$$ = []ParameterList1(nil) //TODO 196
	}
|	ParameterList1 ',' ParameterDecl
	{
		$$ = append($1.([]ParameterList1), ",", $3) //TODO 197
	}

Parameters:
	'(' Parameters1 ')'
	{
		$$ = []Parameters{"(", $2, ")"} //TODO 198
	}

Parameters1:
	/* EMPTY */
	{
		$$ = nil //TODO 199
	}
|	ParameterDecl ParameterList1 Parameters11
	{
		$$ = []Parameters1{$1, $2, $3} //TODO 200
	}

Parameters11:
	/* EMPTY */
	{
		$$ = nil //TODO 201
	}
|	','
	{
		$$ = "," //TODO 202
	}

PointerType:
	'*' BaseType
	{
		$$ = []PointerType{"*", $2} //TODO 203
	}

PostStmt:
	SimpleStmt
	{
		$$ = $1 //TODO 204
	}

PrimaryExpr1:
	Operand
	{
		$$ = $1 //TODO 205
	}
|	Conversion
	{
		$$ = $1 //TODO 206
	}
|	BuiltinCall
	{
		$$ = $1 //TODO 207
	}

PrimaryExpr2:
	/* EMPTY */
	{
		$$ = []PrimaryExpr2(nil) //TODO 208
	}
|	PrimaryExpr2 PrimaryExpr21
	{
		$$ = append($1.([]PrimaryExpr2), $2) //TODO 209
	}

PrimaryExpr21:
	Selector
	{
		$$ = $1 //TODO 210
	}
|	Index
	{
		$$ = $1 //TODO 211
	}
|	Slice
	{
		$$ = $1 //TODO 212
	}
|	TypeAssertion
	{
		$$ = $1 //TODO 213
	}
|	Call
	{
		$$ = $1 //TODO 214
	}

RangeClause:
	RangeClause1 RANGE Expression
	{
		$$ = []RangeClause{$1, "range", $3} //TODO 215
	}

RangeClause1:
	ExpressionList '='
	{
		$$ = []RangeClause1{$1, "="} //TODO 216
	}
|	IDENTIFIER_LIST COLAS
	{
		$$ = []RangeClause1{$1, $2} //TODO 217
	}

Receiver:
	'(' Receiver1 Receiver2 BaseTypeName ')'
	{
		$$ = []Receiver{"(", $2, $3, $4, ")"} //TODO 218
	}

Receiver1:
	/* EMPTY */
	{
		$$ = nil //TODO 219
	}
|	NAME
	{
		$$ = $1 //TODO 220
	}

Receiver2:
	/* EMPTY */
	{
		$$ = nil //TODO 221
	}
|	'*'
	{
		$$ = "*" //TODO 222
	}

ReceiverType:
	TypeName
	{
		$$ = $1 //TODO 223
	}
|	'(' '*' TypeName ')'
	{
		$$ = []ReceiverType{"(", "*", $3, ")"} //TODO 224
	}
|	'(' TypeName ')'
	{
		$$ = []ReceiverType{"(", $2, ")"} //TODO 225
	}

RecvExpr:
	Expression
	{
		$$ = $1 //TODO 226
	}

RecvStmt:
	RecvExpr
	{
		$$ = $1 //TODO 227
	}
|	RecvStmt11 RecvExpr
	{
		$$ = []RecvStmt{$1, $2} //TODO 228
	}

RecvStmt11:
	ExpressionList '='
	{
		$$ = []RecvStmt11{$1, "="} //TODO 229
	}
|	IDENTIFIER_LIST COLAS
	{
		$$ = []RecvStmt11{$1, $2} //TODO 230
	}

Result:
	Parameters
	{
		$$ = $1 //TODO 231
	}
|	TypeName
	{
		$$ = $1 //TODO 232
	}
|	TypeLit
	{
		$$ = $1 //TODO 233
	}

ReturnStmt:
	RETURN ReturnStmt1
	{
		$$ = []ReturnStmt{"return", $2} //TODO 234
	}

ReturnStmt1:
	/* EMPTY */
	{
		$$ = nil //TODO 235
	}
|	ExpressionList
	{
		$$ = $1 //TODO 236
	}

SelectStmt:
	SELECT '{' SelectStmt1 '}'
	{
		$$ = []SelectStmt{"select", "{", $3, "}"} //TODO 237
	}

SelectStmt1:
	/* EMPTY */
	{
		$$ = []SelectStmt1(nil) //TODO 238
	}
|	SelectStmt1 CommClause
	{
		$$ = append($1.([]SelectStmt1), $2) //TODO 239
	}

Selector:
	'.' IDENTIFIER_SELECTOR
	{
		$$ = []Selector{".", $2} //TODO 240
	}

SendStmt:
	Channel COMM Expression
	{
		$$ = []SendStmt{$1, $2, $3} //TODO 241
	}

ShortVarDecl:
	IDENTIFIER_LIST COLAS ExpressionList
	{
		$$ = []ShortVarDecl{$1, $2, $3} //TODO 242
	}

Signature:
	Parameters %prec NotParen
	{
		$$ = $1 //TODO 243
	}
|	Parameters Result
	{
		$$ = []Signature{$1, $2} //TODO 244
	}

SimpleStmt:
	EmptyStmt
	{
		$$ = $1 //TODO 245
	}
|	ExpressionStmt
	{
		$$ = $1 //TODO 246
	}
|	SendStmt
	{
		$$ = $1 //TODO 247
	}
|	IncDecStmt
	{
		$$ = $1 //TODO 248
	}
|	Assignment
	{
		$$ = $1 //TODO 249
	}
|	ShortVarDecl
	{
		$$ = $1 //TODO 250
	}

Slice:
	'[' Slice1 ':' Slice2 ']'
	{
		$$ = []Slice{"[", $2, ":", $4, "]"} //TODO 251
	}

Slice1:
	/* EMPTY */
	{
		$$ = nil //TODO 252
	}
|	Expression
	{
		$$ = $1 //TODO 253
	}

Slice2:
	/* EMPTY */
	{
		$$ = nil //TODO 254
	}
|	Expression
	{
		$$ = $1 //TODO 255
	}

SliceType:
	'[' ']' ElementType
	{
		$$ = []SliceType{"[", "]", $3} //TODO 256
	}

SourceFile:
	PackageClause ';' SourceFile1 SourceFile2
	{
		$$ = []SourceFile{$1, ";", $3, $4} //TODO 257
	}

SourceFile1:
	/* EMPTY */
	{
		$$ = []SourceFile1(nil) //TODO 258
	}
|	SourceFile1 ImportDecl ';'
	{
		$$ = append($1.([]SourceFile1), $2, ";") //TODO 259
	}

SourceFile2:
	/* EMPTY */
	{
		$$ = []SourceFile2(nil) //TODO 260
	}
|	SourceFile2 TopLevelDecl ';'
	{
		$$ = append($1.([]SourceFile2), $2, ";") //TODO 261
	}

Start:
	SourceFile
	{
		_parserResult = $1 //TODO 262
	}

Statement:
	Declaration
	{
		$$ = $1 //TODO 263
	}
|	LabeledStmt
	{
		$$ = $1 //TODO 264
	}
|	SimpleStmt
	{
		$$ = $1 //TODO 265
	}
|	GoStmt
	{
		$$ = $1 //TODO 266
	}
|	ReturnStmt
	{
		$$ = $1 //TODO 267
	}
|	BreakStmt
	{
		$$ = $1 //TODO 268
	}
|	ContinueStmt
	{
		$$ = $1 //TODO 269
	}
|	GotoStmt
	{
		$$ = $1 //TODO 270
	}
|	FallthroughStmt
	{
		$$ = $1 //TODO 271
	}
|	Block
	{
		$$ = $1 //TODO 272
	}
|	IfStmt
	{
		$$ = $1 //TODO 273
	}
|	SwitchStmt
	{
		$$ = $1 //TODO 274
	}
|	SelectStmt
	{
		$$ = $1 //TODO 275
	}
|	ForStmt
	{
		$$ = $1 //TODO 276
	}
|	DeferStmt
	{
		$$ = $1 //TODO 277
	}

StatementList:
	StatementList1
	{
		$$ = $1 //TODO 278
	}

StatementList1:
	/* EMPTY */
	{
		$$ = []StatementList1(nil) //TODO 279
	}
|	StatementList1 Statement ';'
	{
		$$ = append($1.([]StatementList1), $2, ";") //TODO 280
	}

StructType:
	STRUCT '{' StructType1 '}'
	{
		$$ = []StructType{"struct", "{", $3, "}"} //TODO 281
	}

StructType1:
	/* EMPTY */
	{
		$$ = []StructType1(nil) //TODO 282
	}
|	StructType1 FieldDecl ';'
	{
		$$ = append($1.([]StructType1), $2, ";") //TODO 283
	}

SwitchStmt:
	ExprSwitchStmt
	{
		$$ = $1 //TODO 284
	}
|	TypeSwitchStmt
	{
		$$ = $1 //TODO 285
	}

Tag:
	STRING_LIT
	{
		$$ = $1 //TODO 286
	}

TopLevelDecl:
	Declaration
	{
		$$ = $1 //TODO 287
	}
|	FunctionDecl
	{
		$$ = $1 //TODO 288
	}
|	MethodDecl
	{
		$$ = $1 //TODO 289
	}

Type:
	TypeName %prec PreferToRightParen
	{
		$$ = $1 //TODO 290
	}
|	TypeLit
	{
		$$ = $1 //TODO 291
	}
|	'(' Type ')'
	{
		$$ = []Type{"(", $2, ")"} //TODO 292
	}

TypeAssertion:
	'.' '(' Type ')'
	{
		$$ = []TypeAssertion{".", "(", $3, ")"} //TODO 293
	}

TypeCaseClause:
	TypeSwitchCase ':' StatementList
	{
		$$ = []TypeCaseClause{$1, ":", $3} //TODO 294
	}

TypeDecl:
	TYPE TypeDecl1
	{
		$$ = []TypeDecl{"type", $2} //TODO 295
	}

TypeDecl1:
	TypeSpec
	{
		$$ = $1 //TODO 296
	}
|	'(' TypeDecl11 ')'
	{
		$$ = []TypeDecl1{"(", $2, ")"} //TODO 297
	}

TypeDecl11:
	/* EMPTY */
	{
		$$ = []TypeDecl11(nil) //TODO 298
	}
|	TypeDecl11 TypeSpec ';'
	{
		$$ = append($1.([]TypeDecl11), $2, ";") //TODO 299
	}

TypeList:
	Type TypeList1
	{
		$$ = []TypeList{$1, $2} //TODO 300
	}

TypeList1:
	/* EMPTY */
	{
		$$ = []TypeList1(nil) //TODO 301
	}
|	TypeList1 ',' Type
	{
		$$ = append($1.([]TypeList1), ",", $3) //TODO 302
	}

TypeLit:
	ArrayType
	{
		$$ = $1 //TODO 303
	}
|	StructType
	{
		$$ = $1 //TODO 304
	}
|	PointerType
	{
		$$ = $1 //TODO 305
	}
|	FunctionType
	{
		$$ = $1 //TODO 306
	}
|	InterfaceType
	{
		$$ = $1 //TODO 307
	}
|	SliceType
	{
		$$ = $1 //TODO 308
	}
|	MapType
	{
		$$ = $1 //TODO 309
	}
|	ChannelType
	{
		$$ = $1 //TODO 310
	}

TypeName:
	IDENTIFIER_TYPE
	{
		$$ = $1 //TODO 311
	}

TypeSpec:
	NAME Type
	{
		$$ = []TypeSpec{$1, $2} //TODO 312
	}

TypeSwitchCase:
	CASE TypeList
	{
		$$ = []TypeSwitchCase{"case", $2} //TODO 313
	}
|	DEFAULT
	{
		$$ = "default" //TODO 314
	}

TypeSwitchGuard:
	PrimaryExpr1 PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, ".", "(", "type", ")"} //TODO 315
	}
|	IDENTIFIER_LIST COLAS PrimaryExpr1 PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, $4, ".", "(", "type", ")"} //TODO 316
	}

TypeSwitchStmt:
	SWITCH TypeSwitchGuard '{' TypeSwitchStmt2 '}'
	{
		$$ = []TypeSwitchStmt{"switch", $2, "{", $4, "}"} //TODO 317
	}
|	SWITCH SimpleStmt ';' TypeSwitchGuard '{' TypeSwitchStmt2 '}'
	{
		$$ = []TypeSwitchStmt{"switch", $2, ";", $4, "{", $6, "}"} //TODO 318
	}

TypeSwitchStmt2:
	/* EMPTY */
	{
		$$ = []TypeSwitchStmt2(nil) //TODO 319
	}
|	TypeSwitchStmt2 TypeCaseClause
	{
		$$ = append($1.([]TypeSwitchStmt2), $2) //TODO 320
	}

UnaryExpr:
	PrimaryExpr1 PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, $2} //TODO 321
	}
|	'+' UnaryExpr
	{
		$$ = []UnaryExpr{"+", $2} //TODO 322
	}
|	'-' UnaryExpr
	{
		$$ = []UnaryExpr{"-", $2} //TODO 323
	}
|	'!' UnaryExpr
	{
		$$ = []UnaryExpr{"!", $2} //TODO 324
	}
|	'^' UnaryExpr
	{
		$$ = []UnaryExpr{"^", $2} //TODO 325
	}
|	'*' UnaryExpr
	{
		$$ = []UnaryExpr{"*", $2} //TODO 326
	}
|	'&' UnaryExpr
	{
		$$ = []UnaryExpr{"&", $2} //TODO 327
	}
|	COMM UnaryExpr
	{
		$$ = []UnaryExpr{$1, $2} //TODO 328
	}

Value:
	Expression
	{
		$$ = $1 //TODO 329
	}
|	LiteralValue
	{
		$$ = $1 //TODO 330
	}

VarDecl:
	VAR VarDecl1
	{
		$$ = []VarDecl{"var", $2} //TODO 331
	}

VarDecl1:
	VarSpec
	{
		$$ = $1 //TODO 332
	}
|	'(' VarDecl11 ')'
	{
		$$ = []VarDecl1{"(", $2, ")"} //TODO 333
	}

VarDecl11:
	/* EMPTY */
	{
		$$ = []VarDecl11(nil) //TODO 334
	}
|	VarDecl11 VarSpec ';'
	{
		$$ = append($1.([]VarDecl11), $2, ";") //TODO 335
	}

VarSpec:
	IDENTIFIER_LIST VarSpec1
	{
		$$ = []VarSpec{$1, $2} //TODO 336
	}

VarSpec1:
	Type VarSpec11
	{
		$$ = []VarSpec1{$1, $2} //TODO 337
	}
|	'=' ExpressionList
	{
		$$ = []VarSpec1{"=", $2} //TODO 338
	}

VarSpec11:
	/* EMPTY */
	{
		$$ = nil //TODO 339
	}
|	'=' ExpressionList
	{
		$$ = []VarSpec11{"=", $2} //TODO 340
	}

%%

//TODO remove demo stuff below

var _parserResult interface{}

type (
	AnonymousField interface{}
	AnonymousField1 interface{}
	ArgumentList interface{}
	ArrayLength interface{}
	ArrayType interface{}
	Assignment interface{}
	BaseType interface{}
	BaseTypeName interface{}
	BasicLit interface{}
	Binary_op interface{}
	Block interface{}
	BreakStmt interface{}
	BreakStmt1 interface{}
	BuiltinArgs interface{}
	BuiltinCall interface{}
	BuiltinCall1 interface{}
	BuiltinCall11 interface{}
	Call interface{}
	Call1 interface{}
	Call11 interface{}
	Channel interface{}
	ChannelType interface{}
	ChannelType1 interface{}
	CommCase interface{}
	CommCase1 interface{}
	CommClause interface{}
	CompositeLit interface{}
	Condition interface{}
	ConstDecl interface{}
	ConstDecl1 interface{}
	ConstDecl11 interface{}
	ConstSpec interface{}
	ConstSpec1 interface{}
	ConstSpec11 interface{}
	ContinueStmt interface{}
	ContinueStmt1 interface{}
	Conversion interface{}
	Conversion1 interface{}
	Declaration interface{}
	DeferStmt interface{}
	Element interface{}
	ElementIndex interface{}
	ElementList1 interface{}
	ElementType interface{}
	EmptyStmt interface{}
	ExprCaseClause interface{}
	ExprSwitchCase interface{}
	ExprSwitchStmt interface{}
	ExprSwitchStmt2 interface{}
	ExprSwitchStmt3 interface{}
	Expression interface{}
	ExpressionList interface{}
	ExpressionStmt interface{}
	FallthroughStmt interface{}
	FieldDecl interface{}
	FieldDecl1 interface{}
	FieldDecl2 interface{}
	FieldName interface{}
	ForClause interface{}
	ForClause1 interface{}
	ForStmt interface{}
	ForStmt1 interface{}
	ForStmt11 interface{}
	Function interface{}
	FunctionBody interface{}
	FunctionDecl interface{}
	FunctionDecl1 interface{}
	FunctionLit interface{}
	FunctionType interface{}
	GoStmt interface{}
	GotoStmt interface{}
	IfStmt interface{}
	IfStmt2 interface{}
	IfStmt21 interface{}
	ImportDecl interface{}
	ImportDecl1 interface{}
	ImportDecl11 interface{}
	ImportPath interface{}
	ImportSpec interface{}
	ImportSpec1 interface{}
	ImportSpec11 interface{}
	IncDecStmt interface{}
	IncDecStmt1 interface{}
	Index interface{}
	InitStmt interface{}
	InterfaceType interface{}
	InterfaceType1 interface{}
	Key interface{}
	KeyType interface{}
	Label interface{}
	LabeledStmt interface{}
	Literal interface{}
	LiteralType interface{}
	LiteralValue interface{}
	LiteralValue1 interface{}
	LiteralValue11 interface{}
	MapType interface{}
	MethodDecl interface{}
	MethodDecl1 interface{}
	MethodExpr interface{}
	MethodName interface{}
	MethodSpec interface{}
	MethodSpec1 interface{}
	Operand interface{}
	PackageClause interface{}
	ParameterDecl interface{}
	ParameterDecl1 interface{}
	ParameterDecl2 interface{}
	ParameterList1 interface{}
	Parameters interface{}
	Parameters1 interface{}
	Parameters11 interface{}
	PointerType interface{}
	PostStmt interface{}
	PrimaryExpr1 interface{}
	PrimaryExpr2 interface{}
	PrimaryExpr21 interface{}
	RangeClause interface{}
	RangeClause1 interface{}
	Receiver interface{}
	Receiver1 interface{}
	Receiver2 interface{}
	ReceiverType interface{}
	RecvExpr interface{}
	RecvStmt interface{}
	RecvStmt11 interface{}
	Result interface{}
	ReturnStmt interface{}
	ReturnStmt1 interface{}
	SelectStmt interface{}
	SelectStmt1 interface{}
	Selector interface{}
	SendStmt interface{}
	ShortVarDecl interface{}
	Signature interface{}
	SimpleStmt interface{}
	Slice interface{}
	Slice1 interface{}
	Slice2 interface{}
	SliceType interface{}
	SourceFile interface{}
	SourceFile1 interface{}
	SourceFile2 interface{}
	Start interface{}
	Statement interface{}
	StatementList interface{}
	StatementList1 interface{}
	StructType interface{}
	StructType1 interface{}
	SwitchStmt interface{}
	Tag interface{}
	TopLevelDecl interface{}
	Type interface{}
	TypeAssertion interface{}
	TypeCaseClause interface{}
	TypeDecl interface{}
	TypeDecl1 interface{}
	TypeDecl11 interface{}
	TypeList interface{}
	TypeList1 interface{}
	TypeLit interface{}
	TypeName interface{}
	TypeSpec interface{}
	TypeSwitchCase interface{}
	TypeSwitchGuard interface{}
	TypeSwitchStmt interface{}
	TypeSwitchStmt2 interface{}
	UnaryExpr interface{}
	Value interface{}
	VarDecl interface{}
	VarDecl1 interface{}
	VarDecl11 interface{}
	VarSpec interface{}
	VarSpec1 interface{}
	VarSpec11 interface{}
)
	
func _dump() {
	s := fmt.Sprintf("%#v", _parserResult)
	s = strings.Replace(s, "%", "%%", -1)
	s = strings.Replace(s, "{", "{%i\n", -1)
	s = strings.Replace(s, "}", "%u\n}", -1)
	s = strings.Replace(s, ", ", ",\n", -1)
	var buf bytes.Buffer
	strutil.IndentFormatter(&buf, ". ").Format(s)
	buf.WriteString("\n")
	a := strings.Split(buf.String(), "\n")
	for _, v := range a {
		if strings.HasSuffix(v, "(nil)") || strings.HasSuffix(v, "(nil),") {
			continue
		}
	
		fmt.Println(v)
	}
}

// End of demo stuff
