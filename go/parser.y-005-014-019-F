%{

//TODO Put your favorite license here
		
// yacc source generated by ebnf2y[1]
// at 2013-09-03 14:16:25.340014673 +0200 CEST.
//
// CAUTION: If this file is a Go source file (*.go), it was generated
// automatically by '$ go tool yacc' from a *.y file - DO NOT EDIT in that case!
// 
//   [1]: http://github.com/cznic/ebnf2y

package main //TODO real package name

//TODO required only be the demo _dump function
import (
	"bytes"
	"fmt"
	"strings"

	"github.com/cznic/strutil"
)

%}

%left	OROR
%left	ANDAND
%left	'<' '>' EQ GE LE NE
%left	'+' '-' '^' '|'
%left	'%' '&' '*' '/' ANDNOT LSH RSH

%union {
	item interface{} //TODO insert real field(s)
}

%token	ADD_ASSIGN
%token	ANDAND
%token	ANDNOT
%token	AND_ASSIGN
%token	AND_NOT_ASSIGN
%token	CHANCOMM
%token	COMM
%token	COMMCHAN
%token	DDD
%token	DEC
%token	EQ
%token	FLOAT_LIT
%token	GE
%token	IDENTIFIER
%token	IDENTIFIER_LIST
%token	IDLIST_COLAS
%token	IMAGINARY_LIT
%token	INC
%token	INT_LIT
%token	LBR
%token	LE
%token	LSH
%token	MUL_ASSIGN
%token	NE
%token	OROR
%token	OR_ASSIGN
%token	QUO_ASSIGN
%token	REM_ASSIGN
%token	RSH
%token	RUNE_LIT
%token	SHL_ASSIGN
%token	SHR_ASSIGN
%token	STRING_LIT
%token	SUB_ASSIGN
%token	XOR_ASSIGN

%type	<item> 	/*TODO real type(s), if/where applicable */
	ADD_ASSIGN
	ANDAND
	ANDNOT
	AND_ASSIGN
	AND_NOT_ASSIGN
	CHANCOMM
	COMM
	COMMCHAN
	DDD
	DEC
	EQ
	FLOAT_LIT
	GE
	IDENTIFIER
	IDENTIFIER_LIST
	IDLIST_COLAS
	IMAGINARY_LIT
	INC
	INT_LIT
	LBR
	LE
	LSH
	MUL_ASSIGN
	NE
	OROR
	OR_ASSIGN
	QUO_ASSIGN
	REM_ASSIGN
	RSH
	RUNE_LIT
	SHL_ASSIGN
	SHR_ASSIGN
	STRING_LIT
	SUB_ASSIGN
	XOR_ASSIGN

%token BREAK
%token CASE
%token CHAN
%token CONST
%token CONTINUE
%token DEFAULT
%token DEFER
%token ELSE
%token FALLTHROUGH
%token FOR
%token FUNC
%token GO
%token GOTO
%token IF
%token IMPORT
%token INTERFACE
%token MAP
%token PACKAGE
%token RANGE
%token RETURN
%token SELECT
%token STRUCT
%token SWITCH
%token TYPE
%token VAR

%type	<item> 	/*TODO real type(s), if/where applicable */
	ArrayType
	BaseTypeName
	Block
	Condition
	ConstDecl111
	ConstSpec
	Declaration
	Element
	ElementList1
	ElementType
	ExprSwitchStmt2
	ExprSwitchStmt3
	Expression
	ExpressionList
	ExpressionList1
	FieldDecl
	FieldDecl1
	Function
	FunctionName
	IfStmt
	IfStmt2
	ImportDecl111
	ImportSpec
	InitStmt
	InterfaceType11
	Label
	LiteralValue
	MapType
	MethodName
	MethodSpec
	PackageName
	ParameterDecl
	ParameterList1
	Parameters
	PostStmt
	PrimaryExpr
	QualifiedIdent
	Receiver
	ReceiverType
	RecvExpr
	SelectStmt1
	SendStmt
	Signature
	SimpleStmt
	Slice2
	SliceType
	SourceFile
	SourceFile1
	SourceFile2
	Start
	Statement
	StatementList
	StatementList1
	StructType
	StructType11
	Type
	TypeDecl111
	TypeList1
	TypeLitNoPtr
	TypeName
	TypeSpec
	TypeSwitchStmt2
	UnaryExpr
	VarDecl111
	VarSpec

/*TODO %left, %right, ... declarations */

%start Start

%%

ArrayType:
	'[' Expression ']' ElementType
	{
		$$ = []ArrayType{"[", $2, "]", $4} //TODO 1
	}

BaseTypeName:
	IDENTIFIER
	{
		$$ = $1 //TODO 2
	}

Block:
	'{' StatementList '}'
	{
		$$ = []Block{"{", $2, "}"} //TODO 3
	}

Condition:
	Expression
	{
		$$ = $1 //TODO 4
	}

ConstDecl111:
	/* EMPTY */
	{
		$$ = []ConstDecl111(nil) //TODO 5
	}
|	ConstDecl111 ';' ConstSpec
	{
		$$ = append($1.([]ConstDecl111), ";", $3) //TODO 6
	}

ConstSpec:
	IDENTIFIER_LIST
	{
		$$ = $1 //TODO 7
	}
|	IDENTIFIER_LIST '=' ExpressionList
	{
		$$ = []ConstSpec{$1, "=", $3} //TODO 8
	}
|	IDENTIFIER_LIST Type '=' ExpressionList
	{
		$$ = []ConstSpec{$1, $2, "=", $4} //TODO 9
	}

Declaration:
	CONST ConstSpec
	{
		$$ = []Declaration{"const", $2} //TODO 10
	}
|	CONST '(' ')'
	{
		$$ = []Declaration{"const", "(", ")"} //TODO 11
	}
|	CONST '(' ConstSpec ConstDecl111 ')'
	{
		$$ = []Declaration{"const", "(", $3, $4, ")"} //TODO 12
	}
|	TYPE TypeSpec
	{
		$$ = []Declaration{"type", $2} //TODO 13
	}
|	TYPE '(' ')'
	{
		$$ = []Declaration{"type", "(", ")"} //TODO 14
	}
|	TYPE '(' TypeSpec TypeDecl111 ')'
	{
		$$ = []Declaration{"type", "(", $3, $4, ")"} //TODO 15
	}
|	VAR VarSpec
	{
		$$ = []Declaration{"var", $2} //TODO 16
	}
|	VAR '(' ')'
	{
		$$ = []Declaration{"var", "(", ")"} //TODO 17
	}
|	VAR '(' VarSpec VarDecl111 ')'
	{
		$$ = []Declaration{"var", "(", $3, $4, ")"} //TODO 18
	}

Element:
	Expression
	{
		$$ = $1 //TODO 19
	}
|	IDENTIFIER ':' Expression
	{
		$$ = []Element{$1, ":", $3} //TODO 20
	}
|	Expression ':' Expression
	{
		$$ = []Element{$1, ":", $3} //TODO 21
	}
|	LiteralValue
	{
		$$ = $1 //TODO 22
	}
|	IDENTIFIER ':' LiteralValue
	{
		$$ = []Element{$1, ":", $3} //TODO 23
	}
|	Expression ':' LiteralValue
	{
		$$ = []Element{$1, ":", $3} //TODO 24
	}

ElementList1:
	/* EMPTY */
	{
		$$ = []ElementList1(nil) //TODO 25
	}
|	ElementList1 ',' Element
	{
		$$ = append($1.([]ElementList1), ",", $3) //TODO 26
	}

ElementType:
	Type
	{
		$$ = $1 //TODO 27
	}

ExprSwitchStmt2:
	/* EMPTY */
	{
		$$ = nil //TODO 28
	}
|	Expression
	{
		$$ = $1 //TODO 29
	}

ExprSwitchStmt3:
	/* EMPTY */
	{
		$$ = []ExprSwitchStmt3(nil) //TODO 30
	}
|	ExprSwitchStmt3 CASE ExpressionList ':' StatementList
	{
		$$ = append($1.([]ExprSwitchStmt3), "case", $3, ":", $5) //TODO 31
	}
|	ExprSwitchStmt3 DEFAULT ':' StatementList
	{
		$$ = append($1.([]ExprSwitchStmt3), "default", ":", $4) //TODO 32
	}

Expression:
	UnaryExpr
	{
		$$ = $1 //TODO 33
	}
|	Expression OROR Expression
	{
		$$ = []Expression{$1, $2, $3} //TODO 34
	}
|	Expression ANDAND Expression
	{
		$$ = []Expression{$1, $2, $3} //TODO 35
	}
|	Expression EQ Expression
	{
		$$ = []Expression{$1, $2, $3} //TODO 36
	}
|	Expression NE Expression
	{
		$$ = []Expression{$1, $2, $3} //TODO 37
	}
|	Expression '<' Expression
	{
		$$ = []Expression{$1, "<", $3} //TODO 38
	}
|	Expression LE Expression
	{
		$$ = []Expression{$1, $2, $3} //TODO 39
	}
|	Expression '>' Expression
	{
		$$ = []Expression{$1, ">", $3} //TODO 40
	}
|	Expression GE Expression
	{
		$$ = []Expression{$1, $2, $3} //TODO 41
	}
|	Expression '+' Expression
	{
		$$ = []Expression{$1, "+", $3} //TODO 42
	}
|	Expression '-' Expression
	{
		$$ = []Expression{$1, "-", $3} //TODO 43
	}
|	Expression '|' Expression
	{
		$$ = []Expression{$1, "|", $3} //TODO 44
	}
|	Expression '^' Expression
	{
		$$ = []Expression{$1, "^", $3} //TODO 45
	}
|	Expression '*' Expression
	{
		$$ = []Expression{$1, "*", $3} //TODO 46
	}
|	Expression '/' Expression
	{
		$$ = []Expression{$1, "/", $3} //TODO 47
	}
|	Expression '%' Expression
	{
		$$ = []Expression{$1, "%", $3} //TODO 48
	}
|	Expression LSH Expression
	{
		$$ = []Expression{$1, $2, $3} //TODO 49
	}
|	Expression RSH Expression
	{
		$$ = []Expression{$1, $2, $3} //TODO 50
	}
|	Expression '&' Expression
	{
		$$ = []Expression{$1, "&", $3} //TODO 51
	}
|	Expression ANDNOT Expression
	{
		$$ = []Expression{$1, $2, $3} //TODO 52
	}

ExpressionList:
	Expression ExpressionList1
	{
		$$ = []ExpressionList{$1, $2} //TODO 53
	}

ExpressionList1:
	/* EMPTY */
	{
		$$ = []ExpressionList1(nil) //TODO 54
	}
|	ExpressionList1 ',' Expression
	{
		$$ = append($1.([]ExpressionList1), ",", $3) //TODO 55
	}

FieldDecl:
	FieldDecl1
	{
		$$ = $1 //TODO 56
	}
|	FieldDecl1 STRING_LIT
	{
		$$ = []FieldDecl{$1, $2} //TODO 57
	}

FieldDecl1:
	IDENTIFIER_LIST Type
	{
		$$ = []FieldDecl1{$1, $2} //TODO 58
	}
|	TypeName
	{
		$$ = $1 //TODO 59
	}
|	'*' TypeName
	{
		$$ = []FieldDecl1{"*", $2} //TODO 60
	}

Function:
	Signature Block
	{
		$$ = []Function{$1, $2} //TODO 61
	}

FunctionName:
	IDENTIFIER
	{
		$$ = $1 //TODO 62
	}

IfStmt:
	IF Expression LBR StatementList '}' IfStmt2
	{
		$$ = []IfStmt{"if", $2, $3, $4, "}", $6} //TODO 63
	}
|	IF SimpleStmt ';' Expression LBR StatementList '}' IfStmt2
	{
		$$ = []IfStmt{"if", $2, ";", $4, $5, $6, "}", $8} //TODO 64
	}

IfStmt2:
	/* EMPTY */
	{
		$$ = nil //TODO 65
	}
|	ELSE IfStmt
	{
		$$ = []IfStmt2{"else", $2} //TODO 66
	}
|	ELSE Block
	{
		$$ = []IfStmt2{"else", $2} //TODO 67
	}

ImportDecl111:
	/* EMPTY */
	{
		$$ = []ImportDecl111(nil) //TODO 68
	}
|	ImportDecl111 ';' ImportSpec
	{
		$$ = append($1.([]ImportDecl111), ";", $3) //TODO 69
	}

ImportSpec:
	STRING_LIT
	{
		$$ = $1 //TODO 70
	}
|	'.' STRING_LIT
	{
		$$ = []ImportSpec{".", $2} //TODO 71
	}
|	PackageName STRING_LIT
	{
		$$ = []ImportSpec{$1, $2} //TODO 72
	}

InitStmt:
	SimpleStmt
	{
		$$ = $1 //TODO 73
	}

InterfaceType11:
	/* EMPTY */
	{
		$$ = []InterfaceType11(nil) //TODO 74
	}
|	InterfaceType11 ';' MethodSpec
	{
		$$ = append($1.([]InterfaceType11), ";", $3) //TODO 75
	}

Label:
	IDENTIFIER
	{
		$$ = $1 //TODO 76
	}

LiteralValue:
	'{' '}'
	{
		$$ = []LiteralValue{"{", "}"} //TODO 77
	}
|	'{' Element ElementList1 '}'
	{
		$$ = []LiteralValue{"{", $2, $3, "}"} //TODO 78
	}

MapType:
	MAP '[' Type ']' ElementType
	{
		$$ = []MapType{"map", "[", $3, "]", $5} //TODO 79
	}

MethodName:
	IDENTIFIER
	{
		$$ = $1 //TODO 80
	}

MethodSpec:
	MethodName Signature
	{
		$$ = []MethodSpec{$1, $2} //TODO 81
	}
|	TypeName
	{
		$$ = $1 //TODO 82
	}

PackageName:
	IDENTIFIER
	{
		$$ = $1 //TODO 83
	}

ParameterDecl:
	Type
	{
		$$ = $1 //TODO 84
	}
|	DDD Type
	{
		$$ = []ParameterDecl{$1, $2} //TODO 85
	}
|	IDENTIFIER_LIST Type
	{
		$$ = []ParameterDecl{$1, $2} //TODO 86
	}
|	IDENTIFIER_LIST DDD Type
	{
		$$ = []ParameterDecl{$1, $2, $3} //TODO 87
	}

ParameterList1:
	/* EMPTY */
	{
		$$ = []ParameterList1(nil) //TODO 88
	}
|	ParameterList1 ',' ParameterDecl
	{
		$$ = append($1.([]ParameterList1), ",", $3) //TODO 89
	}

Parameters:
	'(' ')'
	{
		$$ = []Parameters{"(", ")"} //TODO 90
	}
|	'(' ParameterDecl ParameterList1 ')'
	{
		$$ = []Parameters{"(", $2, $3, ")"} //TODO 91
	}

PostStmt:
	SimpleStmt
	{
		$$ = $1 //TODO 92
	}

PrimaryExpr:
	INT_LIT
	{
		$$ = $1 //TODO 93
	}
|	FLOAT_LIT
	{
		$$ = $1 //TODO 94
	}
|	IMAGINARY_LIT
	{
		$$ = $1 //TODO 95
	}
|	RUNE_LIT
	{
		$$ = $1 //TODO 96
	}
|	STRING_LIT
	{
		$$ = $1 //TODO 97
	}
|	StructType LiteralValue
	{
		$$ = []PrimaryExpr{$1, $2} //TODO 98
	}
|	ArrayType LiteralValue
	{
		$$ = []PrimaryExpr{$1, $2} //TODO 99
	}
|	'[' DDD ']' ElementType LiteralValue
	{
		$$ = []PrimaryExpr{"[", $2, "]", $4, $5} //TODO 100
	}
|	SliceType LiteralValue
	{
		$$ = []PrimaryExpr{$1, $2} //TODO 101
	}
|	MapType LiteralValue
	{
		$$ = []PrimaryExpr{$1, $2} //TODO 102
	}
|	TypeName LiteralValue
	{
		$$ = []PrimaryExpr{$1, $2} //TODO 103
	}
|	FUNC Function
	{
		$$ = []PrimaryExpr{"func", $2} //TODO 104
	}
|	IDENTIFIER
	{
		$$ = $1 //TODO 105
	}
|	QualifiedIdent
	{
		$$ = $1 //TODO 106
	}
|	ReceiverType '.' MethodName
	{
		$$ = []PrimaryExpr{$1, ".", $3} //TODO 107
	}
|	'(' Expression ')'
	{
		$$ = []PrimaryExpr{"(", $2, ")"} //TODO 108
	}
|	Type '(' Expression ')'
	{
		$$ = []PrimaryExpr{$1, "(", $3, ")"} //TODO 109
	}
|	PrimaryExpr '.' IDENTIFIER
	{
		$$ = []PrimaryExpr{$1, ".", $3} //TODO 110
	}
|	PrimaryExpr '[' Expression ']'
	{
		$$ = []PrimaryExpr{$1, "[", $3, "]"} //TODO 111
	}
|	PrimaryExpr '[' ':' Slice2 ']'
	{
		$$ = []PrimaryExpr{$1, "[", ":", $4, "]"} //TODO 112
	}
|	PrimaryExpr '[' Expression ':' Slice2 ']'
	{
		$$ = []PrimaryExpr{$1, "[", $3, ":", $5, "]"} //TODO 113
	}
|	PrimaryExpr '.' '(' Type ')'
	{
		$$ = []PrimaryExpr{$1, ".", "(", $4, ")"} //TODO 114
	}
|	PrimaryExpr '(' ')'
	{
		$$ = []PrimaryExpr{$1, "(", ")"} //TODO 115
	}
|	PrimaryExpr '(' ExpressionList ')'
	{
		$$ = []PrimaryExpr{$1, "(", $3, ")"} //TODO 116
	}
|	PrimaryExpr '(' TypeLitNoPtr ',' ExpressionList ')'
	{
		$$ = []PrimaryExpr{$1, "(", $3, ",", $5, ")"} //TODO 117
	}
|	PrimaryExpr '(' ExpressionList DDD ')'
	{
		$$ = []PrimaryExpr{$1, "(", $3, $4, ")"} //TODO 118
	}
|	PrimaryExpr '(' TypeLitNoPtr ',' ExpressionList DDD ')'
	{
		$$ = []PrimaryExpr{$1, "(", $3, ",", $5, $6, ")"} //TODO 119
	}

QualifiedIdent:
	PackageName '.' IDENTIFIER
	{
		$$ = []QualifiedIdent{$1, ".", $3} //TODO 120
	}

Receiver:
	'(' BaseTypeName ')'
	{
		$$ = []Receiver{"(", $2, ")"} //TODO 121
	}
|	'(' '*' BaseTypeName ')'
	{
		$$ = []Receiver{"(", "*", $3, ")"} //TODO 122
	}
|	'(' IDENTIFIER BaseTypeName ')'
	{
		$$ = []Receiver{"(", $2, $3, ")"} //TODO 123
	}
|	'(' IDENTIFIER '*' BaseTypeName ')'
	{
		$$ = []Receiver{"(", $2, "*", $4, ")"} //TODO 124
	}

ReceiverType:
	TypeName
	{
		$$ = $1 //TODO 125
	}
|	'(' '*' TypeName ')'
	{
		$$ = []ReceiverType{"(", "*", $3, ")"} //TODO 126
	}
|	'(' ReceiverType ')'
	{
		$$ = []ReceiverType{"(", $2, ")"} //TODO 127
	}

RecvExpr:
	Expression
	{
		$$ = $1 //TODO 128
	}

SelectStmt1:
	/* EMPTY */
	{
		$$ = []SelectStmt1(nil) //TODO 129
	}
|	SelectStmt1 CASE SendStmt ':' StatementList
	{
		$$ = append($1.([]SelectStmt1), "case", $3, ":", $5) //TODO 130
	}
|	SelectStmt1 CASE RecvExpr ':' StatementList
	{
		$$ = append($1.([]SelectStmt1), "case", $3, ":", $5) //TODO 131
	}
|	SelectStmt1 CASE ExpressionList '=' RecvExpr ':' StatementList
	{
		$$ = append($1.([]SelectStmt1), "case", $3, "=", $5, ":", $7) //TODO 132
	}
|	SelectStmt1 CASE IDLIST_COLAS RecvExpr ':' StatementList
	{
		$$ = append($1.([]SelectStmt1), "case", $3, $4, ":", $6) //TODO 133
	}
|	SelectStmt1 DEFAULT ':' StatementList
	{
		$$ = append($1.([]SelectStmt1), "default", ":", $4) //TODO 134
	}

SendStmt:
	Expression COMM Expression
	{
		$$ = []SendStmt{$1, $2, $3} //TODO 135
	}

Signature:
	Parameters
	{
		$$ = $1 //TODO 136
	}
|	Parameters Parameters
	{
		$$ = []Signature{$1, $2} //TODO 137
	}
|	Parameters Type
	{
		$$ = []Signature{$1, $2} //TODO 138
	}

SimpleStmt:
	/* EMPTY */
	{
		$$ = nil //TODO 139
	}
|	Expression
	{
		$$ = $1 //TODO 140
	}
|	SendStmt
	{
		$$ = $1 //TODO 141
	}
|	Expression INC
	{
		$$ = []SimpleStmt{$1, $2} //TODO 142
	}
|	Expression DEC
	{
		$$ = []SimpleStmt{$1, $2} //TODO 143
	}
|	ExpressionList '=' ExpressionList
	{
		$$ = []SimpleStmt{$1, "=", $3} //TODO 144
	}
|	ExpressionList ADD_ASSIGN ExpressionList
	{
		$$ = []SimpleStmt{$1, $2, $3} //TODO 145
	}
|	ExpressionList AND_ASSIGN ExpressionList
	{
		$$ = []SimpleStmt{$1, $2, $3} //TODO 146
	}
|	ExpressionList MUL_ASSIGN ExpressionList
	{
		$$ = []SimpleStmt{$1, $2, $3} //TODO 147
	}
|	ExpressionList OR_ASSIGN ExpressionList
	{
		$$ = []SimpleStmt{$1, $2, $3} //TODO 148
	}
|	ExpressionList QUO_ASSIGN ExpressionList
	{
		$$ = []SimpleStmt{$1, $2, $3} //TODO 149
	}
|	ExpressionList REM_ASSIGN ExpressionList
	{
		$$ = []SimpleStmt{$1, $2, $3} //TODO 150
	}
|	ExpressionList SHL_ASSIGN ExpressionList
	{
		$$ = []SimpleStmt{$1, $2, $3} //TODO 151
	}
|	ExpressionList SHR_ASSIGN ExpressionList
	{
		$$ = []SimpleStmt{$1, $2, $3} //TODO 152
	}
|	ExpressionList SUB_ASSIGN ExpressionList
	{
		$$ = []SimpleStmt{$1, $2, $3} //TODO 153
	}
|	ExpressionList XOR_ASSIGN ExpressionList
	{
		$$ = []SimpleStmt{$1, $2, $3} //TODO 154
	}
|	ExpressionList AND_NOT_ASSIGN ExpressionList
	{
		$$ = []SimpleStmt{$1, $2, $3} //TODO 155
	}
|	IDLIST_COLAS ExpressionList
	{
		$$ = []SimpleStmt{$1, $2} //TODO 156
	}

Slice2:
	/* EMPTY */
	{
		$$ = nil //TODO 157
	}
|	Expression
	{
		$$ = $1 //TODO 158
	}

SliceType:
	'[' ']' ElementType
	{
		$$ = []SliceType{"[", "]", $3} //TODO 159
	}

SourceFile:
	PACKAGE PackageName ';' SourceFile1 SourceFile2
	{
		$$ = []SourceFile{"package", $2, ";", $4, $5} //TODO 160
	}

SourceFile1:
	/* EMPTY */
	{
		$$ = []SourceFile1(nil) //TODO 161
	}
|	SourceFile1 IMPORT ImportSpec ';'
	{
		$$ = append($1.([]SourceFile1), "import", $3, ";") //TODO 162
	}
|	SourceFile1 IMPORT '(' ')' ';'
	{
		$$ = append($1.([]SourceFile1), "import", "(", ")", ";") //TODO 163
	}
|	SourceFile1 IMPORT '(' ImportSpec ImportDecl111 ')' ';'
	{
		$$ = append($1.([]SourceFile1), "import", "(", $4, $5, ")", ";") //TODO 164
	}

SourceFile2:
	/* EMPTY */
	{
		$$ = []SourceFile2(nil) //TODO 165
	}
|	SourceFile2 Declaration ';'
	{
		$$ = append($1.([]SourceFile2), $2, ";") //TODO 166
	}
|	SourceFile2 FUNC FunctionName Function ';'
	{
		$$ = append($1.([]SourceFile2), "func", $3, $4, ";") //TODO 167
	}
|	SourceFile2 FUNC FunctionName Signature ';'
	{
		$$ = append($1.([]SourceFile2), "func", $3, $4, ";") //TODO 168
	}
|	SourceFile2 FUNC Receiver MethodName Function ';'
	{
		$$ = append($1.([]SourceFile2), "func", $3, $4, $5, ";") //TODO 169
	}
|	SourceFile2 FUNC Receiver MethodName Signature ';'
	{
		$$ = append($1.([]SourceFile2), "func", $3, $4, $5, ";") //TODO 170
	}

Start:
	SourceFile
	{
		_parserResult = $1 //TODO 171
	}

Statement:
	Declaration
	{
		$$ = $1 //TODO 172
	}
|	Label ':' Statement
	{
		$$ = []Statement{$1, ":", $3} //TODO 173
	}
|	SimpleStmt
	{
		$$ = $1 //TODO 174
	}
|	GO Expression
	{
		$$ = []Statement{"go", $2} //TODO 175
	}
|	RETURN
	{
		$$ = "return" //TODO 176
	}
|	RETURN ExpressionList
	{
		$$ = []Statement{"return", $2} //TODO 177
	}
|	BREAK
	{
		$$ = "break" //TODO 178
	}
|	BREAK Label
	{
		$$ = []Statement{"break", $2} //TODO 179
	}
|	CONTINUE
	{
		$$ = "continue" //TODO 180
	}
|	CONTINUE Label
	{
		$$ = []Statement{"continue", $2} //TODO 181
	}
|	GOTO Label
	{
		$$ = []Statement{"goto", $2} //TODO 182
	}
|	FALLTHROUGH
	{
		$$ = "fallthrough" //TODO 183
	}
|	Block
	{
		$$ = $1 //TODO 184
	}
|	IfStmt
	{
		$$ = $1 //TODO 185
	}
|	SWITCH ExprSwitchStmt2 LBR ExprSwitchStmt3 '}'
	{
		$$ = []Statement{"switch", $2, $3, $4, "}"} //TODO 186
	}
|	SWITCH SimpleStmt ';' ExprSwitchStmt2 LBR ExprSwitchStmt3 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, $5, $6, "}"} //TODO 187
	}
|	SWITCH PrimaryExpr '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ".", "(", "type", ")", "{", $8, "}"} //TODO 188
	}
|	SWITCH SimpleStmt ';' PrimaryExpr '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, ".", "(", "type", ")", "{", $10, "}"} //TODO 189
	}
|	SWITCH IDLIST_COLAS PrimaryExpr '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, $3, ".", "(", "type", ")", "{", $9, "}"} //TODO 190
	}
|	SWITCH SimpleStmt ';' IDLIST_COLAS PrimaryExpr '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, $5, ".", "(", "type", ")", "{", $11, "}"} //TODO 191
	}
|	SELECT '{' SelectStmt1 '}'
	{
		$$ = []Statement{"select", "{", $3, "}"} //TODO 192
	}
|	FOR LBR StatementList '}'
	{
		$$ = []Statement{"for", $2, $3, "}"} //TODO 193
	}
|	FOR Condition LBR StatementList '}'
	{
		$$ = []Statement{"for", $2, $3, $4, "}"} //TODO 194
	}
|	FOR InitStmt ';' ';' PostStmt LBR StatementList '}'
	{
		$$ = []Statement{"for", $2, ";", ";", $5, $6, $7, "}"} //TODO 195
	}
|	FOR InitStmt ';' Condition ';' PostStmt LBR StatementList '}'
	{
		$$ = []Statement{"for", $2, ";", $4, ";", $6, $7, $8, "}"} //TODO 196
	}
|	FOR ExpressionList '=' RANGE Expression LBR StatementList '}'
	{
		$$ = []Statement{"for", $2, "=", "range", $5, $6, $7, "}"} //TODO 197
	}
|	FOR IDLIST_COLAS RANGE Expression LBR StatementList '}'
	{
		$$ = []Statement{"for", $2, "range", $4, $5, $6, "}"} //TODO 198
	}
|	DEFER Expression
	{
		$$ = []Statement{"defer", $2} //TODO 199
	}

StatementList:
	Statement StatementList1
	{
		$$ = []StatementList{$1, $2} //TODO 200
	}

StatementList1:
	/* EMPTY */
	{
		$$ = []StatementList1(nil) //TODO 201
	}
|	StatementList1 ';' Statement
	{
		$$ = append($1.([]StatementList1), ";", $3) //TODO 202
	}

StructType:
	STRUCT '{' '}'
	{
		$$ = []StructType{"struct", "{", "}"} //TODO 203
	}
|	STRUCT '{' FieldDecl StructType11 '}'
	{
		$$ = []StructType{"struct", "{", $3, $4, "}"} //TODO 204
	}

StructType11:
	/* EMPTY */
	{
		$$ = []StructType11(nil) //TODO 205
	}
|	StructType11 ';' FieldDecl
	{
		$$ = append($1.([]StructType11), ";", $3) //TODO 206
	}

Type:
	TypeName
	{
		$$ = $1 //TODO 207
	}
|	TypeLitNoPtr
	{
		$$ = $1 //TODO 208
	}
|	'*' Type
	{
		$$ = []Type{"*", $2} //TODO 209
	}
|	'(' Type ')'
	{
		$$ = []Type{"(", $2, ")"} //TODO 210
	}

TypeDecl111:
	/* EMPTY */
	{
		$$ = []TypeDecl111(nil) //TODO 211
	}
|	TypeDecl111 ';' TypeSpec
	{
		$$ = append($1.([]TypeDecl111), ";", $3) //TODO 212
	}

TypeList1:
	/* EMPTY */
	{
		$$ = []TypeList1(nil) //TODO 213
	}
|	TypeList1 ',' Type
	{
		$$ = append($1.([]TypeList1), ",", $3) //TODO 214
	}

TypeLitNoPtr:
	ArrayType
	{
		$$ = $1 //TODO 215
	}
|	StructType
	{
		$$ = $1 //TODO 216
	}
|	FUNC Signature
	{
		$$ = []TypeLitNoPtr{"func", $2} //TODO 217
	}
|	INTERFACE '{' '}'
	{
		$$ = []TypeLitNoPtr{"interface", "{", "}"} //TODO 218
	}
|	INTERFACE '{' MethodSpec InterfaceType11 '}'
	{
		$$ = []TypeLitNoPtr{"interface", "{", $3, $4, "}"} //TODO 219
	}
|	SliceType
	{
		$$ = $1 //TODO 220
	}
|	MapType
	{
		$$ = $1 //TODO 221
	}
|	CHAN ElementType
	{
		$$ = []TypeLitNoPtr{"chan", $2} //TODO 222
	}
|	CHANCOMM ElementType
	{
		$$ = []TypeLitNoPtr{$1, $2} //TODO 223
	}
|	COMMCHAN ElementType
	{
		$$ = []TypeLitNoPtr{$1, $2} //TODO 224
	}

TypeName:
	IDENTIFIER
	{
		$$ = $1 //TODO 225
	}
|	QualifiedIdent
	{
		$$ = $1 //TODO 226
	}

TypeSpec:
	IDENTIFIER Type
	{
		$$ = []TypeSpec{$1, $2} //TODO 227
	}

TypeSwitchStmt2:
	/* EMPTY */
	{
		$$ = []TypeSwitchStmt2(nil) //TODO 228
	}
|	TypeSwitchStmt2 CASE Type TypeList1 ':' StatementList
	{
		$$ = append($1.([]TypeSwitchStmt2), "case", $3, $4, ":", $6) //TODO 229
	}
|	TypeSwitchStmt2 DEFAULT ':' StatementList
	{
		$$ = append($1.([]TypeSwitchStmt2), "default", ":", $4) //TODO 230
	}

UnaryExpr:
	PrimaryExpr
	{
		$$ = $1 //TODO 231
	}
|	'+' UnaryExpr
	{
		$$ = []UnaryExpr{"+", $2} //TODO 232
	}
|	'-' UnaryExpr
	{
		$$ = []UnaryExpr{"-", $2} //TODO 233
	}
|	'!' UnaryExpr
	{
		$$ = []UnaryExpr{"!", $2} //TODO 234
	}
|	'^' UnaryExpr
	{
		$$ = []UnaryExpr{"^", $2} //TODO 235
	}
|	'*' UnaryExpr
	{
		$$ = []UnaryExpr{"*", $2} //TODO 236
	}
|	'&' UnaryExpr
	{
		$$ = []UnaryExpr{"&", $2} //TODO 237
	}
|	COMM UnaryExpr
	{
		$$ = []UnaryExpr{$1, $2} //TODO 238
	}

VarDecl111:
	/* EMPTY */
	{
		$$ = []VarDecl111(nil) //TODO 239
	}
|	VarDecl111 ';' VarSpec
	{
		$$ = append($1.([]VarDecl111), ";", $3) //TODO 240
	}

VarSpec:
	IDENTIFIER_LIST Type
	{
		$$ = []VarSpec{$1, $2} //TODO 241
	}
|	IDENTIFIER_LIST Type '=' ExpressionList
	{
		$$ = []VarSpec{$1, $2, "=", $4} //TODO 242
	}
|	IDENTIFIER_LIST '=' ExpressionList
	{
		$$ = []VarSpec{$1, "=", $3} //TODO 243
	}

%%

//TODO remove demo stuff below

var _parserResult interface{}

type (
	ArrayType interface{}
	BaseTypeName interface{}
	Block interface{}
	Condition interface{}
	ConstDecl111 interface{}
	ConstSpec interface{}
	Declaration interface{}
	Element interface{}
	ElementList1 interface{}
	ElementType interface{}
	ExprSwitchStmt2 interface{}
	ExprSwitchStmt3 interface{}
	Expression interface{}
	ExpressionList interface{}
	ExpressionList1 interface{}
	FieldDecl interface{}
	FieldDecl1 interface{}
	Function interface{}
	FunctionName interface{}
	IfStmt interface{}
	IfStmt2 interface{}
	ImportDecl111 interface{}
	ImportSpec interface{}
	InitStmt interface{}
	InterfaceType11 interface{}
	Label interface{}
	LiteralValue interface{}
	MapType interface{}
	MethodName interface{}
	MethodSpec interface{}
	PackageName interface{}
	ParameterDecl interface{}
	ParameterList1 interface{}
	Parameters interface{}
	PostStmt interface{}
	PrimaryExpr interface{}
	QualifiedIdent interface{}
	Receiver interface{}
	ReceiverType interface{}
	RecvExpr interface{}
	SelectStmt1 interface{}
	SendStmt interface{}
	Signature interface{}
	SimpleStmt interface{}
	Slice2 interface{}
	SliceType interface{}
	SourceFile interface{}
	SourceFile1 interface{}
	SourceFile2 interface{}
	Start interface{}
	Statement interface{}
	StatementList interface{}
	StatementList1 interface{}
	StructType interface{}
	StructType11 interface{}
	Type interface{}
	TypeDecl111 interface{}
	TypeList1 interface{}
	TypeLitNoPtr interface{}
	TypeName interface{}
	TypeSpec interface{}
	TypeSwitchStmt2 interface{}
	UnaryExpr interface{}
	VarDecl111 interface{}
	VarSpec interface{}
)
	
func _dump() {
	s := fmt.Sprintf("%#v", _parserResult)
	s = strings.Replace(s, "%", "%%", -1)
	s = strings.Replace(s, "{", "{%i\n", -1)
	s = strings.Replace(s, "}", "%u\n}", -1)
	s = strings.Replace(s, ", ", ",\n", -1)
	var buf bytes.Buffer
	strutil.IndentFormatter(&buf, ". ").Format(s)
	buf.WriteString("\n")
	a := strings.Split(buf.String(), "\n")
	for _, v := range a {
		if strings.HasSuffix(v, "(nil)") || strings.HasSuffix(v, "(nil),") {
			continue
		}
	
		fmt.Println(v)
	}
}

// End of demo stuff
