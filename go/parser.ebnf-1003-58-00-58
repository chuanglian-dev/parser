/*

ebnf2y -M -wr $N -o parser-$N.y parser.ebnf
-------------------------------------------
N: 1	34	28	62	
N: 2	46	16	62
N: 4	46	16	62

...............................................................................
Binary_op, Unary_op
67+16=83
...............................................................................
Split identifier
59+2=61
...............................................................................
ReceiverType
62+0=62
...............................................................................
-EmptyStmt; m SimpleStmt, LabeledStmt, StatementList
58+0=58

*/

// ============================================================================

andand			= "&&" .
andnot			= "&^" .
colas			= ":=" .
comm			= "<-".
ddd			= "..." .
dec			= "--" .
eq			= "==" .
ge			= ">=" .
inc			= "++" .
le			= "<=" .
lsh			= "<<" .
ne			= "!=" .
oror			= "||" .
rsh			= ">>" .

Binary_op = oror
	| andand
	| eq
	| ne
	| "<"
	| le
	| ">"
	| ge
	| "+"
	| "-"
	| "|"
	| "^"
	| "*"
	| "/"
	| "%"
	| lsh
	| rsh
	| "&"
	| andnot .

Unary_op = "+"
	| "-"
	| "!"
	| "^"
	| "*"
	| "&"
	| comm .

// ............................................................................

built_in_name	= .	// new, len, cap, ...
pack_name	= .	// known to be a package qualifier
type_name	= . 	// known to be a type name
name		= .	// none of the above

// New name being declared or context is "any name" (eg. FieldName)
Dclname 	 = built_in_name | pack_name | type_name | name . 

// ----------------------------------------------------------------------------

add_op = "+"
	| "-"
	| "|"
	| "^" .
assign_op = [ add_op | mul_op ] "=" .
big_u_value = "\\" "U" hex_digit hex_digit hex_digit hex_digit hex_digit hex_digit hex_digit hex_digit .
byte_value = octal_byte_value | hex_byte_value .
decimal_digit = "0" … "9" .
decimal_lit = ( "1" … "9" ) { decimal_digit } .
decimals = decimal_digit { decimal_digit } .
escaped_char = "\\" (
		  "a"
		| "b"
		| "f"
		| "n"
		| "r"
		| "t"
		| "v"
		| "\\"
		| "'"
		| "\""
	  ) .
exponent = ( "e" | "E" ) [ "+" | "-" ] decimals .
float_lit = decimals "." [ decimals ] [ exponent ]
	| decimals exponent
	| "." decimals [ exponent ] .
hex_byte_value = "\\" "x" hex_digit hex_digit .
hex_digit = "0" … "9"
	| "A" … "F"
	| "a" … "f" .
hex_lit = "0" ( "x" | "X" ) hex_digit { hex_digit } .

//identifier = letter { letter | unicode_digit } .

imaginary_lit = ( decimals | float_lit ) "i" .
int_lit = decimal_lit
	| octal_lit
	| hex_lit .
interpreted_string_lit = "\"" { unicode_value | byte_value } "\"" .

//letter = unicode_letter | "_" .

little_u_value = "\\" "u" hex_digit hex_digit hex_digit hex_digit .
mul_op = "*"
	| "/"
	| "%"
	| lsh
	| rsh
	| "&"
	| andnot .
newline = .
octal_byte_value = "\\" octal_digit octal_digit octal_digit .
octal_digit = "0" … "7" .
octal_lit = "0" { octal_digit } .
raw_string_lit = "`" { unicode_char | newline } "`" .
rune_lit = "'" ( unicode_value | byte_value ) "'" .
string_lit = raw_string_lit | interpreted_string_lit .
unicode_char = .

//unicode_digit = .
//unicode_letter = .

unicode_value = unicode_char
	| little_u_value
	| big_u_value
	| escaped_char .

AnonymousField = [ "*" ] TypeName .
ArgumentList = ExpressionList [ ddd ] .
ArrayLength = Expression .
ArrayType = "[" ArrayLength "]" ElementType .
Assignment = ExpressionList assign_op ExpressionList .
BaseType = Type .

//BaseTypeName = identifier .
BaseTypeName = type_name .

BasicLit = int_lit
	| float_lit
	| imaginary_lit
	| rune_lit
	| string_lit .
Block = "{" StatementList "}" .
BreakStmt = "break" [ Label ] .
BuiltinArgs = Type [ "," ArgumentList ]
	| ArgumentList .

//BuiltinCall = identifier "(" [ BuiltinArgs [ "," ] ] ")" .
BuiltinCall = built_in_name "(" [ BuiltinArgs [ "," ] ] ")" .

Call = "(" [ ArgumentList [ "," ] ] ")" .
Channel = Expression .
ChannelType = (
		  "chan" [ comm ]
		| comm "chan"
	  ) ElementType .
CommCase = "case" ( SendStmt | RecvStmt )
	| "default" .
CommClause = CommCase ":" StatementList .
CompositeLit = LiteralType LiteralValue .
Condition = Expression .
ConstDecl = "const" (
		  ConstSpec
		| "(" { ConstSpec ";" } ")"
	  ) .
ConstSpec = IdentifierList [
		 [ Type ] "=" ExpressionList
	  ] .
ContinueStmt = "continue" [ Label ] .
Conversion = Type "(" Expression [ "," ] ")" .
Declaration = ConstDecl
	| TypeDecl
	| VarDecl .
DeferStmt = "defer" Expression .
Element = [ Key ":" ] Value .
ElementIndex = Expression .
ElementList = Element { "," Element } .
ElementType = Type .

//EmptyStmt = .

ExprCaseClause = ExprSwitchCase ":" StatementList .
ExprSwitchCase = "case" ExpressionList
	| "default" .
ExprSwitchStmt = "switch" [ SimpleStmt ";" ] [ Expression ] "{" { ExprCaseClause } "}" .
Expression = UnaryExpr
	| Expression Binary_op UnaryExpr .
ExpressionList = Expression { "," Expression } .
ExpressionStmt = Expression .
FallthroughStmt = "fallthrough" .
FieldDecl = (
		  IdentifierList Type
		| AnonymousField
	  ) [ Tag ] .

//FieldName = identifier .
FieldName = Dclname .

ForClause = [ InitStmt ] ";" [ Condition ] ";" [ PostStmt ] .
ForStmt = "for" [
		  Condition
		| ForClause
		| RangeClause
	  ] Block .
Function = Signature FunctionBody .
FunctionBody = Block .
FunctionDecl = "func" FunctionName ( Function | Signature ) .
FunctionLit = "func" Function .

//FunctionName = identifier .
FunctionName = Dclname .

FunctionType = "func" Signature .
GoStmt = "go" Expression .
GotoStmt = "goto" Label .

//IdentifierList = identifier { "," identifier } .
IdentifierList = Dclname { "," Dclname } .

IfStmt = "if" [ SimpleStmt ";" ] Expression Block [
		 "else" ( IfStmt | Block )
	  ] .
ImportDecl = "import" (
		  ImportSpec
		| "(" { ImportSpec ";" } ")"
	  ) .
ImportPath = string_lit .

//ImportSpec = [ "." | PackageName ] ImportPath .
ImportSpec = [ "." | Dclname ] ImportPath .

IncDecStmt = Expression ( inc | dec ) .
Index = "[" Expression "]" .
InitStmt = SimpleStmt .
InterfaceType = "interface" "{" { MethodSpec ";" } "}" .
InterfaceTypeName = TypeName .
Key = FieldName | ElementIndex .
KeyType = Type .

//Label = identifier .
Label = Dclname .

LabeledStmt = Label ":" [ Statement ] .
Literal = BasicLit
	| CompositeLit
	| FunctionLit .
LiteralType = StructType
	| ArrayType
	| "[" ddd "]" ElementType
	| SliceType
	| MapType
	| TypeName .
LiteralValue = "{" [ ElementList [ "," ] ] "}" .
MapType = "map" "[" KeyType "]" ElementType .
MethodDecl = "func" Receiver MethodName ( Function | Signature ) .
MethodExpr = ReceiverType "." MethodName .

//MethodName = identifier .
MethodName = Dclname .

MethodSpec = MethodName Signature
	| InterfaceTypeName .
Operand = Literal
	| OperandName
	| MethodExpr
	| "(" Expression ")" .

//OperandName = identifier | QualifiedIdent .
OperandName = [ pack_name "." ] name .

//PackageClause = "package" PackageName .
PackageClause = "package" Dclname .

//PackageName = identifier .

ParameterDecl = [ IdentifierList ] [ ddd ] Type .
ParameterList = ParameterDecl { "," ParameterDecl } .
Parameters = "(" [ ParameterList [ "," ] ] ")" .
PointerType = "*" BaseType .
PostStmt = SimpleStmt .
PrimaryExpr = Operand
	| Conversion
	| BuiltinCall
	| PrimaryExpr Selector
	| PrimaryExpr Index
	| PrimaryExpr Slice
	| PrimaryExpr TypeAssertion
	| PrimaryExpr Call .

//QualifiedIdent = PackageName "." identifier .

RangeClause = (
		  ExpressionList "="
		| IdentifierList colas
	  ) "range" Expression .

//Receiver = "(" [ identifier ] [ "*" ] BaseTypeName ")" .
Receiver = "(" [ Dclname ] [ "*" ] BaseTypeName ")" .

//ReceiverType = TypeName
//	| "(" "*" TypeName ")"
//	| "(" ReceiverType ")" .
ReceiverType = TypeName
	| "(" "*" TypeName ")"
	| "(" TypeName ")" .
RecvExpr = Expression .
RecvStmt = [
		  ExpressionList "="
		| IdentifierList colas
	  ] RecvExpr .
Result = Parameters | Type .
ReturnStmt = "return" [ ExpressionList ] .
SelectStmt = "select" "{" { CommClause } "}" .

//Selector = "." identifier .
Selector = "." Dclname .

SendStmt = Channel comm Expression .
ShortVarDecl = IdentifierList colas ExpressionList .
Signature = Parameters [ Result ] .

//SimpleStmt = EmptyStmt
//	| ExpressionStmt
//	| SendStmt
//	| IncDecStmt
//	| Assignment
//	| ShortVarDecl .
SimpleStmt = ExpressionStmt
	| SendStmt
	| IncDecStmt
	| Assignment
	| ShortVarDecl .

Slice = "[" [ Expression ] ":" [ Expression ] "]" .
SliceType = "[" "]" ElementType .
SourceFile = PackageClause ";" { ImportDecl ";" } { TopLevelDecl ";" } .
Statement = Declaration
	| LabeledStmt
	| SimpleStmt
	| GoStmt
	| ReturnStmt
	| BreakStmt
	| ContinueStmt
	| GotoStmt
	| FallthroughStmt
	| Block
	| IfStmt
	| SwitchStmt
	| SelectStmt
	| ForStmt
	| DeferStmt .
StatementList = { [ Statement ] ";" } .
StructType = "struct" "{" { FieldDecl ";" } "}" .
SwitchStmt = ExprSwitchStmt | TypeSwitchStmt .
Tag = string_lit .
TopLevelDecl = Declaration
	| FunctionDecl
	| MethodDecl .
Type = TypeName
	| TypeLit
	| "(" Type ")" .
TypeAssertion = "." "(" Type ")" .
TypeCaseClause = TypeSwitchCase ":" StatementList .
TypeDecl = "type" (
		  TypeSpec
		| "(" { TypeSpec ";" } ")"
	  ) .
TypeList = Type { "," Type } .
TypeLit = ArrayType
	| StructType
	| PointerType
	| FunctionType
	| InterfaceType
	| SliceType
	| MapType
	| ChannelType .

//TypeName = identifier | QualifiedIdent .
TypeName = [ pack_name "." ] type_name . // Reference to an already declared type by name.

//TypeSpec = identifier Type .
TypeSpec = Dclname Type .

TypeSwitchCase = "case" TypeList
	| "default" .

//TypeSwitchGuard = [ identifier colas ] PrimaryExpr "." "(" "type" ")" .
TypeSwitchGuard = [ Dclname colas ] PrimaryExpr "." "(" "type" ")" .

TypeSwitchStmt = "switch" [ SimpleStmt ";" ] TypeSwitchGuard "{" { TypeCaseClause } "}" .
UnaryExpr = PrimaryExpr
	| Unary_op UnaryExpr .
Value = Expression | LiteralValue .
VarDecl = "var" (
		  VarSpec
		| "(" { VarSpec ";" } ")"
	  ) .
VarSpec = IdentifierList (
		  Type [ "=" ExpressionList ]
		| "=" ExpressionList
	  ) .
