%{

//TODO Put your favorite license here
		
// yacc source generated by ebnf2y[1]
// at 2014-02-07 13:46:46.68048963 +0100 CET
//
//  $ ebnf2y -o parser.y -pkg parser parser.ebnf
//
// CAUTION: If this file is a Go source file (*.go), it was generated
// automatically by '$ go tool yacc' from a *.y file - DO NOT EDIT in that case!
// 
//   [1]: http://github.com/cznic/ebnf2y

package parser //TODO real package name

//TODO required only be the demo _dump function
import (
	"bytes"
	"fmt"
	"strings"

	"github.com/cznic/strutil"
)

%}

%union {
	item interface{} //TODO insert real field(s)
}

%token	FLOAT_LIT
%token	IDENTIFIER
%token	IMAGINARY_LIT
%token	INT_LIT
%token	RUNE_LIT
%token	STRING_LIT

%type	<item> 	/*TODO real type(s), if/where applicable */
	FLOAT_LIT
	IDENTIFIER
	IMAGINARY_LIT
	INT_LIT
	RUNE_LIT
	STRING_LIT

%token	TOK1	/*TODO Name for "+=" */
%token	TOK2	/*TODO Name for "--" */
%token	TOK3	/*TODO Name for "-=" */
%token	TOK4	/*TODO Name for "==" */
%token	TOK5	/*TODO Name for "*=" */
%token	TOK6	/*TODO Name for ":=" */
%token	TOK7	/*TODO Name for "&^" */
%token	TOK8	/*TODO Name for "&=" */
%token	TOK9	/*TODO Name for "&^=" */
%token	TOK10	/*TODO Name for "%=" */
%token	TOK11	/*TODO Name for "..." */
%token	TOK12	/*TODO Name for "/=" */
%token	TOK13	/*TODO Name for "&&" */
%token	TOK14	/*TODO Name for "<<" */
%token	TOK15	/*TODO Name for ">>" */
%token	TOK16	/*TODO Name for "||" */
%token	TOK17	/*TODO Name for "<-" */
%token	TOK18	/*TODO Name for "|=" */
%token	TOK19	/*TODO Name for "<=" */
%token	TOK20	/*TODO Name for "++" */
%token	TOK21	/*TODO Name for "!=" */
%token	TOK22	/*TODO Name for "<<=" */
%token	TOK23	/*TODO Name for ">>=" */
%token	TOK24	/*TODO Name for "^=" */
%token	TOK25	/*TODO Name for ">=" */

%type	<item> 	/*TODO real type(s), if/where applicable */
	TOK1
	TOK2
	TOK3
	TOK4
	TOK5
	TOK6
	TOK7
	TOK8
	TOK9
	TOK10
	TOK11
	TOK12
	TOK13
	TOK14
	TOK15
	TOK16
	TOK17
	TOK18
	TOK19
	TOK20
	TOK21
	TOK22
	TOK23
	TOK24
	TOK25

%token BREAK
%token CASE
%token CHAN
%token CONST
%token CONTINUE
%token DEFAULT
%token DEFER
%token ELSE
%token FALLTHROUGH
%token FOR
%token FUNC
%token GO
%token GOTO
%token IF
%token IMPORT
%token INTERFACE
%token MAP
%token PACKAGE
%token RANGE
%token RETURN
%token SELECT
%token STRUCT
%token SWITCH
%token TYPE
%token VAR

%type	<item> 	/*TODO real type(s), if/where applicable */
	AnonymousField
	ArgumentList
	ArgumentList1
	ArrayLength
	ArrayType
	Assignment
	Assignment1
	BaseType
	BasicLit
	Block
	BreakStmt
	BreakStmt1
	BuiltinArgs
	BuiltinArgs1
	BuiltinCall
	BuiltinCall1
	BuiltinCall11
	Call
	Call1
	Call11
	Channel
	ChannelType
	ChannelType1
	ChannelType11
	CommCase
	CommCase1
	CommClause
	CompositeLit
	Condition
	ConstDecl
	ConstDecl1
	ConstDecl11
	ConstDecl111
	ConstDecl112
	ConstSpec
	ConstSpec1
	ConstSpec11
	ContinueStmt
	ContinueStmt1
	Conversion
	Conversion1
	Declaration
	DeferStmt
	Element
	Element1
	ElementIndex
	ElementList
	ElementList1
	ElementType
	ExprCaseClause
	ExprSwitchCase
	ExprSwitchStmt
	ExprSwitchStmt1
	ExprSwitchStmt2
	ExprSwitchStmt3
	Expression
	Expression1
	ExpressionList
	ExpressionList1
	ExpressionStmt
	FallthroughStmt
	FieldDecl
	FieldDecl1
	FieldDecl2
	FieldName
	ForClause
	ForClause1
	ForClause2
	ForClause3
	ForStmt
	ForStmt1
	ForStmt11
	Function
	FunctionBody
	FunctionDecl
	FunctionDecl1
	FunctionLit
	FunctionName
	FunctionType
	GoStmt
	GotoStmt
	IdentifierList
	IdentifierList1
	IfStmt
	IfStmt1
	IfStmt11
	IfStmt2
	IfStmt21
	ImportDecl
	ImportDecl1
	ImportDecl11
	ImportDecl111
	ImportDecl112
	ImportPath
	ImportSpec
	ImportSpec1
	ImportSpec11
	IncDecStmt
	IncDecStmt1
	Index
	InitStmt
	InterfaceType
	InterfaceType1
	InterfaceTypeName
	Key
	KeyType
	Label
	LabeledStmt
	Literal
	LiteralType
	LiteralValue
	LiteralValue1
	LiteralValue11
	MapType
	MethodDecl
	MethodDecl1
	MethodExpr
	MethodName
	MethodSpec
	Operand
	OperandName
	PackageClause
	PackageName
	ParameterDecl
	ParameterDecl1
	ParameterDecl2
	ParameterList
	ParameterList1
	Parameters
	Parameters1
	Parameters11
	PointerType
	PostStmt
	PrimaryExpr
	QualifiedIdent
	RangeClause
	RangeClause1
	Receiver
	ReceiverType
	RecvExpr
	RecvStmt
	RecvStmt1
	Result
	ReturnStmt
	ReturnStmt1
	SelectStmt
	SelectStmt1
	Selector
	SendStmt
	ShortVarDecl
	Signature
	Signature1
	SimpleStmt
	Slice
	Slice1
	Slice11
	Slice12
	Slice2
	Slice21
	SliceType
	SourceFile
	SourceFile1
	SourceFile2
	Start
	Statement
	StatementList
	StatementList1
	StatementList2
	StatementList21
	StructType
	StructType1
	SwitchStmt
	Tag
	TopLevelDecl
	Type
	TypeAssertion
	TypeCaseClause
	TypeDecl
	TypeDecl1
	TypeDecl11
	TypeDecl111
	TypeDecl112
	TypeList
	TypeList1
	TypeLit
	TypeName
	TypeSpec
	TypeSwitchCase
	TypeSwitchGuard
	TypeSwitchStmt
	TypeSwitchStmt1
	TypeSwitchStmt2
	UnaryExpr
	UnaryExpr1
	Value
	VarDecl
	VarDecl1
	VarDecl11
	VarDecl111
	VarDecl112
	VarSpec
	VarSpec1
	VarSpec11

/*TODO %left, %right, ... declarations */

%start Start

%%

AnonymousField:
	TypeName
	{
		$$ = $1 //TODO 1
	}
|	'*' TypeName
	{
		$$ = []AnonymousField{"*", $2} //TODO 2
	}

ArgumentList:
	ExpressionList ArgumentList1
	{
		$$ = []ArgumentList{$1, $2} //TODO 3
	}

ArgumentList1:
	/* EMPTY */
	{
		$$ = nil //TODO 4
	}
|	TOK11 /* "..." */
	{
		$$ = "..." //TODO 5
	}

ArrayLength:
	Expression
	{
		$$ = $1 //TODO 6
	}

ArrayType:
	'[' ArrayLength ']' ElementType
	{
		$$ = []ArrayType{"[", $2, "]", $4} //TODO 7
	}

Assignment:
	ExpressionList Assignment1 ExpressionList
	{
		$$ = []Assignment{$1, $2, $3} //TODO 8
	}

Assignment1:
	TOK10 /* "%=" */
	{
		$$ = "%=" //TODO 9
	}
|	TOK8 /* "&=" */
	{
		$$ = "&=" //TODO 10
	}
|	TOK9 /* "&^=" */
	{
		$$ = "&^=" //TODO 11
	}
|	TOK5 /* "*=" */
	{
		$$ = "*=" //TODO 12
	}
|	TOK1 /* "+=" */
	{
		$$ = "+=" //TODO 13
	}
|	TOK3 /* "-=" */
	{
		$$ = "-=" //TODO 14
	}
|	TOK12 /* "/=" */
	{
		$$ = "/=" //TODO 15
	}
|	TOK22 /* "<<=" */
	{
		$$ = "<<=" //TODO 16
	}
|	'='
	{
		$$ = "=" //TODO 17
	}
|	TOK23 /* ">>=" */
	{
		$$ = ">>=" //TODO 18
	}
|	TOK24 /* "^=" */
	{
		$$ = "^=" //TODO 19
	}
|	TOK18 /* "|=" */
	{
		$$ = "|=" //TODO 20
	}

BaseType:
	Type
	{
		$$ = $1 //TODO 21
	}

BasicLit:
	INT_LIT
	{
		$$ = $1 //TODO 22
	}
|	FLOAT_LIT
	{
		$$ = $1 //TODO 23
	}
|	IMAGINARY_LIT
	{
		$$ = $1 //TODO 24
	}
|	RUNE_LIT
	{
		$$ = $1 //TODO 25
	}
|	STRING_LIT
	{
		$$ = $1 //TODO 26
	}

Block:
	'{' StatementList '}'
	{
		$$ = []Block{"{", $2, "}"} //TODO 27
	}

BreakStmt:
	BREAK BreakStmt1
	{
		$$ = []BreakStmt{"break", $2} //TODO 28
	}

BreakStmt1:
	/* EMPTY */
	{
		$$ = nil //TODO 29
	}
|	Label
	{
		$$ = $1 //TODO 30
	}

BuiltinArgs:
	Type BuiltinArgs1
	{
		$$ = []BuiltinArgs{$1, $2} //TODO 31
	}
|	ArgumentList
	{
		$$ = $1 //TODO 32
	}

BuiltinArgs1:
	/* EMPTY */
	{
		$$ = nil //TODO 33
	}
|	',' ArgumentList
	{
		$$ = []BuiltinArgs1{",", $2} //TODO 34
	}

BuiltinCall:
	IDENTIFIER '(' BuiltinCall1 ')'
	{
		$$ = []BuiltinCall{$1, "(", $3, ")"} //TODO 35
	}

BuiltinCall1:
	/* EMPTY */
	{
		$$ = nil //TODO 36
	}
|	BuiltinArgs BuiltinCall11
	{
		$$ = []BuiltinCall1{$1, $2} //TODO 37
	}

BuiltinCall11:
	/* EMPTY */
	{
		$$ = nil //TODO 38
	}
|	','
	{
		$$ = "," //TODO 39
	}

Call:
	'(' Call1 ')'
	{
		$$ = []Call{"(", $2, ")"} //TODO 40
	}

Call1:
	/* EMPTY */
	{
		$$ = nil //TODO 41
	}
|	ArgumentList Call11
	{
		$$ = []Call1{$1, $2} //TODO 42
	}

Call11:
	/* EMPTY */
	{
		$$ = nil //TODO 43
	}
|	','
	{
		$$ = "," //TODO 44
	}

Channel:
	Expression
	{
		$$ = $1 //TODO 45
	}

ChannelType:
	ChannelType1 ElementType
	{
		$$ = []ChannelType{$1, $2} //TODO 46
	}

ChannelType1:
	CHAN ChannelType11
	{
		$$ = []ChannelType1{"chan", $2} //TODO 47
	}
|	TOK17 /* "<-" */ CHAN
	{
		$$ = []ChannelType1{"<-", "chan"} //TODO 48
	}

ChannelType11:
	/* EMPTY */
	{
		$$ = nil //TODO 49
	}
|	TOK17 /* "<-" */
	{
		$$ = "<-" //TODO 50
	}

CommCase:
	CASE CommCase1
	{
		$$ = []CommCase{"case", $2} //TODO 51
	}
|	DEFAULT
	{
		$$ = "default" //TODO 52
	}

CommCase1:
	SendStmt
	{
		$$ = $1 //TODO 53
	}
|	RecvStmt
	{
		$$ = $1 //TODO 54
	}

CommClause:
	CommCase ':' StatementList
	{
		$$ = []CommClause{$1, ":", $3} //TODO 55
	}

CompositeLit:
	LiteralType LiteralValue
	{
		$$ = []CompositeLit{$1, $2} //TODO 56
	}

Condition:
	Expression
	{
		$$ = $1 //TODO 57
	}

ConstDecl:
	CONST ConstDecl1
	{
		$$ = []ConstDecl{"const", $2} //TODO 58
	}

ConstDecl1:
	ConstSpec
	{
		$$ = $1 //TODO 59
	}
|	'(' ConstDecl11 ')'
	{
		$$ = []ConstDecl1{"(", $2, ")"} //TODO 60
	}

ConstDecl11:
	/* EMPTY */
	{
		$$ = nil //TODO 61
	}
|	ConstSpec ConstDecl111 ConstDecl112
	{
		$$ = []ConstDecl11{$1, $2, $3} //TODO 62
	}

ConstDecl111:
	/* EMPTY */
	{
		$$ = []ConstDecl111(nil) //TODO 63
	}
|	ConstDecl111 ';' ConstSpec
	{
		$$ = append($1.([]ConstDecl111), ";", $3) //TODO 64
	}

ConstDecl112:
	/* EMPTY */
	{
		$$ = nil //TODO 65
	}
|	';'
	{
		$$ = ";" //TODO 66
	}

ConstSpec:
	IdentifierList ConstSpec1
	{
		$$ = []ConstSpec{$1, $2} //TODO 67
	}

ConstSpec1:
	/* EMPTY */
	{
		$$ = nil //TODO 68
	}
|	ConstSpec11 '=' ExpressionList
	{
		$$ = []ConstSpec1{$1, "=", $3} //TODO 69
	}

ConstSpec11:
	/* EMPTY */
	{
		$$ = nil //TODO 70
	}
|	Type
	{
		$$ = $1 //TODO 71
	}

ContinueStmt:
	CONTINUE ContinueStmt1
	{
		$$ = []ContinueStmt{"continue", $2} //TODO 72
	}

ContinueStmt1:
	/* EMPTY */
	{
		$$ = nil //TODO 73
	}
|	Label
	{
		$$ = $1 //TODO 74
	}

Conversion:
	Type '(' Expression Conversion1 ')'
	{
		$$ = []Conversion{$1, "(", $3, $4, ")"} //TODO 75
	}

Conversion1:
	/* EMPTY */
	{
		$$ = nil //TODO 76
	}
|	','
	{
		$$ = "," //TODO 77
	}

Declaration:
	ConstDecl
	{
		$$ = $1 //TODO 78
	}
|	TypeDecl
	{
		$$ = $1 //TODO 79
	}
|	VarDecl
	{
		$$ = $1 //TODO 80
	}

DeferStmt:
	DEFER Expression
	{
		$$ = []DeferStmt{"defer", $2} //TODO 81
	}

Element:
	Element1 Value
	{
		$$ = []Element{$1, $2} //TODO 82
	}

Element1:
	/* EMPTY */
	{
		$$ = nil //TODO 83
	}
|	Key ':'
	{
		$$ = []Element1{$1, ":"} //TODO 84
	}

ElementIndex:
	Expression
	{
		$$ = $1 //TODO 85
	}

ElementList:
	Element ElementList1
	{
		$$ = []ElementList{$1, $2} //TODO 86
	}

ElementList1:
	/* EMPTY */
	{
		$$ = []ElementList1(nil) //TODO 87
	}
|	ElementList1 ',' Element
	{
		$$ = append($1.([]ElementList1), ",", $3) //TODO 88
	}

ElementType:
	Type
	{
		$$ = $1 //TODO 89
	}

ExprCaseClause:
	ExprSwitchCase ':' StatementList
	{
		$$ = []ExprCaseClause{$1, ":", $3} //TODO 90
	}

ExprSwitchCase:
	CASE ExpressionList
	{
		$$ = []ExprSwitchCase{"case", $2} //TODO 91
	}
|	DEFAULT
	{
		$$ = "default" //TODO 92
	}

ExprSwitchStmt:
	SWITCH ExprSwitchStmt1 ExprSwitchStmt2 '{' ExprSwitchStmt3 '}'
	{
		$$ = []ExprSwitchStmt{"switch", $2, $3, "{", $5, "}"} //TODO 93
	}

ExprSwitchStmt1:
	/* EMPTY */
	{
		$$ = nil //TODO 94
	}
|	SimpleStmt ';'
	{
		$$ = []ExprSwitchStmt1{$1, ";"} //TODO 95
	}

ExprSwitchStmt2:
	/* EMPTY */
	{
		$$ = nil //TODO 96
	}
|	Expression
	{
		$$ = $1 //TODO 97
	}

ExprSwitchStmt3:
	/* EMPTY */
	{
		$$ = []ExprSwitchStmt3(nil) //TODO 98
	}
|	ExprSwitchStmt3 ExprCaseClause
	{
		$$ = append($1.([]ExprSwitchStmt3), $2) //TODO 99
	}

Expression:
	UnaryExpr
	{
		$$ = $1 //TODO 100
	}
|	Expression Expression1 UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 101
	}

Expression1:
	TOK21 /* "!=" */
	{
		$$ = "!=" //TODO 102
	}
|	'%'
	{
		$$ = "%" //TODO 103
	}
|	'&'
	{
		$$ = "&" //TODO 104
	}
|	TOK13 /* "&&" */
	{
		$$ = "&&" //TODO 105
	}
|	TOK7 /* "&^" */
	{
		$$ = "&^" //TODO 106
	}
|	'*'
	{
		$$ = "*" //TODO 107
	}
|	'+'
	{
		$$ = "+" //TODO 108
	}
|	'-'
	{
		$$ = "-" //TODO 109
	}
|	'/'
	{
		$$ = "/" //TODO 110
	}
|	'<'
	{
		$$ = "<" //TODO 111
	}
|	TOK14 /* "<<" */
	{
		$$ = "<<" //TODO 112
	}
|	TOK19 /* "<=" */
	{
		$$ = "<=" //TODO 113
	}
|	TOK4 /* "==" */
	{
		$$ = "==" //TODO 114
	}
|	'>'
	{
		$$ = ">" //TODO 115
	}
|	TOK25 /* ">=" */
	{
		$$ = ">=" //TODO 116
	}
|	TOK15 /* ">>" */
	{
		$$ = ">>" //TODO 117
	}
|	'^'
	{
		$$ = "^" //TODO 118
	}
|	'|'
	{
		$$ = "|" //TODO 119
	}
|	TOK16 /* "||" */
	{
		$$ = "||" //TODO 120
	}

ExpressionList:
	Expression ExpressionList1
	{
		$$ = []ExpressionList{$1, $2} //TODO 121
	}

ExpressionList1:
	/* EMPTY */
	{
		$$ = []ExpressionList1(nil) //TODO 122
	}
|	ExpressionList1 ',' Expression
	{
		$$ = append($1.([]ExpressionList1), ",", $3) //TODO 123
	}

ExpressionStmt:
	Expression
	{
		$$ = $1 //TODO 124
	}

FallthroughStmt:
	FALLTHROUGH
	{
		$$ = "fallthrough" //TODO 125
	}

FieldDecl:
	FieldDecl1 FieldDecl2
	{
		$$ = []FieldDecl{$1, $2} //TODO 126
	}

FieldDecl1:
	IdentifierList Type
	{
		$$ = []FieldDecl1{$1, $2} //TODO 127
	}
|	AnonymousField
	{
		$$ = $1 //TODO 128
	}

FieldDecl2:
	/* EMPTY */
	{
		$$ = nil //TODO 129
	}
|	Tag
	{
		$$ = $1 //TODO 130
	}

FieldName:
	IDENTIFIER
	{
		$$ = $1 //TODO 131
	}

ForClause:
	ForClause1 ';' ForClause2 ';' ForClause3
	{
		$$ = []ForClause{$1, ";", $3, ";", $5} //TODO 132
	}

ForClause1:
	/* EMPTY */
	{
		$$ = nil //TODO 133
	}
|	InitStmt
	{
		$$ = $1 //TODO 134
	}

ForClause2:
	/* EMPTY */
	{
		$$ = nil //TODO 135
	}
|	Condition
	{
		$$ = $1 //TODO 136
	}

ForClause3:
	/* EMPTY */
	{
		$$ = nil //TODO 137
	}
|	PostStmt
	{
		$$ = $1 //TODO 138
	}

ForStmt:
	FOR ForStmt1 Block
	{
		$$ = []ForStmt{"for", $2, $3} //TODO 139
	}

ForStmt1:
	/* EMPTY */
	{
		$$ = nil //TODO 140
	}
|	ForStmt11
	{
		$$ = $1 //TODO 141
	}

ForStmt11:
	Condition
	{
		$$ = $1 //TODO 142
	}
|	ForClause
	{
		$$ = $1 //TODO 143
	}
|	RangeClause
	{
		$$ = $1 //TODO 144
	}

Function:
	Signature FunctionBody
	{
		$$ = []Function{$1, $2} //TODO 145
	}

FunctionBody:
	Block
	{
		$$ = $1 //TODO 146
	}

FunctionDecl:
	FUNC FunctionName FunctionDecl1
	{
		$$ = []FunctionDecl{"func", $2, $3} //TODO 147
	}

FunctionDecl1:
	Function
	{
		$$ = $1 //TODO 148
	}
|	Signature
	{
		$$ = $1 //TODO 149
	}

FunctionLit:
	FUNC Function
	{
		$$ = []FunctionLit{"func", $2} //TODO 150
	}

FunctionName:
	IDENTIFIER
	{
		$$ = $1 //TODO 151
	}

FunctionType:
	FUNC Signature
	{
		$$ = []FunctionType{"func", $2} //TODO 152
	}

GoStmt:
	GO Expression
	{
		$$ = []GoStmt{"go", $2} //TODO 153
	}

GotoStmt:
	GOTO Label
	{
		$$ = []GotoStmt{"goto", $2} //TODO 154
	}

IdentifierList:
	IDENTIFIER IdentifierList1
	{
		$$ = []IdentifierList{$1, $2} //TODO 155
	}

IdentifierList1:
	/* EMPTY */
	{
		$$ = []IdentifierList1(nil) //TODO 156
	}
|	IdentifierList1 ',' IDENTIFIER
	{
		$$ = append($1.([]IdentifierList1), ",", $3) //TODO 157
	}

IfStmt:
	IF Expression Block IfStmt1
	{
		$$ = []IfStmt{"if", $2, $3, $4} //TODO 158
	}
|	IF SimpleStmt ';' Expression Block IfStmt2
	{
		$$ = []IfStmt{"if", $2, ";", $4, $5, $6} //TODO 159
	}

IfStmt1:
	/* EMPTY */
	{
		$$ = nil //TODO 160
	}
|	ELSE IfStmt11
	{
		$$ = []IfStmt1{"else", $2} //TODO 161
	}

IfStmt11:
	IfStmt
	{
		$$ = $1 //TODO 162
	}
|	Block
	{
		$$ = $1 //TODO 163
	}

IfStmt2:
	/* EMPTY */
	{
		$$ = nil //TODO 164
	}
|	ELSE IfStmt21
	{
		$$ = []IfStmt2{"else", $2} //TODO 165
	}

IfStmt21:
	IfStmt
	{
		$$ = $1 //TODO 166
	}
|	Block
	{
		$$ = $1 //TODO 167
	}

ImportDecl:
	IMPORT ImportDecl1
	{
		$$ = []ImportDecl{"import", $2} //TODO 168
	}

ImportDecl1:
	ImportSpec
	{
		$$ = $1 //TODO 169
	}
|	'(' ImportDecl11 ')'
	{
		$$ = []ImportDecl1{"(", $2, ")"} //TODO 170
	}

ImportDecl11:
	/* EMPTY */
	{
		$$ = nil //TODO 171
	}
|	ImportSpec ImportDecl111 ImportDecl112
	{
		$$ = []ImportDecl11{$1, $2, $3} //TODO 172
	}

ImportDecl111:
	/* EMPTY */
	{
		$$ = []ImportDecl111(nil) //TODO 173
	}
|	ImportDecl111 ';' ImportSpec
	{
		$$ = append($1.([]ImportDecl111), ";", $3) //TODO 174
	}

ImportDecl112:
	/* EMPTY */
	{
		$$ = nil //TODO 175
	}
|	';'
	{
		$$ = ";" //TODO 176
	}

ImportPath:
	STRING_LIT
	{
		$$ = $1 //TODO 177
	}

ImportSpec:
	ImportSpec1 ImportPath
	{
		$$ = []ImportSpec{$1, $2} //TODO 178
	}

ImportSpec1:
	/* EMPTY */
	{
		$$ = nil //TODO 179
	}
|	ImportSpec11
	{
		$$ = $1 //TODO 180
	}

ImportSpec11:
	'.'
	{
		$$ = "." //TODO 181
	}
|	PackageName
	{
		$$ = $1 //TODO 182
	}

IncDecStmt:
	Expression IncDecStmt1
	{
		$$ = []IncDecStmt{$1, $2} //TODO 183
	}

IncDecStmt1:
	TOK20 /* "++" */
	{
		$$ = "++" //TODO 184
	}
|	TOK2 /* "--" */
	{
		$$ = "--" //TODO 185
	}

Index:
	'[' Expression ']'
	{
		$$ = []Index{"[", $2, "]"} //TODO 186
	}

InitStmt:
	SimpleStmt
	{
		$$ = $1 //TODO 187
	}

InterfaceType:
	INTERFACE '{' InterfaceType1 '}'
	{
		$$ = []InterfaceType{"interface", "{", $3, "}"} //TODO 188
	}

InterfaceType1:
	/* EMPTY */
	{
		$$ = []InterfaceType1(nil) //TODO 189
	}
|	InterfaceType1 MethodSpec ';'
	{
		$$ = append($1.([]InterfaceType1), $2, ";") //TODO 190
	}

InterfaceTypeName:
	TypeName
	{
		$$ = $1 //TODO 191
	}

Key:
	FieldName
	{
		$$ = $1 //TODO 192
	}
|	ElementIndex
	{
		$$ = $1 //TODO 193
	}

KeyType:
	Type
	{
		$$ = $1 //TODO 194
	}

Label:
	IDENTIFIER
	{
		$$ = $1 //TODO 195
	}

LabeledStmt:
	Label ':' Statement
	{
		$$ = []LabeledStmt{$1, ":", $3} //TODO 196
	}

Literal:
	BasicLit
	{
		$$ = $1 //TODO 197
	}
|	CompositeLit
	{
		$$ = $1 //TODO 198
	}
|	FunctionLit
	{
		$$ = $1 //TODO 199
	}

LiteralType:
	StructType
	{
		$$ = $1 //TODO 200
	}
|	ArrayType
	{
		$$ = $1 //TODO 201
	}
|	'[' TOK11 /* "..." */ ']' ElementType
	{
		$$ = []LiteralType{"[", "...", "]", $4} //TODO 202
	}
|	SliceType
	{
		$$ = $1 //TODO 203
	}
|	MapType
	{
		$$ = $1 //TODO 204
	}
|	TypeName
	{
		$$ = $1 //TODO 205
	}

LiteralValue:
	'{' LiteralValue1 '}'
	{
		$$ = []LiteralValue{"{", $2, "}"} //TODO 206
	}

LiteralValue1:
	/* EMPTY */
	{
		$$ = nil //TODO 207
	}
|	ElementList LiteralValue11
	{
		$$ = []LiteralValue1{$1, $2} //TODO 208
	}

LiteralValue11:
	/* EMPTY */
	{
		$$ = nil //TODO 209
	}
|	','
	{
		$$ = "," //TODO 210
	}

MapType:
	MAP '[' KeyType ']' ElementType
	{
		$$ = []MapType{"map", "[", $3, "]", $5} //TODO 211
	}

MethodDecl:
	FUNC Receiver MethodName MethodDecl1
	{
		$$ = []MethodDecl{"func", $2, $3, $4} //TODO 212
	}

MethodDecl1:
	Function
	{
		$$ = $1 //TODO 213
	}
|	Signature
	{
		$$ = $1 //TODO 214
	}

MethodExpr:
	ReceiverType '.' MethodName
	{
		$$ = []MethodExpr{$1, ".", $3} //TODO 215
	}

MethodName:
	IDENTIFIER
	{
		$$ = $1 //TODO 216
	}

MethodSpec:
	MethodName Signature
	{
		$$ = []MethodSpec{$1, $2} //TODO 217
	}
|	InterfaceTypeName
	{
		$$ = $1 //TODO 218
	}

Operand:
	Literal
	{
		$$ = $1 //TODO 219
	}
|	OperandName
	{
		$$ = $1 //TODO 220
	}
|	MethodExpr
	{
		$$ = $1 //TODO 221
	}
|	'(' Expression ')'
	{
		$$ = []Operand{"(", $2, ")"} //TODO 222
	}

OperandName:
	IDENTIFIER
	{
		$$ = $1 //TODO 223
	}
|	QualifiedIdent
	{
		$$ = $1 //TODO 224
	}

PackageClause:
	PACKAGE PackageName
	{
		$$ = []PackageClause{"package", $2} //TODO 225
	}

PackageName:
	IDENTIFIER
	{
		$$ = $1 //TODO 226
	}

ParameterDecl:
	ParameterDecl1 ParameterDecl2 Type
	{
		$$ = []ParameterDecl{$1, $2, $3} //TODO 227
	}

ParameterDecl1:
	/* EMPTY */
	{
		$$ = nil //TODO 228
	}
|	IdentifierList
	{
		$$ = $1 //TODO 229
	}

ParameterDecl2:
	/* EMPTY */
	{
		$$ = nil //TODO 230
	}
|	TOK11 /* "..." */
	{
		$$ = "..." //TODO 231
	}

ParameterList:
	ParameterDecl ParameterList1
	{
		$$ = []ParameterList{$1, $2} //TODO 232
	}

ParameterList1:
	/* EMPTY */
	{
		$$ = []ParameterList1(nil) //TODO 233
	}
|	ParameterList1 ',' ParameterDecl
	{
		$$ = append($1.([]ParameterList1), ",", $3) //TODO 234
	}

Parameters:
	'(' Parameters1 ')'
	{
		$$ = []Parameters{"(", $2, ")"} //TODO 235
	}

Parameters1:
	/* EMPTY */
	{
		$$ = nil //TODO 236
	}
|	ParameterList Parameters11
	{
		$$ = []Parameters1{$1, $2} //TODO 237
	}

Parameters11:
	/* EMPTY */
	{
		$$ = nil //TODO 238
	}
|	','
	{
		$$ = "," //TODO 239
	}

PointerType:
	'*' BaseType
	{
		$$ = []PointerType{"*", $2} //TODO 240
	}

PostStmt:
	SimpleStmt
	{
		$$ = $1 //TODO 241
	}

PrimaryExpr:
	Operand
	{
		$$ = $1 //TODO 242
	}
|	Conversion
	{
		$$ = $1 //TODO 243
	}
|	BuiltinCall
	{
		$$ = $1 //TODO 244
	}
|	PrimaryExpr Selector
	{
		$$ = []PrimaryExpr{$1, $2} //TODO 245
	}
|	PrimaryExpr Index
	{
		$$ = []PrimaryExpr{$1, $2} //TODO 246
	}
|	PrimaryExpr Slice
	{
		$$ = []PrimaryExpr{$1, $2} //TODO 247
	}
|	PrimaryExpr TypeAssertion
	{
		$$ = []PrimaryExpr{$1, $2} //TODO 248
	}
|	PrimaryExpr Call
	{
		$$ = []PrimaryExpr{$1, $2} //TODO 249
	}

QualifiedIdent:
	PackageName '.' IDENTIFIER
	{
		$$ = []QualifiedIdent{$1, ".", $3} //TODO 250
	}

RangeClause:
	RangeClause1 RANGE Expression
	{
		$$ = []RangeClause{$1, "range", $3} //TODO 251
	}

RangeClause1:
	ExpressionList '='
	{
		$$ = []RangeClause1{$1, "="} //TODO 252
	}
|	IdentifierList TOK6 /* ":=" */
	{
		$$ = []RangeClause1{$1, ":="} //TODO 253
	}

Receiver:
	'(' IDENTIFIER ')'
	{
		$$ = []Receiver{"(", $2, ")"} //TODO 254
	}
|	'(' '*' IDENTIFIER ')'
	{
		$$ = []Receiver{"(", "*", $3, ")"} //TODO 255
	}
|	'(' IDENTIFIER IDENTIFIER ')'
	{
		$$ = []Receiver{"(", $2, $3, ")"} //TODO 256
	}
|	'(' IDENTIFIER '*' IDENTIFIER ')'
	{
		$$ = []Receiver{"(", $2, "*", $4, ")"} //TODO 257
	}

ReceiverType:
	TypeName
	{
		$$ = $1 //TODO 258
	}
|	'(' '*' TypeName ')'
	{
		$$ = []ReceiverType{"(", "*", $3, ")"} //TODO 259
	}
|	'(' ReceiverType ')'
	{
		$$ = []ReceiverType{"(", $2, ")"} //TODO 260
	}

RecvExpr:
	Expression
	{
		$$ = $1 //TODO 261
	}

RecvStmt:
	RecvExpr
	{
		$$ = $1 //TODO 262
	}
|	RecvStmt1 RecvExpr
	{
		$$ = []RecvStmt{$1, $2} //TODO 263
	}

RecvStmt1:
	ExpressionList '='
	{
		$$ = []RecvStmt1{$1, "="} //TODO 264
	}
|	IdentifierList TOK6 /* ":=" */
	{
		$$ = []RecvStmt1{$1, ":="} //TODO 265
	}

Result:
	Parameters
	{
		$$ = $1 //TODO 266
	}
|	Type
	{
		$$ = $1 //TODO 267
	}

ReturnStmt:
	RETURN ReturnStmt1
	{
		$$ = []ReturnStmt{"return", $2} //TODO 268
	}

ReturnStmt1:
	/* EMPTY */
	{
		$$ = nil //TODO 269
	}
|	ExpressionList
	{
		$$ = $1 //TODO 270
	}

SelectStmt:
	SELECT '{' SelectStmt1 '}'
	{
		$$ = []SelectStmt{"select", "{", $3, "}"} //TODO 271
	}

SelectStmt1:
	/* EMPTY */
	{
		$$ = []SelectStmt1(nil) //TODO 272
	}
|	SelectStmt1 CommClause
	{
		$$ = append($1.([]SelectStmt1), $2) //TODO 273
	}

Selector:
	'.' IDENTIFIER
	{
		$$ = []Selector{".", $2} //TODO 274
	}

SendStmt:
	Channel TOK17 /* "<-" */ Expression
	{
		$$ = []SendStmt{$1, "<-", $3} //TODO 275
	}

ShortVarDecl:
	IdentifierList TOK6 /* ":=" */ ExpressionList
	{
		$$ = []ShortVarDecl{$1, ":=", $3} //TODO 276
	}

Signature:
	Parameters Signature1
	{
		$$ = []Signature{$1, $2} //TODO 277
	}

Signature1:
	/* EMPTY */
	{
		$$ = nil //TODO 278
	}
|	Result
	{
		$$ = $1 //TODO 279
	}

SimpleStmt:
	ExpressionStmt
	{
		$$ = $1 //TODO 280
	}
|	SendStmt
	{
		$$ = $1 //TODO 281
	}
|	IncDecStmt
	{
		$$ = $1 //TODO 282
	}
|	Assignment
	{
		$$ = $1 //TODO 283
	}
|	ShortVarDecl
	{
		$$ = $1 //TODO 284
	}

Slice:
	'[' Slice1
	{
		$$ = []Slice{"[", $2} //TODO 285
	}
|	Slice2 ']'
	{
		$$ = []Slice{$1, "]"} //TODO 286
	}

Slice1:
	Slice11 ':' Slice12
	{
		$$ = []Slice1{$1, ":", $3} //TODO 287
	}

Slice11:
	/* EMPTY */
	{
		$$ = nil //TODO 288
	}
|	Expression
	{
		$$ = $1 //TODO 289
	}

Slice12:
	/* EMPTY */
	{
		$$ = nil //TODO 290
	}
|	Expression
	{
		$$ = $1 //TODO 291
	}

Slice2:
	Slice21 ':' Expression ':' Expression
	{
		$$ = []Slice2{$1, ":", $3, ":", $5} //TODO 292
	}

Slice21:
	/* EMPTY */
	{
		$$ = nil //TODO 293
	}
|	Expression
	{
		$$ = $1 //TODO 294
	}

SliceType:
	'[' ']' ElementType
	{
		$$ = []SliceType{"[", "]", $3} //TODO 295
	}

SourceFile:
	PackageClause ';' SourceFile1 SourceFile2
	{
		$$ = []SourceFile{$1, ";", $3, $4} //TODO 296
	}

SourceFile1:
	/* EMPTY */
	{
		$$ = []SourceFile1(nil) //TODO 297
	}
|	SourceFile1 ImportDecl ';'
	{
		$$ = append($1.([]SourceFile1), $2, ";") //TODO 298
	}

SourceFile2:
	/* EMPTY */
	{
		$$ = []SourceFile2(nil) //TODO 299
	}
|	SourceFile2 TopLevelDecl ';'
	{
		$$ = append($1.([]SourceFile2), $2, ";") //TODO 300
	}

Start:
	SourceFile
	{
		_parserResult = $1 //TODO 301
	}

Statement:
	Declaration
	{
		$$ = $1 //TODO 302
	}
|	LabeledStmt
	{
		$$ = $1 //TODO 303
	}
|	SimpleStmt
	{
		$$ = $1 //TODO 304
	}
|	GoStmt
	{
		$$ = $1 //TODO 305
	}
|	ReturnStmt
	{
		$$ = $1 //TODO 306
	}
|	BreakStmt
	{
		$$ = $1 //TODO 307
	}
|	ContinueStmt
	{
		$$ = $1 //TODO 308
	}
|	GotoStmt
	{
		$$ = $1 //TODO 309
	}
|	FallthroughStmt
	{
		$$ = $1 //TODO 310
	}
|	Block
	{
		$$ = $1 //TODO 311
	}
|	IfStmt
	{
		$$ = $1 //TODO 312
	}
|	SwitchStmt
	{
		$$ = $1 //TODO 313
	}
|	SelectStmt
	{
		$$ = $1 //TODO 314
	}
|	ForStmt
	{
		$$ = $1 //TODO 315
	}
|	DeferStmt
	{
		$$ = $1 //TODO 316
	}

StatementList:
	StatementList1 StatementList2
	{
		$$ = []StatementList{$1, $2} //TODO 317
	}

StatementList1:
	/* EMPTY */
	{
		$$ = nil //TODO 318
	}
|	Statement
	{
		$$ = $1 //TODO 319
	}

StatementList2:
	/* EMPTY */
	{
		$$ = []StatementList2(nil) //TODO 320
	}
|	StatementList2 ';' StatementList21
	{
		$$ = append($1.([]StatementList2), ";", $3) //TODO 321
	}

StatementList21:
	/* EMPTY */
	{
		$$ = nil //TODO 322
	}
|	Statement
	{
		$$ = $1 //TODO 323
	}

StructType:
	STRUCT '{' StructType1 '}'
	{
		$$ = []StructType{"struct", "{", $3, "}"} //TODO 324
	}

StructType1:
	/* EMPTY */
	{
		$$ = []StructType1(nil) //TODO 325
	}
|	StructType1 FieldDecl ';'
	{
		$$ = append($1.([]StructType1), $2, ";") //TODO 326
	}

SwitchStmt:
	ExprSwitchStmt
	{
		$$ = $1 //TODO 327
	}
|	TypeSwitchStmt
	{
		$$ = $1 //TODO 328
	}

Tag:
	STRING_LIT
	{
		$$ = $1 //TODO 329
	}

TopLevelDecl:
	Declaration
	{
		$$ = $1 //TODO 330
	}
|	FunctionDecl
	{
		$$ = $1 //TODO 331
	}
|	MethodDecl
	{
		$$ = $1 //TODO 332
	}

Type:
	TypeName
	{
		$$ = $1 //TODO 333
	}
|	TypeLit
	{
		$$ = $1 //TODO 334
	}
|	'(' Type ')'
	{
		$$ = []Type{"(", $2, ")"} //TODO 335
	}

TypeAssertion:
	'.' '(' Type ')'
	{
		$$ = []TypeAssertion{".", "(", $3, ")"} //TODO 336
	}

TypeCaseClause:
	TypeSwitchCase ':' StatementList
	{
		$$ = []TypeCaseClause{$1, ":", $3} //TODO 337
	}

TypeDecl:
	TYPE TypeDecl1
	{
		$$ = []TypeDecl{"type", $2} //TODO 338
	}

TypeDecl1:
	TypeSpec
	{
		$$ = $1 //TODO 339
	}
|	'(' TypeDecl11 ')'
	{
		$$ = []TypeDecl1{"(", $2, ")"} //TODO 340
	}

TypeDecl11:
	/* EMPTY */
	{
		$$ = nil //TODO 341
	}
|	TypeSpec TypeDecl111 TypeDecl112
	{
		$$ = []TypeDecl11{$1, $2, $3} //TODO 342
	}

TypeDecl111:
	/* EMPTY */
	{
		$$ = []TypeDecl111(nil) //TODO 343
	}
|	TypeDecl111 ';' TypeSpec
	{
		$$ = append($1.([]TypeDecl111), ";", $3) //TODO 344
	}

TypeDecl112:
	/* EMPTY */
	{
		$$ = nil //TODO 345
	}
|	';'
	{
		$$ = ";" //TODO 346
	}

TypeList:
	Type TypeList1
	{
		$$ = []TypeList{$1, $2} //TODO 347
	}

TypeList1:
	/* EMPTY */
	{
		$$ = []TypeList1(nil) //TODO 348
	}
|	TypeList1 ',' Type
	{
		$$ = append($1.([]TypeList1), ",", $3) //TODO 349
	}

TypeLit:
	ArrayType
	{
		$$ = $1 //TODO 350
	}
|	StructType
	{
		$$ = $1 //TODO 351
	}
|	PointerType
	{
		$$ = $1 //TODO 352
	}
|	FunctionType
	{
		$$ = $1 //TODO 353
	}
|	InterfaceType
	{
		$$ = $1 //TODO 354
	}
|	SliceType
	{
		$$ = $1 //TODO 355
	}
|	MapType
	{
		$$ = $1 //TODO 356
	}
|	ChannelType
	{
		$$ = $1 //TODO 357
	}

TypeName:
	IDENTIFIER
	{
		$$ = $1 //TODO 358
	}
|	QualifiedIdent
	{
		$$ = $1 //TODO 359
	}

TypeSpec:
	IDENTIFIER Type
	{
		$$ = []TypeSpec{$1, $2} //TODO 360
	}

TypeSwitchCase:
	CASE TypeList
	{
		$$ = []TypeSwitchCase{"case", $2} //TODO 361
	}
|	DEFAULT
	{
		$$ = "default" //TODO 362
	}

TypeSwitchGuard:
	PrimaryExpr '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, ".", "(", "type", ")"} //TODO 363
	}
|	IDENTIFIER TOK6 /* ":=" */ PrimaryExpr '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, ":=", $3, ".", "(", "type", ")"} //TODO 364
	}

TypeSwitchStmt:
	SWITCH TypeSwitchGuard '{' TypeSwitchStmt1 '}'
	{
		$$ = []TypeSwitchStmt{"switch", $2, "{", $4, "}"} //TODO 365
	}
|	SWITCH SimpleStmt ';' TypeSwitchGuard '{' TypeSwitchStmt2 '}'
	{
		$$ = []TypeSwitchStmt{"switch", $2, ";", $4, "{", $6, "}"} //TODO 366
	}

TypeSwitchStmt1:
	/* EMPTY */
	{
		$$ = []TypeSwitchStmt1(nil) //TODO 367
	}
|	TypeSwitchStmt1 TypeCaseClause
	{
		$$ = append($1.([]TypeSwitchStmt1), $2) //TODO 368
	}

TypeSwitchStmt2:
	/* EMPTY */
	{
		$$ = []TypeSwitchStmt2(nil) //TODO 369
	}
|	TypeSwitchStmt2 TypeCaseClause
	{
		$$ = append($1.([]TypeSwitchStmt2), $2) //TODO 370
	}

UnaryExpr:
	PrimaryExpr
	{
		$$ = $1 //TODO 371
	}
|	UnaryExpr1 UnaryExpr
	{
		$$ = []UnaryExpr{$1, $2} //TODO 372
	}

UnaryExpr1:
	'!'
	{
		$$ = "!" //TODO 373
	}
|	'&'
	{
		$$ = "&" //TODO 374
	}
|	'*'
	{
		$$ = "*" //TODO 375
	}
|	'+'
	{
		$$ = "+" //TODO 376
	}
|	'-'
	{
		$$ = "-" //TODO 377
	}
|	TOK17 /* "<-" */
	{
		$$ = "<-" //TODO 378
	}
|	'^'
	{
		$$ = "^" //TODO 379
	}

Value:
	Expression
	{
		$$ = $1 //TODO 380
	}
|	LiteralValue
	{
		$$ = $1 //TODO 381
	}

VarDecl:
	VAR VarDecl1
	{
		$$ = []VarDecl{"var", $2} //TODO 382
	}

VarDecl1:
	VarSpec
	{
		$$ = $1 //TODO 383
	}
|	'(' VarDecl11 ')'
	{
		$$ = []VarDecl1{"(", $2, ")"} //TODO 384
	}

VarDecl11:
	/* EMPTY */
	{
		$$ = nil //TODO 385
	}
|	VarSpec VarDecl111 VarDecl112
	{
		$$ = []VarDecl11{$1, $2, $3} //TODO 386
	}

VarDecl111:
	/* EMPTY */
	{
		$$ = []VarDecl111(nil) //TODO 387
	}
|	VarDecl111 ';' VarSpec
	{
		$$ = append($1.([]VarDecl111), ";", $3) //TODO 388
	}

VarDecl112:
	/* EMPTY */
	{
		$$ = nil //TODO 389
	}
|	';'
	{
		$$ = ";" //TODO 390
	}

VarSpec:
	IdentifierList VarSpec1
	{
		$$ = []VarSpec{$1, $2} //TODO 391
	}

VarSpec1:
	Type VarSpec11
	{
		$$ = []VarSpec1{$1, $2} //TODO 392
	}
|	'=' ExpressionList
	{
		$$ = []VarSpec1{"=", $2} //TODO 393
	}

VarSpec11:
	/* EMPTY */
	{
		$$ = nil //TODO 394
	}
|	'=' ExpressionList
	{
		$$ = []VarSpec11{"=", $2} //TODO 395
	}

%%

//TODO remove demo stuff below

var _parserResult interface{}

type (
	AnonymousField interface{}
	ArgumentList interface{}
	ArgumentList1 interface{}
	ArrayLength interface{}
	ArrayType interface{}
	Assignment interface{}
	Assignment1 interface{}
	BaseType interface{}
	BasicLit interface{}
	Block interface{}
	BreakStmt interface{}
	BreakStmt1 interface{}
	BuiltinArgs interface{}
	BuiltinArgs1 interface{}
	BuiltinCall interface{}
	BuiltinCall1 interface{}
	BuiltinCall11 interface{}
	Call interface{}
	Call1 interface{}
	Call11 interface{}
	Channel interface{}
	ChannelType interface{}
	ChannelType1 interface{}
	ChannelType11 interface{}
	CommCase interface{}
	CommCase1 interface{}
	CommClause interface{}
	CompositeLit interface{}
	Condition interface{}
	ConstDecl interface{}
	ConstDecl1 interface{}
	ConstDecl11 interface{}
	ConstDecl111 interface{}
	ConstDecl112 interface{}
	ConstSpec interface{}
	ConstSpec1 interface{}
	ConstSpec11 interface{}
	ContinueStmt interface{}
	ContinueStmt1 interface{}
	Conversion interface{}
	Conversion1 interface{}
	Declaration interface{}
	DeferStmt interface{}
	Element interface{}
	Element1 interface{}
	ElementIndex interface{}
	ElementList interface{}
	ElementList1 interface{}
	ElementType interface{}
	ExprCaseClause interface{}
	ExprSwitchCase interface{}
	ExprSwitchStmt interface{}
	ExprSwitchStmt1 interface{}
	ExprSwitchStmt2 interface{}
	ExprSwitchStmt3 interface{}
	Expression interface{}
	Expression1 interface{}
	ExpressionList interface{}
	ExpressionList1 interface{}
	ExpressionStmt interface{}
	FallthroughStmt interface{}
	FieldDecl interface{}
	FieldDecl1 interface{}
	FieldDecl2 interface{}
	FieldName interface{}
	ForClause interface{}
	ForClause1 interface{}
	ForClause2 interface{}
	ForClause3 interface{}
	ForStmt interface{}
	ForStmt1 interface{}
	ForStmt11 interface{}
	Function interface{}
	FunctionBody interface{}
	FunctionDecl interface{}
	FunctionDecl1 interface{}
	FunctionLit interface{}
	FunctionName interface{}
	FunctionType interface{}
	GoStmt interface{}
	GotoStmt interface{}
	IdentifierList interface{}
	IdentifierList1 interface{}
	IfStmt interface{}
	IfStmt1 interface{}
	IfStmt11 interface{}
	IfStmt2 interface{}
	IfStmt21 interface{}
	ImportDecl interface{}
	ImportDecl1 interface{}
	ImportDecl11 interface{}
	ImportDecl111 interface{}
	ImportDecl112 interface{}
	ImportPath interface{}
	ImportSpec interface{}
	ImportSpec1 interface{}
	ImportSpec11 interface{}
	IncDecStmt interface{}
	IncDecStmt1 interface{}
	Index interface{}
	InitStmt interface{}
	InterfaceType interface{}
	InterfaceType1 interface{}
	InterfaceTypeName interface{}
	Key interface{}
	KeyType interface{}
	Label interface{}
	LabeledStmt interface{}
	Literal interface{}
	LiteralType interface{}
	LiteralValue interface{}
	LiteralValue1 interface{}
	LiteralValue11 interface{}
	MapType interface{}
	MethodDecl interface{}
	MethodDecl1 interface{}
	MethodExpr interface{}
	MethodName interface{}
	MethodSpec interface{}
	Operand interface{}
	OperandName interface{}
	PackageClause interface{}
	PackageName interface{}
	ParameterDecl interface{}
	ParameterDecl1 interface{}
	ParameterDecl2 interface{}
	ParameterList interface{}
	ParameterList1 interface{}
	Parameters interface{}
	Parameters1 interface{}
	Parameters11 interface{}
	PointerType interface{}
	PostStmt interface{}
	PrimaryExpr interface{}
	QualifiedIdent interface{}
	RangeClause interface{}
	RangeClause1 interface{}
	Receiver interface{}
	ReceiverType interface{}
	RecvExpr interface{}
	RecvStmt interface{}
	RecvStmt1 interface{}
	Result interface{}
	ReturnStmt interface{}
	ReturnStmt1 interface{}
	SelectStmt interface{}
	SelectStmt1 interface{}
	Selector interface{}
	SendStmt interface{}
	ShortVarDecl interface{}
	Signature interface{}
	Signature1 interface{}
	SimpleStmt interface{}
	Slice interface{}
	Slice1 interface{}
	Slice11 interface{}
	Slice12 interface{}
	Slice2 interface{}
	Slice21 interface{}
	SliceType interface{}
	SourceFile interface{}
	SourceFile1 interface{}
	SourceFile2 interface{}
	Start interface{}
	Statement interface{}
	StatementList interface{}
	StatementList1 interface{}
	StatementList2 interface{}
	StatementList21 interface{}
	StructType interface{}
	StructType1 interface{}
	SwitchStmt interface{}
	Tag interface{}
	TopLevelDecl interface{}
	Type interface{}
	TypeAssertion interface{}
	TypeCaseClause interface{}
	TypeDecl interface{}
	TypeDecl1 interface{}
	TypeDecl11 interface{}
	TypeDecl111 interface{}
	TypeDecl112 interface{}
	TypeList interface{}
	TypeList1 interface{}
	TypeLit interface{}
	TypeName interface{}
	TypeSpec interface{}
	TypeSwitchCase interface{}
	TypeSwitchGuard interface{}
	TypeSwitchStmt interface{}
	TypeSwitchStmt1 interface{}
	TypeSwitchStmt2 interface{}
	UnaryExpr interface{}
	UnaryExpr1 interface{}
	Value interface{}
	VarDecl interface{}
	VarDecl1 interface{}
	VarDecl11 interface{}
	VarDecl111 interface{}
	VarDecl112 interface{}
	VarSpec interface{}
	VarSpec1 interface{}
	VarSpec11 interface{}
)
	
func _dump() {
	s := fmt.Sprintf("%#v", _parserResult)
	s = strings.Replace(s, "%", "%%", -1)
	s = strings.Replace(s, "{", "{%i\n", -1)
	s = strings.Replace(s, "}", "%u\n}", -1)
	s = strings.Replace(s, ", ", ",\n", -1)
	var buf bytes.Buffer
	strutil.IndentFormatter(&buf, ". ").Format(s)
	buf.WriteString("\n")
	a := strings.Split(buf.String(), "\n")
	for _, v := range a {
		if strings.HasSuffix(v, "(nil)") || strings.HasSuffix(v, "(nil),") {
			continue
		}
	
		fmt.Println(v)
	}
}

// End of demo stuff
