%{

//TODO Put your favorite license here
		
// yacc source generated by ebnf2y[1]
// at 2013-08-08 11:36:45.575428468 +0200 CEST.
//
// CAUTION: If this file is a Go source file (*.go), it was generated
// automatically by '$ go tool yacc' from a *.y file - DO NOT EDIT in that case!
// 
//   [1]: http://github.com/cznic/ebnf2y

package main //TODO real package name

//TODO required only be the demo _dump function
import (
	"bytes"
	"fmt"
	"strings"

	"github.com/cznic/strutil"
)

%}

%union {
	item interface{} //TODO insert real field(s)
}

%token	ANDAND
%token	ANDNOT
%token	ASSIGN_OP
%token	CHANCOMM
%token	COLAS
%token	COMM
%token	COMMCHAN
%token	DDD
%token	DEC
%token	EQ
%token	FLOAT_LIT
%token	GE
%token	IDENTIFIER_BUILT_IN
%token	IDENTIFIER_FIELD
%token	IDENTIFIER_LABEL
%token	IDENTIFIER_LIST
%token	IDENTIFIER_METHOD
%token	IDENTIFIER_OPERAND
%token	IDENTIFIER_SELECTOR
%token	IDENTIFIER_TYPE
%token	IMAGINARY_LIT
%token	INC
%token	INT_LIT
%token	LE
%token	LSH
%token	NAME
%token	NE
%token	OROR
%token	RSH
%token	RUNE_LIT
%token	STRING_LIT

%type	<item> 	/*TODO real type(s), if/where applicable */
	ANDAND
	ANDNOT
	ASSIGN_OP
	CHANCOMM
	COLAS
	COMM
	COMMCHAN
	DDD
	DEC
	EQ
	FLOAT_LIT
	GE
	IDENTIFIER_BUILT_IN
	IDENTIFIER_FIELD
	IDENTIFIER_LABEL
	IDENTIFIER_LIST
	IDENTIFIER_METHOD
	IDENTIFIER_OPERAND
	IDENTIFIER_SELECTOR
	IDENTIFIER_TYPE
	IMAGINARY_LIT
	INC
	INT_LIT
	LE
	LSH
	NAME
	NE
	OROR
	RSH
	RUNE_LIT
	STRING_LIT

%token BREAK
%token CASE
%token CHAN
%token CONST
%token CONTINUE
%token DEFAULT
%token DEFER
%token ELSE
%token FALLTHROUGH
%token FOR
%token FUNC
%token GO
%token GOTO
%token IF
%token IMPORT
%token INTERFACE
%token MAP
%token PACKAGE
%token RANGE
%token RETURN
%token SELECT
%token STRUCT
%token SWITCH
%token TYPE
%token VAR

%type	<item> 	/*TODO real type(s), if/where applicable */
	ArgumentList
	ArrayType
	Block
	Condition
	ConstDecl11
	ConstSpec
	Declaration
	Element
	ElementList1
	ElementType
	ExprSwitchStmt3
	Expression
	ExpressionList
	ExpressionList1
	FieldDecl1
	ForClause2
	Function
	IfStmt
	IfStmt2
	ImportDecl11
	ImportSpec
	InterfaceType1
	Label
	LiteralValue
	MapType
	MethodName
	ParameterDecl
	ParameterList1
	Parameters
	PrimaryExpr2
	Receiver
	Receiver1
	ReceiverType
	RecvExpr
	SelectStmt1
	SendStmt
	Signature
	SimpleStmt
	Slice2
	SliceType
	SourceFile
	SourceFile1
	SourceFile2
	Start
	Statement
	StatementList
	StatementList1
	StructType
	StructType1
	Type
	TypeDecl11
	TypeList1
	TypeName
	TypeSpec
	TypeSwitchGuard
	TypeSwitchStmt2
	UnaryExpr
	Value
	VarDecl11
	VarSpec

/*TODO %left, %right, ... declarations */

%start Start

%%

ArgumentList:
	ExpressionList
	{
		$$ = $1 //TODO 1
	}
|	ExpressionList DDD
	{
		$$ = []ArgumentList{$1, $2} //TODO 2
	}

ArrayType:
	'[' Expression ']' ElementType
	{
		$$ = []ArrayType{"[", $2, "]", $4} //TODO 3
	}

Block:
	'{' StatementList '}'
	{
		$$ = []Block{"{", $2, "}"} //TODO 4
	}

Condition:
	Expression
	{
		$$ = $1 //TODO 5
	}

ConstDecl11:
	/* EMPTY */
	{
		$$ = []ConstDecl11(nil) //TODO 6
	}
|	ConstDecl11 ConstSpec ';'
	{
		$$ = append($1.([]ConstDecl11), $2, ";") //TODO 7
	}

ConstSpec:
	IDENTIFIER_LIST
	{
		$$ = $1 //TODO 8
	}
|	IDENTIFIER_LIST '=' ExpressionList
	{
		$$ = []ConstSpec{$1, "=", $3} //TODO 9
	}
|	IDENTIFIER_LIST Type '=' ExpressionList
	{
		$$ = []ConstSpec{$1, $2, "=", $4} //TODO 10
	}

Declaration:
	CONST ConstSpec
	{
		$$ = []Declaration{"const", $2} //TODO 11
	}
|	CONST '(' ConstDecl11 ')'
	{
		$$ = []Declaration{"const", "(", $3, ")"} //TODO 12
	}
|	TYPE TypeSpec
	{
		$$ = []Declaration{"type", $2} //TODO 13
	}
|	TYPE '(' TypeDecl11 ')'
	{
		$$ = []Declaration{"type", "(", $3, ")"} //TODO 14
	}
|	VAR VarSpec
	{
		$$ = []Declaration{"var", $2} //TODO 15
	}
|	VAR '(' VarDecl11 ')'
	{
		$$ = []Declaration{"var", "(", $3, ")"} //TODO 16
	}

Element:
	Value
	{
		$$ = $1 //TODO 17
	}
|	IDENTIFIER_FIELD ':' Value
	{
		$$ = []Element{$1, ":", $3} //TODO 18
	}
|	Expression ':' Value
	{
		$$ = []Element{$1, ":", $3} //TODO 19
	}

ElementList1:
	/* EMPTY */
	{
		$$ = []ElementList1(nil) //TODO 20
	}
|	ElementList1 ',' Element
	{
		$$ = append($1.([]ElementList1), ",", $3) //TODO 21
	}

ElementType:
	Type
	{
		$$ = $1 //TODO 22
	}

ExprSwitchStmt3:
	/* EMPTY */
	{
		$$ = []ExprSwitchStmt3(nil) //TODO 23
	}
|	ExprSwitchStmt3 CASE ExpressionList ':' StatementList
	{
		$$ = append($1.([]ExprSwitchStmt3), "case", $3, ":", $5) //TODO 24
	}
|	ExprSwitchStmt3 DEFAULT ':' StatementList
	{
		$$ = append($1.([]ExprSwitchStmt3), "default", ":", $4) //TODO 25
	}

Expression:
	UnaryExpr
	{
		$$ = $1 //TODO 26
	}
|	Expression OROR UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 27
	}
|	Expression ANDAND UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 28
	}
|	Expression EQ UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 29
	}
|	Expression NE UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 30
	}
|	Expression '<' UnaryExpr
	{
		$$ = []Expression{$1, "<", $3} //TODO 31
	}
|	Expression LE UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 32
	}
|	Expression '>' UnaryExpr
	{
		$$ = []Expression{$1, ">", $3} //TODO 33
	}
|	Expression GE UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 34
	}
|	Expression '+' UnaryExpr
	{
		$$ = []Expression{$1, "+", $3} //TODO 35
	}
|	Expression '-' UnaryExpr
	{
		$$ = []Expression{$1, "-", $3} //TODO 36
	}
|	Expression '|' UnaryExpr
	{
		$$ = []Expression{$1, "|", $3} //TODO 37
	}
|	Expression '^' UnaryExpr
	{
		$$ = []Expression{$1, "^", $3} //TODO 38
	}
|	Expression '*' UnaryExpr
	{
		$$ = []Expression{$1, "*", $3} //TODO 39
	}
|	Expression '/' UnaryExpr
	{
		$$ = []Expression{$1, "/", $3} //TODO 40
	}
|	Expression '%' UnaryExpr
	{
		$$ = []Expression{$1, "%", $3} //TODO 41
	}
|	Expression LSH UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 42
	}
|	Expression RSH UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 43
	}
|	Expression '&' UnaryExpr
	{
		$$ = []Expression{$1, "&", $3} //TODO 44
	}
|	Expression ANDNOT UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 45
	}

ExpressionList:
	Expression ExpressionList1
	{
		$$ = []ExpressionList{$1, $2} //TODO 46
	}

ExpressionList1:
	/* EMPTY */
	{
		$$ = []ExpressionList1(nil) //TODO 47
	}
|	ExpressionList1 ',' Expression
	{
		$$ = append($1.([]ExpressionList1), ",", $3) //TODO 48
	}

FieldDecl1:
	IDENTIFIER_LIST Type
	{
		$$ = []FieldDecl1{$1, $2} //TODO 49
	}
|	TypeName
	{
		$$ = $1 //TODO 50
	}
|	'*' TypeName
	{
		$$ = []FieldDecl1{"*", $2} //TODO 51
	}

ForClause2:
	/* EMPTY */
	{
		$$ = nil //TODO 52
	}
|	Condition
	{
		$$ = $1 //TODO 53
	}

Function:
	Signature Block
	{
		$$ = []Function{$1, $2} //TODO 54
	}

IfStmt:
	IF Expression Block IfStmt2
	{
		$$ = []IfStmt{"if", $2, $3, $4} //TODO 55
	}
|	IF SimpleStmt ';' Expression Block IfStmt2
	{
		$$ = []IfStmt{"if", $2, ";", $4, $5, $6} //TODO 56
	}

IfStmt2:
	/* EMPTY */
	{
		$$ = nil //TODO 57
	}
|	ELSE IfStmt
	{
		$$ = []IfStmt2{"else", $2} //TODO 58
	}
|	ELSE Block
	{
		$$ = []IfStmt2{"else", $2} //TODO 59
	}

ImportDecl11:
	/* EMPTY */
	{
		$$ = []ImportDecl11(nil) //TODO 60
	}
|	ImportDecl11 ImportSpec ';'
	{
		$$ = append($1.([]ImportDecl11), $2, ";") //TODO 61
	}

ImportSpec:
	STRING_LIT
	{
		$$ = $1 //TODO 62
	}
|	'.' STRING_LIT
	{
		$$ = []ImportSpec{".", $2} //TODO 63
	}
|	NAME STRING_LIT
	{
		$$ = []ImportSpec{$1, $2} //TODO 64
	}

InterfaceType1:
	/* EMPTY */
	{
		$$ = []InterfaceType1(nil) //TODO 65
	}
|	InterfaceType1 MethodName Signature ';'
	{
		$$ = append($1.([]InterfaceType1), $2, $3, ";") //TODO 66
	}
|	InterfaceType1 TypeName ';'
	{
		$$ = append($1.([]InterfaceType1), $2, ";") //TODO 67
	}

Label:
	IDENTIFIER_LABEL
	{
		$$ = $1 //TODO 68
	}

LiteralValue:
	'{' '}'
	{
		$$ = []LiteralValue{"{", "}"} //TODO 69
	}
|	'{' Element ElementList1 '}'
	{
		$$ = []LiteralValue{"{", $2, $3, "}"} //TODO 70
	}
|	'{' Element ElementList1 ',' '}'
	{
		$$ = []LiteralValue{"{", $2, $3, ",", "}"} //TODO 71
	}

MapType:
	MAP '[' Type ']' ElementType
	{
		$$ = []MapType{"map", "[", $3, "]", $5} //TODO 72
	}

MethodName:
	IDENTIFIER_METHOD
	{
		$$ = $1 //TODO 73
	}

ParameterDecl:
	Type
	{
		$$ = $1 //TODO 74
	}
|	DDD Type
	{
		$$ = []ParameterDecl{$1, $2} //TODO 75
	}
|	IDENTIFIER_LIST Type
	{
		$$ = []ParameterDecl{$1, $2} //TODO 76
	}
|	IDENTIFIER_LIST DDD Type
	{
		$$ = []ParameterDecl{$1, $2, $3} //TODO 77
	}

ParameterList1:
	/* EMPTY */
	{
		$$ = []ParameterList1(nil) //TODO 78
	}
|	ParameterList1 ',' ParameterDecl
	{
		$$ = append($1.([]ParameterList1), ",", $3) //TODO 79
	}

Parameters:
	'(' ')'
	{
		$$ = []Parameters{"(", ")"} //TODO 80
	}
|	'(' ParameterDecl ParameterList1 ')'
	{
		$$ = []Parameters{"(", $2, $3, ")"} //TODO 81
	}
|	'(' ParameterDecl ParameterList1 ',' ')'
	{
		$$ = []Parameters{"(", $2, $3, ",", ")"} //TODO 82
	}

PrimaryExpr2:
	/* EMPTY */
	{
		$$ = []PrimaryExpr2(nil) //TODO 83
	}
|	PrimaryExpr2 '.' IDENTIFIER_SELECTOR
	{
		$$ = append($1.([]PrimaryExpr2), ".", $3) //TODO 84
	}
|	PrimaryExpr2 '[' Expression ']'
	{
		$$ = append($1.([]PrimaryExpr2), "[", $3, "]") //TODO 85
	}
|	PrimaryExpr2 '[' ':' Slice2 ']'
	{
		$$ = append($1.([]PrimaryExpr2), "[", ":", $4, "]") //TODO 86
	}
|	PrimaryExpr2 '[' Expression ':' Slice2 ']'
	{
		$$ = append($1.([]PrimaryExpr2), "[", $3, ":", $5, "]") //TODO 87
	}
|	PrimaryExpr2 '.' '(' Type ')'
	{
		$$ = append($1.([]PrimaryExpr2), ".", "(", $4, ")") //TODO 88
	}
|	PrimaryExpr2 '(' ')'
	{
		$$ = append($1.([]PrimaryExpr2), "(", ")") //TODO 89
	}
|	PrimaryExpr2 '(' ArgumentList ')'
	{
		$$ = append($1.([]PrimaryExpr2), "(", $3, ")") //TODO 90
	}
|	PrimaryExpr2 '(' ArgumentList ',' ')'
	{
		$$ = append($1.([]PrimaryExpr2), "(", $3, ",", ")") //TODO 91
	}

Receiver:
	'(' Receiver1 IDENTIFIER_TYPE ')'
	{
		$$ = []Receiver{"(", $2, $3, ")"} //TODO 92
	}
|	'(' Receiver1 '*' IDENTIFIER_TYPE ')'
	{
		$$ = []Receiver{"(", $2, "*", $4, ")"} //TODO 93
	}

Receiver1:
	/* EMPTY */
	{
		$$ = nil //TODO 94
	}
|	NAME
	{
		$$ = $1 //TODO 95
	}

ReceiverType:
	TypeName
	{
		$$ = $1 //TODO 96
	}
|	'(' '*' TypeName ')'
	{
		$$ = []ReceiverType{"(", "*", $3, ")"} //TODO 97
	}
|	'(' ReceiverType ')'
	{
		$$ = []ReceiverType{"(", $2, ")"} //TODO 98
	}

RecvExpr:
	Expression
	{
		$$ = $1 //TODO 99
	}

SelectStmt1:
	/* EMPTY */
	{
		$$ = []SelectStmt1(nil) //TODO 100
	}
|	SelectStmt1 CASE SendStmt ':' StatementList
	{
		$$ = append($1.([]SelectStmt1), "case", $3, ":", $5) //TODO 101
	}
|	SelectStmt1 CASE RecvExpr ':' StatementList
	{
		$$ = append($1.([]SelectStmt1), "case", $3, ":", $5) //TODO 102
	}
|	SelectStmt1 CASE ExpressionList '=' RecvExpr ':' StatementList
	{
		$$ = append($1.([]SelectStmt1), "case", $3, "=", $5, ":", $7) //TODO 103
	}
|	SelectStmt1 CASE IDENTIFIER_LIST COLAS RecvExpr ':' StatementList
	{
		$$ = append($1.([]SelectStmt1), "case", $3, $4, $5, ":", $7) //TODO 104
	}
|	SelectStmt1 DEFAULT ':' StatementList
	{
		$$ = append($1.([]SelectStmt1), "default", ":", $4) //TODO 105
	}

SendStmt:
	Expression COMM Expression
	{
		$$ = []SendStmt{$1, $2, $3} //TODO 106
	}

Signature:
	Parameters
	{
		$$ = $1 //TODO 107
	}
|	Parameters Parameters
	{
		$$ = []Signature{$1, $2} //TODO 108
	}
|	Parameters Type
	{
		$$ = []Signature{$1, $2} //TODO 109
	}

SimpleStmt:
	/* EMPTY */
	{
		$$ = nil //TODO 110
	}
|	Expression
	{
		$$ = $1 //TODO 111
	}
|	SendStmt
	{
		$$ = $1 //TODO 112
	}
|	Expression INC
	{
		$$ = []SimpleStmt{$1, $2} //TODO 113
	}
|	Expression DEC
	{
		$$ = []SimpleStmt{$1, $2} //TODO 114
	}
|	ExpressionList ASSIGN_OP ExpressionList
	{
		$$ = []SimpleStmt{$1, $2, $3} //TODO 115
	}
|	IDENTIFIER_LIST COLAS ExpressionList
	{
		$$ = []SimpleStmt{$1, $2, $3} //TODO 116
	}

Slice2:
	/* EMPTY */
	{
		$$ = nil //TODO 117
	}
|	Expression
	{
		$$ = $1 //TODO 118
	}

SliceType:
	'[' ']' ElementType
	{
		$$ = []SliceType{"[", "]", $3} //TODO 119
	}

SourceFile:
	PACKAGE NAME ';' SourceFile1 SourceFile2
	{
		$$ = []SourceFile{"package", $2, ";", $4, $5} //TODO 120
	}

SourceFile1:
	/* EMPTY */
	{
		$$ = []SourceFile1(nil) //TODO 121
	}
|	SourceFile1 IMPORT ImportSpec ';'
	{
		$$ = append($1.([]SourceFile1), "import", $3, ";") //TODO 122
	}
|	SourceFile1 IMPORT '(' ImportDecl11 ')' ';'
	{
		$$ = append($1.([]SourceFile1), "import", "(", $4, ")", ";") //TODO 123
	}

SourceFile2:
	/* EMPTY */
	{
		$$ = []SourceFile2(nil) //TODO 124
	}
|	SourceFile2 Declaration ';'
	{
		$$ = append($1.([]SourceFile2), $2, ";") //TODO 125
	}
|	SourceFile2 FUNC NAME Function ';'
	{
		$$ = append($1.([]SourceFile2), "func", $3, $4, ";") //TODO 126
	}
|	SourceFile2 FUNC NAME Signature ';'
	{
		$$ = append($1.([]SourceFile2), "func", $3, $4, ";") //TODO 127
	}
|	SourceFile2 FUNC Receiver NAME Function ';'
	{
		$$ = append($1.([]SourceFile2), "func", $3, $4, $5, ";") //TODO 128
	}
|	SourceFile2 FUNC Receiver NAME Signature ';'
	{
		$$ = append($1.([]SourceFile2), "func", $3, $4, $5, ";") //TODO 129
	}

Start:
	SourceFile
	{
		_parserResult = $1 //TODO 130
	}

Statement:
	Declaration
	{
		$$ = $1 //TODO 131
	}
|	IDENTIFIER_LABEL Statement
	{
		$$ = []Statement{$1, $2} //TODO 132
	}
|	SimpleStmt
	{
		$$ = $1 //TODO 133
	}
|	GO Expression
	{
		$$ = []Statement{"go", $2} //TODO 134
	}
|	RETURN
	{
		$$ = "return" //TODO 135
	}
|	RETURN ExpressionList
	{
		$$ = []Statement{"return", $2} //TODO 136
	}
|	BREAK
	{
		$$ = "break" //TODO 137
	}
|	BREAK Label
	{
		$$ = []Statement{"break", $2} //TODO 138
	}
|	CONTINUE
	{
		$$ = "continue" //TODO 139
	}
|	CONTINUE Label
	{
		$$ = []Statement{"continue", $2} //TODO 140
	}
|	GOTO Label
	{
		$$ = []Statement{"goto", $2} //TODO 141
	}
|	FALLTHROUGH
	{
		$$ = "fallthrough" //TODO 142
	}
|	Block
	{
		$$ = $1 //TODO 143
	}
|	IfStmt
	{
		$$ = $1 //TODO 144
	}
|	SWITCH '{' ExprSwitchStmt3 '}'
	{
		$$ = []Statement{"switch", "{", $3, "}"} //TODO 145
	}
|	SWITCH SimpleStmt ';' '{' ExprSwitchStmt3 '}'
	{
		$$ = []Statement{"switch", $2, ";", "{", $5, "}"} //TODO 146
	}
|	SWITCH Expression '{' ExprSwitchStmt3 '}'
	{
		$$ = []Statement{"switch", $2, "{", $4, "}"} //TODO 147
	}
|	SWITCH SimpleStmt ';' Expression '{' ExprSwitchStmt3 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, "{", $6, "}"} //TODO 148
	}
|	SWITCH TypeSwitchGuard '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, "{", $4, "}"} //TODO 149
	}
|	SWITCH SimpleStmt ';' TypeSwitchGuard '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, "{", $6, "}"} //TODO 150
	}
|	SELECT '{' SelectStmt1 '}'
	{
		$$ = []Statement{"select", "{", $3, "}"} //TODO 151
	}
|	FOR Block
	{
		$$ = []Statement{"for", $2} //TODO 152
	}
|	FOR Condition Block
	{
		$$ = []Statement{"for", $2, $3} //TODO 153
	}
|	FOR ';' ForClause2 ';' Block
	{
		$$ = []Statement{"for", ";", $3, ";", $5} //TODO 154
	}
|	FOR ';' ForClause2 ';' SimpleStmt Block
	{
		$$ = []Statement{"for", ";", $3, ";", $5, $6} //TODO 155
	}
|	FOR SimpleStmt ';' ForClause2 ';' Block
	{
		$$ = []Statement{"for", $2, ";", $4, ";", $6} //TODO 156
	}
|	FOR SimpleStmt ';' ForClause2 ';' SimpleStmt Block
	{
		$$ = []Statement{"for", $2, ";", $4, ";", $6, $7} //TODO 157
	}
|	FOR ExpressionList '=' RANGE Expression Block
	{
		$$ = []Statement{"for", $2, "=", "range", $5, $6} //TODO 158
	}
|	FOR IDENTIFIER_LIST COLAS RANGE Expression Block
	{
		$$ = []Statement{"for", $2, $3, "range", $5, $6} //TODO 159
	}
|	DEFER Expression
	{
		$$ = []Statement{"defer", $2} //TODO 160
	}

StatementList:
	StatementList1
	{
		$$ = $1 //TODO 161
	}

StatementList1:
	/* EMPTY */
	{
		$$ = []StatementList1(nil) //TODO 162
	}
|	StatementList1 Statement ';'
	{
		$$ = append($1.([]StatementList1), $2, ";") //TODO 163
	}

StructType:
	STRUCT '{' StructType1 '}'
	{
		$$ = []StructType{"struct", "{", $3, "}"} //TODO 164
	}

StructType1:
	/* EMPTY */
	{
		$$ = []StructType1(nil) //TODO 165
	}
|	StructType1 FieldDecl1 ';'
	{
		$$ = append($1.([]StructType1), $2, ";") //TODO 166
	}
|	StructType1 FieldDecl1 STRING_LIT ';'
	{
		$$ = append($1.([]StructType1), $2, $3, ";") //TODO 167
	}

Type:
	TypeName
	{
		$$ = $1 //TODO 168
	}
|	ArrayType
	{
		$$ = $1 //TODO 169
	}
|	StructType
	{
		$$ = $1 //TODO 170
	}
|	'*' Type
	{
		$$ = []Type{"*", $2} //TODO 171
	}
|	FUNC Signature
	{
		$$ = []Type{"func", $2} //TODO 172
	}
|	INTERFACE '{' InterfaceType1 '}'
	{
		$$ = []Type{"interface", "{", $3, "}"} //TODO 173
	}
|	SliceType
	{
		$$ = $1 //TODO 174
	}
|	MapType
	{
		$$ = $1 //TODO 175
	}
|	CHAN CHANCOMM ElementType
	{
		$$ = []Type{"chan", $2, $3} //TODO 176
	}
|	COMMCHAN ElementType
	{
		$$ = []Type{$1, $2} //TODO 177
	}
|	'(' Type ')'
	{
		$$ = []Type{"(", $2, ")"} //TODO 178
	}

TypeDecl11:
	/* EMPTY */
	{
		$$ = []TypeDecl11(nil) //TODO 179
	}
|	TypeDecl11 TypeSpec ';'
	{
		$$ = append($1.([]TypeDecl11), $2, ";") //TODO 180
	}

TypeList1:
	/* EMPTY */
	{
		$$ = []TypeList1(nil) //TODO 181
	}
|	TypeList1 ',' Type
	{
		$$ = append($1.([]TypeList1), ",", $3) //TODO 182
	}

TypeName:
	IDENTIFIER_TYPE
	{
		$$ = $1 //TODO 183
	}

TypeSpec:
	NAME Type
	{
		$$ = []TypeSpec{$1, $2} //TODO 184
	}

TypeSwitchGuard:
	INT_LIT PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, ".", "(", "type", ")"} //TODO 185
	}
|	FLOAT_LIT PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, ".", "(", "type", ")"} //TODO 186
	}
|	IMAGINARY_LIT PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, ".", "(", "type", ")"} //TODO 187
	}
|	RUNE_LIT PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, ".", "(", "type", ")"} //TODO 188
	}
|	STRING_LIT PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, ".", "(", "type", ")"} //TODO 189
	}
|	StructType LiteralValue PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, ".", "(", "type", ")"} //TODO 190
	}
|	ArrayType LiteralValue PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, ".", "(", "type", ")"} //TODO 191
	}
|	'[' DDD ']' ElementType LiteralValue PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{"[", $2, "]", $4, $5, $6, ".", "(", "type", ")"} //TODO 192
	}
|	SliceType LiteralValue PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, ".", "(", "type", ")"} //TODO 193
	}
|	MapType LiteralValue PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, ".", "(", "type", ")"} //TODO 194
	}
|	TypeName LiteralValue PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, ".", "(", "type", ")"} //TODO 195
	}
|	FUNC Function PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{"func", $2, $3, ".", "(", "type", ")"} //TODO 196
	}
|	IDENTIFIER_OPERAND PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, ".", "(", "type", ")"} //TODO 197
	}
|	ReceiverType '.' MethodName PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, ".", $3, $4, ".", "(", "type", ")"} //TODO 198
	}
|	'(' Expression ')' PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{"(", $2, ")", $4, ".", "(", "type", ")"} //TODO 199
	}
|	Type '(' Expression ')' PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, "(", $3, ")", $5, ".", "(", "type", ")"} //TODO 200
	}
|	Type '(' Expression ',' ')' PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, "(", $3, ",", ")", $6, ".", "(", "type", ")"} //TODO 201
	}
|	IDENTIFIER_BUILT_IN '(' ')' PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, "(", ")", $4, ".", "(", "type", ")"} //TODO 202
	}
|	IDENTIFIER_BUILT_IN '(' Type ')' PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, "(", $3, ")", $5, ".", "(", "type", ")"} //TODO 203
	}
|	IDENTIFIER_BUILT_IN '(' Type ',' ArgumentList ')' PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, "(", $3, ",", $5, ")", $7, ".", "(", "type", ")"} //TODO 204
	}
|	IDENTIFIER_BUILT_IN '(' ArgumentList ')' PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, "(", $3, ")", $5, ".", "(", "type", ")"} //TODO 205
	}
|	IDENTIFIER_BUILT_IN '(' Type ',' ')' PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, "(", $3, ",", ")", $6, ".", "(", "type", ")"} //TODO 206
	}
|	IDENTIFIER_BUILT_IN '(' Type ',' ArgumentList ',' ')' PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, "(", $3, ",", $5, ",", ")", $8, ".", "(", "type", ")"} //TODO 207
	}
|	IDENTIFIER_BUILT_IN '(' ArgumentList ',' ')' PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, "(", $3, ",", ")", $6, ".", "(", "type", ")"} //TODO 208
	}
|	IDENTIFIER_LIST COLAS INT_LIT PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, $4, ".", "(", "type", ")"} //TODO 209
	}
|	IDENTIFIER_LIST COLAS FLOAT_LIT PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, $4, ".", "(", "type", ")"} //TODO 210
	}
|	IDENTIFIER_LIST COLAS IMAGINARY_LIT PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, $4, ".", "(", "type", ")"} //TODO 211
	}
|	IDENTIFIER_LIST COLAS RUNE_LIT PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, $4, ".", "(", "type", ")"} //TODO 212
	}
|	IDENTIFIER_LIST COLAS STRING_LIT PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, $4, ".", "(", "type", ")"} //TODO 213
	}
|	IDENTIFIER_LIST COLAS StructType LiteralValue PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, $4, $5, ".", "(", "type", ")"} //TODO 214
	}
|	IDENTIFIER_LIST COLAS ArrayType LiteralValue PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, $4, $5, ".", "(", "type", ")"} //TODO 215
	}
|	IDENTIFIER_LIST COLAS '[' DDD ']' ElementType LiteralValue PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, "[", $4, "]", $6, $7, $8, ".", "(", "type", ")"} //TODO 216
	}
|	IDENTIFIER_LIST COLAS SliceType LiteralValue PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, $4, $5, ".", "(", "type", ")"} //TODO 217
	}
|	IDENTIFIER_LIST COLAS MapType LiteralValue PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, $4, $5, ".", "(", "type", ")"} //TODO 218
	}
|	IDENTIFIER_LIST COLAS TypeName LiteralValue PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, $4, $5, ".", "(", "type", ")"} //TODO 219
	}
|	IDENTIFIER_LIST COLAS FUNC Function PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, "func", $4, $5, ".", "(", "type", ")"} //TODO 220
	}
|	IDENTIFIER_LIST COLAS IDENTIFIER_OPERAND PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, $4, ".", "(", "type", ")"} //TODO 221
	}
|	IDENTIFIER_LIST COLAS ReceiverType '.' MethodName PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, ".", $5, $6, ".", "(", "type", ")"} //TODO 222
	}
|	IDENTIFIER_LIST COLAS '(' Expression ')' PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, "(", $4, ")", $6, ".", "(", "type", ")"} //TODO 223
	}
|	IDENTIFIER_LIST COLAS Type '(' Expression ')' PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, "(", $5, ")", $7, ".", "(", "type", ")"} //TODO 224
	}
|	IDENTIFIER_LIST COLAS Type '(' Expression ',' ')' PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, "(", $5, ",", ")", $8, ".", "(", "type", ")"} //TODO 225
	}
|	IDENTIFIER_LIST COLAS IDENTIFIER_BUILT_IN '(' ')' PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, "(", ")", $6, ".", "(", "type", ")"} //TODO 226
	}
|	IDENTIFIER_LIST COLAS IDENTIFIER_BUILT_IN '(' Type ')' PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, "(", $5, ")", $7, ".", "(", "type", ")"} //TODO 227
	}
|	IDENTIFIER_LIST COLAS IDENTIFIER_BUILT_IN '(' Type ',' ArgumentList ')' PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, "(", $5, ",", $7, ")", $9, ".", "(", "type", ")"} //TODO 228
	}
|	IDENTIFIER_LIST COLAS IDENTIFIER_BUILT_IN '(' ArgumentList ')' PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, "(", $5, ")", $7, ".", "(", "type", ")"} //TODO 229
	}
|	IDENTIFIER_LIST COLAS IDENTIFIER_BUILT_IN '(' Type ',' ')' PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, "(", $5, ",", ")", $8, ".", "(", "type", ")"} //TODO 230
	}
|	IDENTIFIER_LIST COLAS IDENTIFIER_BUILT_IN '(' Type ',' ArgumentList ',' ')' PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, "(", $5, ",", $7, ",", ")", $10, ".", "(", "type", ")"} //TODO 231
	}
|	IDENTIFIER_LIST COLAS IDENTIFIER_BUILT_IN '(' ArgumentList ',' ')' PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, "(", $5, ",", ")", $8, ".", "(", "type", ")"} //TODO 232
	}

TypeSwitchStmt2:
	/* EMPTY */
	{
		$$ = []TypeSwitchStmt2(nil) //TODO 233
	}
|	TypeSwitchStmt2 CASE Type TypeList1 ':' StatementList
	{
		$$ = append($1.([]TypeSwitchStmt2), "case", $3, $4, ":", $6) //TODO 234
	}
|	TypeSwitchStmt2 DEFAULT ':' StatementList
	{
		$$ = append($1.([]TypeSwitchStmt2), "default", ":", $4) //TODO 235
	}

UnaryExpr:
	INT_LIT PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, $2} //TODO 236
	}
|	FLOAT_LIT PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, $2} //TODO 237
	}
|	IMAGINARY_LIT PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, $2} //TODO 238
	}
|	RUNE_LIT PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, $2} //TODO 239
	}
|	STRING_LIT PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, $2} //TODO 240
	}
|	StructType LiteralValue PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, $2, $3} //TODO 241
	}
|	ArrayType LiteralValue PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, $2, $3} //TODO 242
	}
|	'[' DDD ']' ElementType LiteralValue PrimaryExpr2
	{
		$$ = []UnaryExpr{"[", $2, "]", $4, $5, $6} //TODO 243
	}
|	SliceType LiteralValue PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, $2, $3} //TODO 244
	}
|	MapType LiteralValue PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, $2, $3} //TODO 245
	}
|	TypeName LiteralValue PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, $2, $3} //TODO 246
	}
|	FUNC Function PrimaryExpr2
	{
		$$ = []UnaryExpr{"func", $2, $3} //TODO 247
	}
|	IDENTIFIER_OPERAND PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, $2} //TODO 248
	}
|	ReceiverType '.' MethodName PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, ".", $3, $4} //TODO 249
	}
|	'(' Expression ')' PrimaryExpr2
	{
		$$ = []UnaryExpr{"(", $2, ")", $4} //TODO 250
	}
|	Type '(' Expression ')' PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, "(", $3, ")", $5} //TODO 251
	}
|	Type '(' Expression ',' ')' PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, "(", $3, ",", ")", $6} //TODO 252
	}
|	IDENTIFIER_BUILT_IN '(' ')' PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, "(", ")", $4} //TODO 253
	}
|	IDENTIFIER_BUILT_IN '(' Type ')' PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, "(", $3, ")", $5} //TODO 254
	}
|	IDENTIFIER_BUILT_IN '(' Type ',' ArgumentList ')' PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, "(", $3, ",", $5, ")", $7} //TODO 255
	}
|	IDENTIFIER_BUILT_IN '(' ArgumentList ')' PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, "(", $3, ")", $5} //TODO 256
	}
|	IDENTIFIER_BUILT_IN '(' Type ',' ')' PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, "(", $3, ",", ")", $6} //TODO 257
	}
|	IDENTIFIER_BUILT_IN '(' Type ',' ArgumentList ',' ')' PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, "(", $3, ",", $5, ",", ")", $8} //TODO 258
	}
|	IDENTIFIER_BUILT_IN '(' ArgumentList ',' ')' PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, "(", $3, ",", ")", $6} //TODO 259
	}
|	'+' UnaryExpr
	{
		$$ = []UnaryExpr{"+", $2} //TODO 260
	}
|	'-' UnaryExpr
	{
		$$ = []UnaryExpr{"-", $2} //TODO 261
	}
|	'!' UnaryExpr
	{
		$$ = []UnaryExpr{"!", $2} //TODO 262
	}
|	'^' UnaryExpr
	{
		$$ = []UnaryExpr{"^", $2} //TODO 263
	}
|	'*' UnaryExpr
	{
		$$ = []UnaryExpr{"*", $2} //TODO 264
	}
|	'&' UnaryExpr
	{
		$$ = []UnaryExpr{"&", $2} //TODO 265
	}
|	COMM UnaryExpr
	{
		$$ = []UnaryExpr{$1, $2} //TODO 266
	}

Value:
	Expression
	{
		$$ = $1 //TODO 267
	}
|	LiteralValue
	{
		$$ = $1 //TODO 268
	}

VarDecl11:
	/* EMPTY */
	{
		$$ = []VarDecl11(nil) //TODO 269
	}
|	VarDecl11 VarSpec ';'
	{
		$$ = append($1.([]VarDecl11), $2, ";") //TODO 270
	}

VarSpec:
	IDENTIFIER_LIST Type
	{
		$$ = []VarSpec{$1, $2} //TODO 271
	}
|	IDENTIFIER_LIST Type '=' ExpressionList
	{
		$$ = []VarSpec{$1, $2, "=", $4} //TODO 272
	}
|	IDENTIFIER_LIST '=' ExpressionList
	{
		$$ = []VarSpec{$1, "=", $3} //TODO 273
	}

%%

//TODO remove demo stuff below

var _parserResult interface{}

type (
	ArgumentList interface{}
	ArrayType interface{}
	Block interface{}
	Condition interface{}
	ConstDecl11 interface{}
	ConstSpec interface{}
	Declaration interface{}
	Element interface{}
	ElementList1 interface{}
	ElementType interface{}
	ExprSwitchStmt3 interface{}
	Expression interface{}
	ExpressionList interface{}
	ExpressionList1 interface{}
	FieldDecl1 interface{}
	ForClause2 interface{}
	Function interface{}
	IfStmt interface{}
	IfStmt2 interface{}
	ImportDecl11 interface{}
	ImportSpec interface{}
	InterfaceType1 interface{}
	Label interface{}
	LiteralValue interface{}
	MapType interface{}
	MethodName interface{}
	ParameterDecl interface{}
	ParameterList1 interface{}
	Parameters interface{}
	PrimaryExpr2 interface{}
	Receiver interface{}
	Receiver1 interface{}
	ReceiverType interface{}
	RecvExpr interface{}
	SelectStmt1 interface{}
	SendStmt interface{}
	Signature interface{}
	SimpleStmt interface{}
	Slice2 interface{}
	SliceType interface{}
	SourceFile interface{}
	SourceFile1 interface{}
	SourceFile2 interface{}
	Start interface{}
	Statement interface{}
	StatementList interface{}
	StatementList1 interface{}
	StructType interface{}
	StructType1 interface{}
	Type interface{}
	TypeDecl11 interface{}
	TypeList1 interface{}
	TypeName interface{}
	TypeSpec interface{}
	TypeSwitchGuard interface{}
	TypeSwitchStmt2 interface{}
	UnaryExpr interface{}
	Value interface{}
	VarDecl11 interface{}
	VarSpec interface{}
)
	
func _dump() {
	s := fmt.Sprintf("%#v", _parserResult)
	s = strings.Replace(s, "%", "%%", -1)
	s = strings.Replace(s, "{", "{%i\n", -1)
	s = strings.Replace(s, "}", "%u\n}", -1)
	s = strings.Replace(s, ", ", ",\n", -1)
	var buf bytes.Buffer
	strutil.IndentFormatter(&buf, ". ").Format(s)
	buf.WriteString("\n")
	a := strings.Split(buf.String(), "\n")
	for _, v := range a {
		if strings.HasSuffix(v, "(nil)") || strings.HasSuffix(v, "(nil),") {
			continue
		}
	
		fmt.Println(v)
	}
}

// End of demo stuff
