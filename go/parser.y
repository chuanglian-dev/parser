%{

//TODO Put your favorite license here
		
// yacc source generated by ebnf2y[1]
// at 2013-08-05 11:57:22.50492299 +0200 CEST.
//
// CAUTION: If this file is a Go source file (*.go), it was generated
// automatically by '$ go tool yacc' from a *.y file - DO NOT EDIT in that case!
// 
//   [1]: http://github.com/cznic/ebnf2y

package main //TODO real package name

//TODO required only be the demo _dump function
import (
	"bytes"
	"fmt"
	"strings"

	"github.com/cznic/strutil"
)

%}

%union {
	item interface{} //TODO insert real field(s)
}

%token	ANDAND
%token	ANDNOT
%token	ASSIGN_OP
%token	BUILT_IN
%token	CHANCOMM
%token	COLAS
%token	COMM
%token	COMMCHAN
%token	DDD
%token	DEC
%token	EQ
%token	FLOAT_LIT
%token	GE
%token	IDENTIFIER
%token	IMAGINARY_LIT
%token	INC
%token	INT_LIT
%token	LBRACE
%token	LE
%token	LSH
%token	NE
%token	OPERAND_NAME_OR_TYPE_NAME
%token	OPT_COMMA_RBRACE
%token	OPT_COMMA_RPAREN
%token	OROR
%token	RSH
%token	RUNE_LIT
%token	STRING_LIT

%type	<item> 	/*TODO real type(s), if/where applicable */
	ANDAND
	ANDNOT
	ASSIGN_OP
	BUILT_IN
	CHANCOMM
	COLAS
	COMM
	COMMCHAN
	DDD
	DEC
	EQ
	FLOAT_LIT
	GE
	IDENTIFIER
	IMAGINARY_LIT
	INC
	INT_LIT
	LBRACE
	LE
	LSH
	NE
	OPERAND_NAME_OR_TYPE_NAME
	OPT_COMMA_RBRACE
	OPT_COMMA_RPAREN
	OROR
	RSH
	RUNE_LIT
	STRING_LIT

%token BREAK
%token CASE
%token CHAN
%token CONST
%token CONTINUE
%token DEFAULT
%token DEFER
%token ELSE
%token FALLTHROUGH
%token FOR
%token FUNC
%token GO
%token GOTO
%token IF
%token IMPORT
%token INTERFACE
%token MAP
%token PACKAGE
%token RANGE
%token RETURN
%token SELECT
%token STRUCT
%token SWITCH
%token TYPE
%token VAR

%type	<item> 	/*TODO real type(s), if/where applicable */
	ArgumentList
	ArrayType
	Block
	Condition
	ConstDecl11
	ConstSpec
	Declaration
	Element
	ElementList
	ElementList1
	ElementType
	ExprSwitchStmt2
	ExprSwitchStmt3
	Expression
	ExpressionList
	ExpressionList1
	FieldDecl2
	ForClause2
	ForClause3
	Function
	FunctionName
	IdentifierList
	IdentifierList1
	IfStmt
	IfStmt2
	ImportDecl11
	ImportPath
	ImportSpec
	InterfaceType1
	Label
	LiteralValue
	MapType
	MethodDecl1
	MethodName
	ParameterList1
	Parameters
	PrimaryExpr
	SelectStmt1
	SendStmt
	Signature
	SimpleStmt
	Slice2
	SliceType
	SourceFile
	SourceFile1
	SourceFile2
	Start
	StatementList
	StatementList1
	StructType
	StructType1
	Type
	TypeDecl11
	TypeList1
	TypeLit
	TypeSpec
	TypeSwitchStmt2
	UnaryExpr
	VarDecl11
	VarSpec

/*TODO %left, %right, ... declarations */

%left		NotPackage
%left		LPACKAGE

%left		NotParen
%left		'('

%left		')'
%left		PreferToRightParen

%start Start

%%

ArgumentList:
	ExpressionList
	{
		$$ = $1 //TODO 1
	}
|	ExpressionList DDD
	{
		$$ = []ArgumentList{$1, $2} //TODO 2
	}

ArrayType:
	'[' Expression ']' ElementType
	{
		$$ = []ArrayType{"[", $2, "]", $4} //TODO 3
	}

Block:
	'{' StatementList '}'
	{
		$$ = []Block{"{", $2, "}"} //TODO 4
	}

Condition:
	Expression
	{
		$$ = $1 //TODO 5
	}

ConstDecl11:
	/* EMPTY */
	{
		$$ = []ConstDecl11(nil) //TODO 6
	}
|	ConstDecl11 ConstSpec ';'
	{
		$$ = append($1.([]ConstDecl11), $2, ";") //TODO 7
	}

ConstSpec:
	IdentifierList
	{
		$$ = $1 //TODO 8
	}
|	IdentifierList '=' ExpressionList
	{
		$$ = []ConstSpec{$1, "=", $3} //TODO 9
	}
|	IdentifierList Type '=' ExpressionList
	{
		$$ = []ConstSpec{$1, $2, "=", $4} //TODO 10
	}

Declaration:
	CONST ConstSpec
	{
		$$ = []Declaration{"const", $2} //TODO 11
	}
|	CONST '(' ConstDecl11 ')'
	{
		$$ = []Declaration{"const", "(", $3, ")"} //TODO 12
	}
|	TYPE TypeSpec
	{
		$$ = []Declaration{"type", $2} //TODO 13
	}
|	TYPE '(' TypeDecl11 ')'
	{
		$$ = []Declaration{"type", "(", $3, ")"} //TODO 14
	}
|	VAR VarSpec
	{
		$$ = []Declaration{"var", $2} //TODO 15
	}
|	VAR '(' VarDecl11 ')'
	{
		$$ = []Declaration{"var", "(", $3, ")"} //TODO 16
	}

Element:
	Expression
	{
		$$ = $1 //TODO 17
	}
|	IDENTIFIER ':' Expression
	{
		$$ = []Element{$1, ":", $3} //TODO 18
	}
|	Expression ':' Expression
	{
		$$ = []Element{$1, ":", $3} //TODO 19
	}
|	LiteralValue
	{
		$$ = $1 //TODO 20
	}
|	IDENTIFIER ':' LiteralValue
	{
		$$ = []Element{$1, ":", $3} //TODO 21
	}
|	Expression ':' LiteralValue
	{
		$$ = []Element{$1, ":", $3} //TODO 22
	}

ElementList:
	Element ElementList1
	{
		$$ = []ElementList{$1, $2} //TODO 23
	}

ElementList1:
	/* EMPTY */
	{
		$$ = []ElementList1(nil) //TODO 24
	}
|	ElementList1 ',' Element
	{
		$$ = append($1.([]ElementList1), ",", $3) //TODO 25
	}

ElementType:
	Type
	{
		$$ = $1 //TODO 26
	}

ExprSwitchStmt2:
	/* EMPTY */
	{
		$$ = nil //TODO 27
	}
|	Expression
	{
		$$ = $1 //TODO 28
	}

ExprSwitchStmt3:
	/* EMPTY */
	{
		$$ = []ExprSwitchStmt3(nil) //TODO 29
	}
|	ExprSwitchStmt3 CASE ExpressionList ':' StatementList
	{
		$$ = append($1.([]ExprSwitchStmt3), "case", $3, ":", $5) //TODO 30
	}
|	ExprSwitchStmt3 DEFAULT ':' StatementList
	{
		$$ = append($1.([]ExprSwitchStmt3), "default", ":", $4) //TODO 31
	}

Expression:
	UnaryExpr
	{
		$$ = $1 //TODO 32
	}
|	Expression OROR UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 33
	}
|	Expression ANDAND UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 34
	}
|	Expression EQ UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 35
	}
|	Expression NE UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 36
	}
|	Expression '<' UnaryExpr
	{
		$$ = []Expression{$1, "<", $3} //TODO 37
	}
|	Expression LE UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 38
	}
|	Expression '>' UnaryExpr
	{
		$$ = []Expression{$1, ">", $3} //TODO 39
	}
|	Expression GE UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 40
	}
|	Expression '+' UnaryExpr
	{
		$$ = []Expression{$1, "+", $3} //TODO 41
	}
|	Expression '-' UnaryExpr
	{
		$$ = []Expression{$1, "-", $3} //TODO 42
	}
|	Expression '|' UnaryExpr
	{
		$$ = []Expression{$1, "|", $3} //TODO 43
	}
|	Expression '^' UnaryExpr
	{
		$$ = []Expression{$1, "^", $3} //TODO 44
	}
|	Expression '*' UnaryExpr
	{
		$$ = []Expression{$1, "*", $3} //TODO 45
	}
|	Expression '/' UnaryExpr
	{
		$$ = []Expression{$1, "/", $3} //TODO 46
	}
|	Expression '%' UnaryExpr
	{
		$$ = []Expression{$1, "%", $3} //TODO 47
	}
|	Expression LSH UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 48
	}
|	Expression RSH UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 49
	}
|	Expression '&' UnaryExpr
	{
		$$ = []Expression{$1, "&", $3} //TODO 50
	}
|	Expression ANDNOT UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 51
	}

ExpressionList:
	Expression ExpressionList1
	{
		$$ = []ExpressionList{$1, $2} //TODO 52
	}

ExpressionList1:
	/* EMPTY */
	{
		$$ = []ExpressionList1(nil) //TODO 53
	}
|	ExpressionList1 ',' Expression
	{
		$$ = append($1.([]ExpressionList1), ",", $3) //TODO 54
	}

FieldDecl2:
	/* EMPTY */
	{
		$$ = nil //TODO 55
	}
|	STRING_LIT
	{
		$$ = $1 //TODO 56
	}

ForClause2:
	/* EMPTY */
	{
		$$ = nil //TODO 57
	}
|	Condition
	{
		$$ = $1 //TODO 58
	}

ForClause3:
	/* EMPTY */
	{
		$$ = nil //TODO 59
	}
|	SimpleStmt
	{
		$$ = $1 //TODO 60
	}

Function:
	Signature Block
	{
		$$ = []Function{$1, $2} //TODO 61
	}

FunctionName:
	IDENTIFIER
	{
		$$ = $1 //TODO 62
	}

IdentifierList:
	IDENTIFIER IdentifierList1
	{
		$$ = []IdentifierList{$1, $2} //TODO 63
	}

IdentifierList1:
	/* EMPTY */
	{
		$$ = []IdentifierList1(nil) //TODO 64
	}
|	IdentifierList1 ',' IDENTIFIER
	{
		$$ = append($1.([]IdentifierList1), ",", $3) //TODO 65
	}

IfStmt:
	IF Expression Block IfStmt2
	{
		$$ = []IfStmt{"if", $2, $3, $4} //TODO 66
	}
|	IF ';' Expression Block IfStmt2
	{
		$$ = []IfStmt{"if", ";", $3, $4, $5} //TODO 67
	}
|	IF SimpleStmt ';' Expression Block IfStmt2
	{
		$$ = []IfStmt{"if", $2, ";", $4, $5, $6} //TODO 68
	}

IfStmt2:
	/* EMPTY */
	{
		$$ = nil //TODO 69
	}
|	ELSE IfStmt
	{
		$$ = []IfStmt2{"else", $2} //TODO 70
	}
|	ELSE Block
	{
		$$ = []IfStmt2{"else", $2} //TODO 71
	}

ImportDecl11:
	/* EMPTY */
	{
		$$ = []ImportDecl11(nil) //TODO 72
	}
|	ImportDecl11 ImportSpec ';'
	{
		$$ = append($1.([]ImportDecl11), $2, ";") //TODO 73
	}

ImportPath:
	STRING_LIT
	{
		$$ = $1 //TODO 74
	}

ImportSpec:
	ImportPath
	{
		$$ = $1 //TODO 75
	}
|	'.' ImportPath
	{
		$$ = []ImportSpec{".", $2} //TODO 76
	}
|	IDENTIFIER ImportPath
	{
		$$ = []ImportSpec{$1, $2} //TODO 77
	}

InterfaceType1:
	/* EMPTY */
	{
		$$ = []InterfaceType1(nil) //TODO 78
	}
|	InterfaceType1 MethodName Signature ';'
	{
		$$ = append($1.([]InterfaceType1), $2, $3, ";") //TODO 79
	}
|	InterfaceType1 OPERAND_NAME_OR_TYPE_NAME ';'
	{
		$$ = append($1.([]InterfaceType1), $2, ";") //TODO 80
	}

Label:
	IDENTIFIER
	{
		$$ = $1 //TODO 81
	}

LiteralValue:
	'{' '}'
	{
		$$ = []LiteralValue{"{", "}"} //TODO 82
	}
|	'{' ElementList OPT_COMMA_RBRACE
	{
		$$ = []LiteralValue{"{", $2, $3} //TODO 83
	}

MapType:
	MAP '[' Type ']' ElementType
	{
		$$ = []MapType{"map", "[", $3, "]", $5} //TODO 84
	}

MethodDecl1:
	Function
	{
		$$ = $1 //TODO 85
	}
|	Signature
	{
		$$ = $1 //TODO 86
	}

MethodName:
	IDENTIFIER
	{
		$$ = $1 //TODO 87
	}

ParameterList1:
	/* EMPTY */
	{
		$$ = []ParameterList1(nil) //TODO 88
	}
|	ParameterList1 ',' IDENTIFIER Type
	{
		$$ = append($1.([]ParameterList1), ",", $3, $4) //TODO 89
	}
|	ParameterList1 ',' IDENTIFIER DDD Type
	{
		$$ = append($1.([]ParameterList1), ",", $3, $4, $5) //TODO 90
	}
|	ParameterList1 ',' OPERAND_NAME_OR_TYPE_NAME
	{
		$$ = append($1.([]ParameterList1), ",", $3) //TODO 91
	}
|	ParameterList1 ',' TypeLit
	{
		$$ = append($1.([]ParameterList1), ",", $3) //TODO 92
	}
|	ParameterList1 ',' DDD TypeLit
	{
		$$ = append($1.([]ParameterList1), ",", $3, $4) //TODO 93
	}

Parameters:
	'(' ')'
	{
		$$ = []Parameters{"(", ")"} //TODO 94
	}
|	IDENTIFIER Type ParameterList1 OPT_COMMA_RPAREN
	{
		$$ = []Parameters{$1, $2, $3, $4} //TODO 95
	}
|	IDENTIFIER DDD Type ParameterList1 OPT_COMMA_RPAREN
	{
		$$ = []Parameters{$1, $2, $3, $4, $5} //TODO 96
	}
|	OPERAND_NAME_OR_TYPE_NAME ParameterList1 OPT_COMMA_RPAREN
	{
		$$ = []Parameters{$1, $2, $3} //TODO 97
	}
|	TypeLit ParameterList1 OPT_COMMA_RPAREN
	{
		$$ = []Parameters{$1, $2, $3} //TODO 98
	}
|	DDD TypeLit ParameterList1 OPT_COMMA_RPAREN
	{
		$$ = []Parameters{$1, $2, $3, $4} //TODO 99
	}

PrimaryExpr:
	INT_LIT
	{
		$$ = $1 //TODO 100
	}
|	FLOAT_LIT
	{
		$$ = $1 //TODO 101
	}
|	IMAGINARY_LIT
	{
		$$ = $1 //TODO 102
	}
|	RUNE_LIT
	{
		$$ = $1 //TODO 103
	}
|	STRING_LIT
	{
		$$ = $1 //TODO 104
	}
|	StructType LiteralValue
	{
		$$ = []PrimaryExpr{$1, $2} //TODO 105
	}
|	ArrayType LiteralValue
	{
		$$ = []PrimaryExpr{$1, $2} //TODO 106
	}
|	'[' DDD ']' ElementType LiteralValue
	{
		$$ = []PrimaryExpr{"[", $2, "]", $4, $5} //TODO 107
	}
|	SliceType LiteralValue
	{
		$$ = []PrimaryExpr{$1, $2} //TODO 108
	}
|	MapType LiteralValue
	{
		$$ = []PrimaryExpr{$1, $2} //TODO 109
	}
|	OPERAND_NAME_OR_TYPE_NAME LBRACE '}'
	{
		$$ = []PrimaryExpr{$1, $2, "}"} //TODO 110
	}
|	OPERAND_NAME_OR_TYPE_NAME LBRACE ElementList OPT_COMMA_RBRACE
	{
		$$ = []PrimaryExpr{$1, $2, $3, $4} //TODO 111
	}
|	FUNC Function
	{
		$$ = []PrimaryExpr{"func", $2} //TODO 112
	}
|	OPERAND_NAME_OR_TYPE_NAME
	{
		$$ = $1 //TODO 113
	}
|	IDENTIFIER Type '.' MethodName
	{
		$$ = []PrimaryExpr{$1, $2, ".", $4} //TODO 114
	}
|	IDENTIFIER DDD Type '.' MethodName
	{
		$$ = []PrimaryExpr{$1, $2, $3, ".", $5} //TODO 115
	}
|	OPERAND_NAME_OR_TYPE_NAME '.' MethodName
	{
		$$ = []PrimaryExpr{$1, ".", $3} //TODO 116
	}
|	TypeLit '.' MethodName
	{
		$$ = []PrimaryExpr{$1, ".", $3} //TODO 117
	}
|	DDD TypeLit '.' MethodName
	{
		$$ = []PrimaryExpr{$1, $2, ".", $4} //TODO 118
	}
|	'(' Expression ')'
	{
		$$ = []PrimaryExpr{"(", $2, ")"} //TODO 119
	}
|	Type '(' Expression OPT_COMMA_RPAREN
	{
		$$ = []PrimaryExpr{$1, "(", $3, $4} //TODO 120
	}
|	BUILT_IN '(' Type OPT_COMMA_RPAREN
	{
		$$ = []PrimaryExpr{$1, "(", $3, $4} //TODO 121
	}
|	BUILT_IN '(' Type ',' ArgumentList OPT_COMMA_RPAREN
	{
		$$ = []PrimaryExpr{$1, "(", $3, ",", $5, $6} //TODO 122
	}
|	BUILT_IN '(' ArgumentList OPT_COMMA_RPAREN
	{
		$$ = []PrimaryExpr{$1, "(", $3, $4} //TODO 123
	}
|	PrimaryExpr '.' IDENTIFIER
	{
		$$ = []PrimaryExpr{$1, ".", $3} //TODO 124
	}
|	PrimaryExpr '[' Expression ']'
	{
		$$ = []PrimaryExpr{$1, "[", $3, "]"} //TODO 125
	}
|	PrimaryExpr '[' ':' Slice2 ']'
	{
		$$ = []PrimaryExpr{$1, "[", ":", $4, "]"} //TODO 126
	}
|	PrimaryExpr '[' Expression ':' Slice2 ']'
	{
		$$ = []PrimaryExpr{$1, "[", $3, ":", $5, "]"} //TODO 127
	}
|	PrimaryExpr '.' '(' Type ')'
	{
		$$ = []PrimaryExpr{$1, ".", "(", $4, ")"} //TODO 128
	}
|	PrimaryExpr '(' ')'
	{
		$$ = []PrimaryExpr{$1, "(", ")"} //TODO 129
	}
|	PrimaryExpr ArgumentList OPT_COMMA_RPAREN
	{
		$$ = []PrimaryExpr{$1, $2, $3} //TODO 130
	}

SelectStmt1:
	/* EMPTY */
	{
		$$ = []SelectStmt1(nil) //TODO 131
	}
|	SelectStmt1 CASE SendStmt ':' StatementList
	{
		$$ = append($1.([]SelectStmt1), "case", $3, ":", $5) //TODO 132
	}
|	SelectStmt1 CASE Expression ':' StatementList
	{
		$$ = append($1.([]SelectStmt1), "case", $3, ":", $5) //TODO 133
	}
|	SelectStmt1 CASE ExpressionList '=' Expression ':' StatementList
	{
		$$ = append($1.([]SelectStmt1), "case", $3, "=", $5, ":", $7) //TODO 134
	}
|	SelectStmt1 CASE IdentifierList COLAS Expression ':' StatementList
	{
		$$ = append($1.([]SelectStmt1), "case", $3, $4, $5, ":", $7) //TODO 135
	}
|	SelectStmt1 DEFAULT ':' StatementList
	{
		$$ = append($1.([]SelectStmt1), "default", ":", $4) //TODO 136
	}

SendStmt:
	Expression COMM Expression
	{
		$$ = []SendStmt{$1, $2, $3} //TODO 137
	}

Signature:
	Parameters %prec NotParen
	{
		$$ = $1 //TODO 138
	}
|	Parameters Parameters
	{
		$$ = []Signature{$1, $2} //TODO 139
	}
|	Parameters Type
	{
		$$ = []Signature{$1, $2} //TODO 140
	}

SimpleStmt:
	Expression
	{
		$$ = $1 //TODO 141
	}
|	SendStmt
	{
		$$ = $1 //TODO 142
	}
|	Expression INC
	{
		$$ = []SimpleStmt{$1, $2} //TODO 143
	}
|	Expression DEC
	{
		$$ = []SimpleStmt{$1, $2} //TODO 144
	}
|	ExpressionList ASSIGN_OP ExpressionList
	{
		$$ = []SimpleStmt{$1, $2, $3} //TODO 145
	}
|	IdentifierList COLAS ExpressionList
	{
		$$ = []SimpleStmt{$1, $2, $3} //TODO 146
	}

Slice2:
	/* EMPTY */
	{
		$$ = nil //TODO 147
	}
|	Expression
	{
		$$ = $1 //TODO 148
	}

SliceType:
	'[' ']' ElementType
	{
		$$ = []SliceType{"[", "]", $3} //TODO 149
	}

SourceFile:
	PACKAGE IDENTIFIER ';' SourceFile1 SourceFile2
	{
		$$ = []SourceFile{"package", $2, ";", $4, $5} //TODO 150
	}

SourceFile1:
	/* EMPTY */
	{
		$$ = []SourceFile1(nil) //TODO 151
	}
|	SourceFile1 IMPORT ImportSpec ';'
	{
		$$ = append($1.([]SourceFile1), "import", $3, ";") //TODO 152
	}
|	SourceFile1 IMPORT '(' ImportDecl11 ')' ';'
	{
		$$ = append($1.([]SourceFile1), "import", "(", $4, ")", ";") //TODO 153
	}

SourceFile2:
	/* EMPTY */
	{
		$$ = []SourceFile2(nil) //TODO 154
	}
|	SourceFile2 Declaration ';'
	{
		$$ = append($1.([]SourceFile2), $2, ";") //TODO 155
	}
|	SourceFile2 FUNC FunctionName Function ';'
	{
		$$ = append($1.([]SourceFile2), "func", $3, $4, ";") //TODO 156
	}
|	SourceFile2 FUNC FunctionName Signature ';'
	{
		$$ = append($1.([]SourceFile2), "func", $3, $4, ";") //TODO 157
	}
|	SourceFile2 FUNC '(' IDENTIFIER ')' MethodName MethodDecl1 ';'
	{
		$$ = append($1.([]SourceFile2), "func", "(", $4, ")", $6, $7, ";") //TODO 158
	}
|	SourceFile2 FUNC '(' '*' IDENTIFIER ')' MethodName MethodDecl1 ';'
	{
		$$ = append($1.([]SourceFile2), "func", "(", "*", $5, ")", $7, $8, ";") //TODO 159
	}
|	SourceFile2 FUNC '(' IDENTIFIER IDENTIFIER ')' MethodName MethodDecl1 ';'
	{
		$$ = append($1.([]SourceFile2), "func", "(", $4, $5, ")", $7, $8, ";") //TODO 160
	}
|	SourceFile2 FUNC '(' IDENTIFIER '*' IDENTIFIER ')' MethodName MethodDecl1 ';'
	{
		$$ = append($1.([]SourceFile2), "func", "(", $4, "*", $6, ")", $8, $9, ";") //TODO 161
	}

Start:
	SourceFile
	{
		_parserResult = $1 //TODO 162
	}

StatementList:
	StatementList1
	{
		$$ = $1 //TODO 163
	}

StatementList1:
	/* EMPTY */
	{
		$$ = []StatementList1(nil) //TODO 164
	}
|	StatementList1 ';'
	{
		$$ = append($1.([]StatementList1), ";") //TODO 165
	}
|	StatementList1 Declaration ';'
	{
		$$ = append($1.([]StatementList1), $2, ";") //TODO 166
	}
|	StatementList1 Label ':' ';'
	{
		$$ = append($1.([]StatementList1), $2, ":", ";") //TODO 167
	}
|	StatementList1 SimpleStmt ';'
	{
		$$ = append($1.([]StatementList1), $2, ";") //TODO 168
	}
|	StatementList1 GO Expression ';'
	{
		$$ = append($1.([]StatementList1), "go", $3, ";") //TODO 169
	}
|	StatementList1 RETURN ';'
	{
		$$ = append($1.([]StatementList1), "return", ";") //TODO 170
	}
|	StatementList1 RETURN ExpressionList ';'
	{
		$$ = append($1.([]StatementList1), "return", $3, ";") //TODO 171
	}
|	StatementList1 BREAK ';'
	{
		$$ = append($1.([]StatementList1), "break", ";") //TODO 172
	}
|	StatementList1 BREAK Label ';'
	{
		$$ = append($1.([]StatementList1), "break", $3, ";") //TODO 173
	}
|	StatementList1 CONTINUE ';'
	{
		$$ = append($1.([]StatementList1), "continue", ";") //TODO 174
	}
|	StatementList1 CONTINUE Label ';'
	{
		$$ = append($1.([]StatementList1), "continue", $3, ";") //TODO 175
	}
|	StatementList1 GOTO Label ';'
	{
		$$ = append($1.([]StatementList1), "goto", $3, ";") //TODO 176
	}
|	StatementList1 FALLTHROUGH ';'
	{
		$$ = append($1.([]StatementList1), "fallthrough", ";") //TODO 177
	}
|	StatementList1 Block ';'
	{
		$$ = append($1.([]StatementList1), $2, ";") //TODO 178
	}
|	StatementList1 IfStmt ';'
	{
		$$ = append($1.([]StatementList1), $2, ";") //TODO 179
	}
|	StatementList1 SWITCH ExprSwitchStmt2 '{' ExprSwitchStmt3 '}' ';'
	{
		$$ = append($1.([]StatementList1), "switch", $3, "{", $5, "}", ";") //TODO 180
	}
|	StatementList1 SWITCH ';' ExprSwitchStmt2 '{' ExprSwitchStmt3 '}' ';'
	{
		$$ = append($1.([]StatementList1), "switch", ";", $4, "{", $6, "}", ";") //TODO 181
	}
|	StatementList1 SWITCH SimpleStmt ';' ExprSwitchStmt2 '{' ExprSwitchStmt3 '}' ';'
	{
		$$ = append($1.([]StatementList1), "switch", $3, ";", $5, "{", $7, "}", ";") //TODO 182
	}
|	StatementList1 SWITCH PrimaryExpr '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}' ';'
	{
		$$ = append($1.([]StatementList1), "switch", $3, ".", "(", "type", ")", "{", $9, "}", ";") //TODO 183
	}
|	StatementList1 SWITCH ';' PrimaryExpr '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}' ';'
	{
		$$ = append($1.([]StatementList1), "switch", ";", $4, ".", "(", "type", ")", "{", $10, "}", ";") //TODO 184
	}
|	StatementList1 SWITCH SimpleStmt ';' PrimaryExpr '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}' ';'
	{
		$$ = append($1.([]StatementList1), "switch", $3, ";", $5, ".", "(", "type", ")", "{", $11, "}", ";") //TODO 185
	}
|	StatementList1 SWITCH IDENTIFIER COLAS PrimaryExpr '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}' ';'
	{
		$$ = append($1.([]StatementList1), "switch", $3, $4, $5, ".", "(", "type", ")", "{", $11, "}", ";") //TODO 186
	}
|	StatementList1 SWITCH ';' IDENTIFIER COLAS PrimaryExpr '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}' ';'
	{
		$$ = append($1.([]StatementList1), "switch", ";", $4, $5, $6, ".", "(", "type", ")", "{", $12, "}", ";") //TODO 187
	}
|	StatementList1 SWITCH SimpleStmt ';' IDENTIFIER COLAS PrimaryExpr '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}' ';'
	{
		$$ = append($1.([]StatementList1), "switch", $3, ";", $5, $6, $7, ".", "(", "type", ")", "{", $13, "}", ";") //TODO 188
	}
|	StatementList1 SELECT '{' SelectStmt1 '}' ';'
	{
		$$ = append($1.([]StatementList1), "select", "{", $4, "}", ";") //TODO 189
	}
|	StatementList1 FOR Block ';'
	{
		$$ = append($1.([]StatementList1), "for", $3, ";") //TODO 190
	}
|	StatementList1 FOR Condition Block ';'
	{
		$$ = append($1.([]StatementList1), "for", $3, $4, ";") //TODO 191
	}
|	StatementList1 FOR ';' ForClause2 ';' ForClause3 Block ';'
	{
		$$ = append($1.([]StatementList1), "for", ";", $4, ";", $6, $7, ";") //TODO 192
	}
|	StatementList1 FOR SimpleStmt ';' ForClause2 ';' ForClause3 Block ';'
	{
		$$ = append($1.([]StatementList1), "for", $3, ";", $5, ";", $7, $8, ";") //TODO 193
	}
|	StatementList1 FOR ExpressionList '=' RANGE Expression Block ';'
	{
		$$ = append($1.([]StatementList1), "for", $3, "=", "range", $6, $7, ";") //TODO 194
	}
|	StatementList1 FOR IdentifierList COLAS RANGE Expression Block ';'
	{
		$$ = append($1.([]StatementList1), "for", $3, $4, "range", $6, $7, ";") //TODO 195
	}
|	StatementList1 DEFER Expression ';'
	{
		$$ = append($1.([]StatementList1), "defer", $3, ";") //TODO 196
	}

StructType:
	STRUCT '{' StructType1 '}'
	{
		$$ = []StructType{"struct", "{", $3, "}"} //TODO 197
	}

StructType1:
	/* EMPTY */
	{
		$$ = []StructType1(nil) //TODO 198
	}
|	StructType1 IdentifierList Type FieldDecl2 ';'
	{
		$$ = append($1.([]StructType1), $2, $3, $4, ";") //TODO 199
	}
|	StructType1 OPERAND_NAME_OR_TYPE_NAME FieldDecl2 ';'
	{
		$$ = append($1.([]StructType1), $2, $3, ";") //TODO 200
	}
|	StructType1 '*' OPERAND_NAME_OR_TYPE_NAME FieldDecl2 ';'
	{
		$$ = append($1.([]StructType1), "*", $3, $4, ";") //TODO 201
	}

Type:
	OPERAND_NAME_OR_TYPE_NAME
	{
		$$ = $1 //TODO 202
	}
|	TypeLit
	{
		$$ = $1 //TODO 203
	}
|	'(' Type ')'
	{
		$$ = []Type{"(", $2, ")"} //TODO 204
	}

TypeDecl11:
	/* EMPTY */
	{
		$$ = []TypeDecl11(nil) //TODO 205
	}
|	TypeDecl11 TypeSpec ';'
	{
		$$ = append($1.([]TypeDecl11), $2, ";") //TODO 206
	}

TypeList1:
	/* EMPTY */
	{
		$$ = []TypeList1(nil) //TODO 207
	}
|	TypeList1 ',' Type
	{
		$$ = append($1.([]TypeList1), ",", $3) //TODO 208
	}

TypeLit:
	ArrayType
	{
		$$ = $1 //TODO 209
	}
|	StructType
	{
		$$ = $1 //TODO 210
	}
|	'*' Type
	{
		$$ = []TypeLit{"*", $2} //TODO 211
	}
|	FUNC Signature
	{
		$$ = []TypeLit{"func", $2} //TODO 212
	}
|	INTERFACE '{' InterfaceType1 '}'
	{
		$$ = []TypeLit{"interface", "{", $3, "}"} //TODO 213
	}
|	SliceType
	{
		$$ = $1 //TODO 214
	}
|	MapType
	{
		$$ = $1 //TODO 215
	}
|	CHAN ElementType
	{
		$$ = []TypeLit{"chan", $2} //TODO 216
	}
|	CHANCOMM ElementType
	{
		$$ = []TypeLit{$1, $2} //TODO 217
	}
|	COMMCHAN ElementType
	{
		$$ = []TypeLit{$1, $2} //TODO 218
	}

TypeSpec:
	IDENTIFIER Type
	{
		$$ = []TypeSpec{$1, $2} //TODO 219
	}

TypeSwitchStmt2:
	/* EMPTY */
	{
		$$ = []TypeSwitchStmt2(nil) //TODO 220
	}
|	TypeSwitchStmt2 CASE Type TypeList1 ':' StatementList
	{
		$$ = append($1.([]TypeSwitchStmt2), "case", $3, $4, ":", $6) //TODO 221
	}
|	TypeSwitchStmt2 DEFAULT ':' StatementList
	{
		$$ = append($1.([]TypeSwitchStmt2), "default", ":", $4) //TODO 222
	}

UnaryExpr:
	PrimaryExpr
	{
		$$ = $1 //TODO 223
	}
|	'+' UnaryExpr
	{
		$$ = []UnaryExpr{"+", $2} //TODO 224
	}
|	'-' UnaryExpr
	{
		$$ = []UnaryExpr{"-", $2} //TODO 225
	}
|	'!' UnaryExpr
	{
		$$ = []UnaryExpr{"!", $2} //TODO 226
	}
|	'^' UnaryExpr
	{
		$$ = []UnaryExpr{"^", $2} //TODO 227
	}
|	'*' UnaryExpr
	{
		$$ = []UnaryExpr{"*", $2} //TODO 228
	}
|	'&' UnaryExpr
	{
		$$ = []UnaryExpr{"&", $2} //TODO 229
	}
|	COMM UnaryExpr
	{
		$$ = []UnaryExpr{$1, $2} //TODO 230
	}

VarDecl11:
	/* EMPTY */
	{
		$$ = []VarDecl11(nil) //TODO 231
	}
|	VarDecl11 VarSpec ';'
	{
		$$ = append($1.([]VarDecl11), $2, ";") //TODO 232
	}

VarSpec:
	IdentifierList Type
	{
		$$ = []VarSpec{$1, $2} //TODO 233
	}
|	IdentifierList Type '=' ExpressionList
	{
		$$ = []VarSpec{$1, $2, "=", $4} //TODO 234
	}
|	IdentifierList '=' ExpressionList
	{
		$$ = []VarSpec{$1, "=", $3} //TODO 235
	}

%%

//TODO remove demo stuff below

var _parserResult interface{}

type (
	ArgumentList interface{}
	ArrayType interface{}
	Block interface{}
	Condition interface{}
	ConstDecl11 interface{}
	ConstSpec interface{}
	Declaration interface{}
	Element interface{}
	ElementList interface{}
	ElementList1 interface{}
	ElementType interface{}
	ExprSwitchStmt2 interface{}
	ExprSwitchStmt3 interface{}
	Expression interface{}
	ExpressionList interface{}
	ExpressionList1 interface{}
	FieldDecl2 interface{}
	ForClause2 interface{}
	ForClause3 interface{}
	Function interface{}
	FunctionName interface{}
	IdentifierList interface{}
	IdentifierList1 interface{}
	IfStmt interface{}
	IfStmt2 interface{}
	ImportDecl11 interface{}
	ImportPath interface{}
	ImportSpec interface{}
	InterfaceType1 interface{}
	Label interface{}
	LiteralValue interface{}
	MapType interface{}
	MethodDecl1 interface{}
	MethodName interface{}
	ParameterList1 interface{}
	Parameters interface{}
	PrimaryExpr interface{}
	SelectStmt1 interface{}
	SendStmt interface{}
	Signature interface{}
	SimpleStmt interface{}
	Slice2 interface{}
	SliceType interface{}
	SourceFile interface{}
	SourceFile1 interface{}
	SourceFile2 interface{}
	Start interface{}
	StatementList interface{}
	StatementList1 interface{}
	StructType interface{}
	StructType1 interface{}
	Type interface{}
	TypeDecl11 interface{}
	TypeList1 interface{}
	TypeLit interface{}
	TypeSpec interface{}
	TypeSwitchStmt2 interface{}
	UnaryExpr interface{}
	VarDecl11 interface{}
	VarSpec interface{}
)
	
func _dump() {
	s := fmt.Sprintf("%#v", _parserResult)
	s = strings.Replace(s, "%", "%%", -1)
	s = strings.Replace(s, "{", "{%i\n", -1)
	s = strings.Replace(s, "}", "%u\n}", -1)
	s = strings.Replace(s, ", ", ",\n", -1)
	var buf bytes.Buffer
	strutil.IndentFormatter(&buf, ". ").Format(s)
	buf.WriteString("\n")
	a := strings.Split(buf.String(), "\n")
	for _, v := range a {
		if strings.HasSuffix(v, "(nil)") || strings.HasSuffix(v, "(nil),") {
			continue
		}
	
		fmt.Println(v)
	}
}

// End of demo stuff
