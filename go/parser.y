%{

//TODO Put your favorite license here
		
// yacc source generated by ebnf2y[1]
// at 2013-08-08 13:49:23.851930617 +0200 CEST.
//
// CAUTION: If this file is a Go source file (*.go), it was generated
// automatically by '$ go tool yacc' from a *.y file - DO NOT EDIT in that case!
// 
//   [1]: http://github.com/cznic/ebnf2y

package main //TODO real package name

//TODO required only be the demo _dump function
import (
	"bytes"
	"fmt"
	"strings"

	"github.com/cznic/strutil"
)

%}

%union {
	item interface{} //TODO insert real field(s)
}

%token	ANDAND
%token	ANDNOT
%token	ASSIGN_OP
%token	CHANCOMM
%token	COLAS
%token	COMM
%token	COMMCHAN
%token	DDD
%token	DEC
%token	EQ
%token	FLOAT_LIT
%token	GE
%token	IDENTIFIER_BUILT_IN
%token	IDENTIFIER_FIELD
%token	IDENTIFIER_LABEL
%token	IDENTIFIER_LIST
%token	IDENTIFIER_METHOD
%token	IDENTIFIER_OPERAND
%token	IDENTIFIER_SELECTOR
%token	IDENTIFIER_TYPE
%token	IMAGINARY_LIT
%token	INC
%token	INT_LIT
%token	LE
%token	LSH
%token	NAME
%token	NE
%token	OROR
%token	RSH
%token	RUNE_LIT
%token	STRING_LIT

%type	<item> 	/*TODO real type(s), if/where applicable */
	ANDAND
	ANDNOT
	ASSIGN_OP
	CHANCOMM
	COLAS
	COMM
	COMMCHAN
	DDD
	DEC
	EQ
	FLOAT_LIT
	GE
	IDENTIFIER_BUILT_IN
	IDENTIFIER_FIELD
	IDENTIFIER_LABEL
	IDENTIFIER_LIST
	IDENTIFIER_METHOD
	IDENTIFIER_OPERAND
	IDENTIFIER_SELECTOR
	IDENTIFIER_TYPE
	IMAGINARY_LIT
	INC
	INT_LIT
	LE
	LSH
	NAME
	NE
	OROR
	RSH
	RUNE_LIT
	STRING_LIT

%token BREAK
%token CASE
%token CHAN
%token CONST
%token CONTINUE
%token DEFAULT
%token DEFER
%token ELSE
%token FALLTHROUGH
%token FOR
%token FUNC
%token GO
%token GOTO
%token IF
%token IMPORT
%token INTERFACE
%token MAP
%token PACKAGE
%token RANGE
%token RETURN
%token SELECT
%token STRUCT
%token SWITCH
%token TYPE
%token VAR

%type	<item> 	/*TODO real type(s), if/where applicable */
	ArgumentList
	ArrayType
	BaseTypeName
	Block
	Condition
	ConstDecl11
	ConstSpec
	Declaration
	Element
	ElementList1
	ElementType
	ExprSwitchStmt3
	Expression
	ExpressionList
	ExpressionList1
	FieldDecl1
	ForClause2
	Function
	IfStmt
	IfStmt2
	ImportDecl11
	ImportSpec
	InterfaceType1
	Label
	LiteralValue
	MapType
	ParameterDecl
	ParameterList1
	Parameters
	PrimaryExpr2
	Receiver1
	Receiver2
	RecvExpr
	SelectStmt1
	SendStmt
	Signature
	SimpleStmt
	Slice2
	SliceType
	SourceFile
	SourceFile1
	SourceFile2
	Start
	Statement
	StatementList
	StatementList1
	StructType
	StructType1
	Type
	TypeDecl11
	TypeList1
	TypeName
	TypeSpec
	TypeSwitchGuard
	TypeSwitchStmt2
	UnaryExpr
	Value
	VarDecl11
	VarSpec

/*TODO %left, %right, ... declarations */

%start Start

%%

ArgumentList:
	ExpressionList
	{
		$$ = $1 //TODO 1
	}
|	ExpressionList DDD
	{
		$$ = []ArgumentList{$1, $2} //TODO 2
	}

ArrayType:
	'[' Expression ']' ElementType
	{
		$$ = []ArrayType{"[", $2, "]", $4} //TODO 3
	}

BaseTypeName:
	IDENTIFIER_TYPE
	{
		$$ = $1 //TODO 4
	}

Block:
	'{' StatementList '}'
	{
		$$ = []Block{"{", $2, "}"} //TODO 5
	}

Condition:
	Expression
	{
		$$ = $1 //TODO 6
	}

ConstDecl11:
	/* EMPTY */
	{
		$$ = []ConstDecl11(nil) //TODO 7
	}
|	ConstDecl11 ConstSpec ';'
	{
		$$ = append($1.([]ConstDecl11), $2, ";") //TODO 8
	}

ConstSpec:
	IDENTIFIER_LIST
	{
		$$ = $1 //TODO 9
	}
|	IDENTIFIER_LIST '=' ExpressionList
	{
		$$ = []ConstSpec{$1, "=", $3} //TODO 10
	}
|	IDENTIFIER_LIST Type '=' ExpressionList
	{
		$$ = []ConstSpec{$1, $2, "=", $4} //TODO 11
	}

Declaration:
	CONST ConstSpec
	{
		$$ = []Declaration{"const", $2} //TODO 12
	}
|	CONST '(' ConstDecl11 ')'
	{
		$$ = []Declaration{"const", "(", $3, ")"} //TODO 13
	}
|	TYPE TypeSpec
	{
		$$ = []Declaration{"type", $2} //TODO 14
	}
|	TYPE '(' TypeDecl11 ')'
	{
		$$ = []Declaration{"type", "(", $3, ")"} //TODO 15
	}
|	VAR VarSpec
	{
		$$ = []Declaration{"var", $2} //TODO 16
	}
|	VAR '(' VarDecl11 ')'
	{
		$$ = []Declaration{"var", "(", $3, ")"} //TODO 17
	}

Element:
	Value
	{
		$$ = $1 //TODO 18
	}
|	IDENTIFIER_FIELD ':' Value
	{
		$$ = []Element{$1, ":", $3} //TODO 19
	}
|	Expression ':' Value
	{
		$$ = []Element{$1, ":", $3} //TODO 20
	}

ElementList1:
	/* EMPTY */
	{
		$$ = []ElementList1(nil) //TODO 21
	}
|	ElementList1 ',' Element
	{
		$$ = append($1.([]ElementList1), ",", $3) //TODO 22
	}

ElementType:
	Type
	{
		$$ = $1 //TODO 23
	}

ExprSwitchStmt3:
	/* EMPTY */
	{
		$$ = []ExprSwitchStmt3(nil) //TODO 24
	}
|	ExprSwitchStmt3 CASE ExpressionList ':' StatementList
	{
		$$ = append($1.([]ExprSwitchStmt3), "case", $3, ":", $5) //TODO 25
	}
|	ExprSwitchStmt3 DEFAULT ':' StatementList
	{
		$$ = append($1.([]ExprSwitchStmt3), "default", ":", $4) //TODO 26
	}

Expression:
	UnaryExpr
	{
		$$ = $1 //TODO 27
	}
|	Expression OROR UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 28
	}
|	Expression ANDAND UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 29
	}
|	Expression EQ UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 30
	}
|	Expression NE UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 31
	}
|	Expression '<' UnaryExpr
	{
		$$ = []Expression{$1, "<", $3} //TODO 32
	}
|	Expression LE UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 33
	}
|	Expression '>' UnaryExpr
	{
		$$ = []Expression{$1, ">", $3} //TODO 34
	}
|	Expression GE UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 35
	}
|	Expression '+' UnaryExpr
	{
		$$ = []Expression{$1, "+", $3} //TODO 36
	}
|	Expression '-' UnaryExpr
	{
		$$ = []Expression{$1, "-", $3} //TODO 37
	}
|	Expression '|' UnaryExpr
	{
		$$ = []Expression{$1, "|", $3} //TODO 38
	}
|	Expression '^' UnaryExpr
	{
		$$ = []Expression{$1, "^", $3} //TODO 39
	}
|	Expression '*' UnaryExpr
	{
		$$ = []Expression{$1, "*", $3} //TODO 40
	}
|	Expression '/' UnaryExpr
	{
		$$ = []Expression{$1, "/", $3} //TODO 41
	}
|	Expression '%' UnaryExpr
	{
		$$ = []Expression{$1, "%", $3} //TODO 42
	}
|	Expression LSH UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 43
	}
|	Expression RSH UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 44
	}
|	Expression '&' UnaryExpr
	{
		$$ = []Expression{$1, "&", $3} //TODO 45
	}
|	Expression ANDNOT UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 46
	}

ExpressionList:
	Expression ExpressionList1
	{
		$$ = []ExpressionList{$1, $2} //TODO 47
	}

ExpressionList1:
	/* EMPTY */
	{
		$$ = []ExpressionList1(nil) //TODO 48
	}
|	ExpressionList1 ',' Expression
	{
		$$ = append($1.([]ExpressionList1), ",", $3) //TODO 49
	}

FieldDecl1:
	IDENTIFIER_LIST Type
	{
		$$ = []FieldDecl1{$1, $2} //TODO 50
	}
|	TypeName
	{
		$$ = $1 //TODO 51
	}
|	'*' TypeName
	{
		$$ = []FieldDecl1{"*", $2} //TODO 52
	}

ForClause2:
	/* EMPTY */
	{
		$$ = nil //TODO 53
	}
|	Condition
	{
		$$ = $1 //TODO 54
	}

Function:
	Signature Block
	{
		$$ = []Function{$1, $2} //TODO 55
	}

IfStmt:
	IF Expression Block IfStmt2
	{
		$$ = []IfStmt{"if", $2, $3, $4} //TODO 56
	}
|	IF SimpleStmt ';' Expression Block IfStmt2
	{
		$$ = []IfStmt{"if", $2, ";", $4, $5, $6} //TODO 57
	}

IfStmt2:
	/* EMPTY */
	{
		$$ = nil //TODO 58
	}
|	ELSE IfStmt
	{
		$$ = []IfStmt2{"else", $2} //TODO 59
	}
|	ELSE Block
	{
		$$ = []IfStmt2{"else", $2} //TODO 60
	}

ImportDecl11:
	/* EMPTY */
	{
		$$ = []ImportDecl11(nil) //TODO 61
	}
|	ImportDecl11 ImportSpec ';'
	{
		$$ = append($1.([]ImportDecl11), $2, ";") //TODO 62
	}

ImportSpec:
	STRING_LIT
	{
		$$ = $1 //TODO 63
	}
|	'.' STRING_LIT
	{
		$$ = []ImportSpec{".", $2} //TODO 64
	}
|	NAME STRING_LIT
	{
		$$ = []ImportSpec{$1, $2} //TODO 65
	}

InterfaceType1:
	/* EMPTY */
	{
		$$ = []InterfaceType1(nil) //TODO 66
	}
|	InterfaceType1 NAME Signature ';'
	{
		$$ = append($1.([]InterfaceType1), $2, $3, ";") //TODO 67
	}
|	InterfaceType1 NAME ';'
	{
		$$ = append($1.([]InterfaceType1), $2, ";") //TODO 68
	}
|	InterfaceType1 NAME '.' NAME ';'
	{
		$$ = append($1.([]InterfaceType1), $2, ".", $4, ";") //TODO 69
	}

Label:
	IDENTIFIER_LABEL
	{
		$$ = $1 //TODO 70
	}

LiteralValue:
	'{' '}'
	{
		$$ = []LiteralValue{"{", "}"} //TODO 71
	}
|	'{' Element ElementList1 '}'
	{
		$$ = []LiteralValue{"{", $2, $3, "}"} //TODO 72
	}
|	'{' Element ElementList1 ',' '}'
	{
		$$ = []LiteralValue{"{", $2, $3, ",", "}"} //TODO 73
	}

MapType:
	MAP '[' Type ']' ElementType
	{
		$$ = []MapType{"map", "[", $3, "]", $5} //TODO 74
	}

ParameterDecl:
	Type
	{
		$$ = $1 //TODO 75
	}
|	DDD Type
	{
		$$ = []ParameterDecl{$1, $2} //TODO 76
	}
|	IDENTIFIER_LIST Type
	{
		$$ = []ParameterDecl{$1, $2} //TODO 77
	}
|	IDENTIFIER_LIST DDD Type
	{
		$$ = []ParameterDecl{$1, $2, $3} //TODO 78
	}

ParameterList1:
	/* EMPTY */
	{
		$$ = []ParameterList1(nil) //TODO 79
	}
|	ParameterList1 ',' ParameterDecl
	{
		$$ = append($1.([]ParameterList1), ",", $3) //TODO 80
	}

Parameters:
	'(' ')'
	{
		$$ = []Parameters{"(", ")"} //TODO 81
	}
|	'(' ParameterDecl ParameterList1 ')'
	{
		$$ = []Parameters{"(", $2, $3, ")"} //TODO 82
	}
|	'(' ParameterDecl ParameterList1 ',' ')'
	{
		$$ = []Parameters{"(", $2, $3, ",", ")"} //TODO 83
	}

PrimaryExpr2:
	/* EMPTY */
	{
		$$ = []PrimaryExpr2(nil) //TODO 84
	}
|	PrimaryExpr2 '.' IDENTIFIER_SELECTOR
	{
		$$ = append($1.([]PrimaryExpr2), ".", $3) //TODO 85
	}
|	PrimaryExpr2 '[' Expression ']'
	{
		$$ = append($1.([]PrimaryExpr2), "[", $3, "]") //TODO 86
	}
|	PrimaryExpr2 '[' ':' Slice2 ']'
	{
		$$ = append($1.([]PrimaryExpr2), "[", ":", $4, "]") //TODO 87
	}
|	PrimaryExpr2 '[' Expression ':' Slice2 ']'
	{
		$$ = append($1.([]PrimaryExpr2), "[", $3, ":", $5, "]") //TODO 88
	}
|	PrimaryExpr2 '.' '(' Type ')'
	{
		$$ = append($1.([]PrimaryExpr2), ".", "(", $4, ")") //TODO 89
	}
|	PrimaryExpr2 '(' ')'
	{
		$$ = append($1.([]PrimaryExpr2), "(", ")") //TODO 90
	}
|	PrimaryExpr2 '(' ArgumentList ')'
	{
		$$ = append($1.([]PrimaryExpr2), "(", $3, ")") //TODO 91
	}
|	PrimaryExpr2 '(' ArgumentList ',' ')'
	{
		$$ = append($1.([]PrimaryExpr2), "(", $3, ",", ")") //TODO 92
	}

Receiver1:
	/* EMPTY */
	{
		$$ = nil //TODO 93
	}
|	NAME
	{
		$$ = $1 //TODO 94
	}

Receiver2:
	/* EMPTY */
	{
		$$ = nil //TODO 95
	}
|	'*'
	{
		$$ = "*" //TODO 96
	}

RecvExpr:
	Expression
	{
		$$ = $1 //TODO 97
	}

SelectStmt1:
	/* EMPTY */
	{
		$$ = []SelectStmt1(nil) //TODO 98
	}
|	SelectStmt1 CASE SendStmt ':' StatementList
	{
		$$ = append($1.([]SelectStmt1), "case", $3, ":", $5) //TODO 99
	}
|	SelectStmt1 CASE RecvExpr ':' StatementList
	{
		$$ = append($1.([]SelectStmt1), "case", $3, ":", $5) //TODO 100
	}
|	SelectStmt1 CASE ExpressionList '=' RecvExpr ':' StatementList
	{
		$$ = append($1.([]SelectStmt1), "case", $3, "=", $5, ":", $7) //TODO 101
	}
|	SelectStmt1 CASE IDENTIFIER_LIST COLAS RecvExpr ':' StatementList
	{
		$$ = append($1.([]SelectStmt1), "case", $3, $4, $5, ":", $7) //TODO 102
	}
|	SelectStmt1 DEFAULT ':' StatementList
	{
		$$ = append($1.([]SelectStmt1), "default", ":", $4) //TODO 103
	}

SendStmt:
	Expression COMM Expression
	{
		$$ = []SendStmt{$1, $2, $3} //TODO 104
	}

Signature:
	Parameters
	{
		$$ = $1 //TODO 105
	}
|	Parameters Parameters
	{
		$$ = []Signature{$1, $2} //TODO 106
	}
|	Parameters Type
	{
		$$ = []Signature{$1, $2} //TODO 107
	}

SimpleStmt:
	/* EMPTY */
	{
		$$ = nil //TODO 108
	}
|	Expression
	{
		$$ = $1 //TODO 109
	}
|	SendStmt
	{
		$$ = $1 //TODO 110
	}
|	Expression INC
	{
		$$ = []SimpleStmt{$1, $2} //TODO 111
	}
|	Expression DEC
	{
		$$ = []SimpleStmt{$1, $2} //TODO 112
	}
|	ExpressionList ASSIGN_OP ExpressionList
	{
		$$ = []SimpleStmt{$1, $2, $3} //TODO 113
	}
|	IDENTIFIER_LIST COLAS ExpressionList
	{
		$$ = []SimpleStmt{$1, $2, $3} //TODO 114
	}

Slice2:
	/* EMPTY */
	{
		$$ = nil //TODO 115
	}
|	Expression
	{
		$$ = $1 //TODO 116
	}

SliceType:
	'[' ']' ElementType
	{
		$$ = []SliceType{"[", "]", $3} //TODO 117
	}

SourceFile:
	PACKAGE NAME ';' SourceFile1 SourceFile2
	{
		$$ = []SourceFile{"package", $2, ";", $4, $5} //TODO 118
	}

SourceFile1:
	/* EMPTY */
	{
		$$ = []SourceFile1(nil) //TODO 119
	}
|	SourceFile1 IMPORT ImportSpec ';'
	{
		$$ = append($1.([]SourceFile1), "import", $3, ";") //TODO 120
	}
|	SourceFile1 IMPORT '(' ImportDecl11 ')' ';'
	{
		$$ = append($1.([]SourceFile1), "import", "(", $4, ")", ";") //TODO 121
	}

SourceFile2:
	/* EMPTY */
	{
		$$ = []SourceFile2(nil) //TODO 122
	}
|	SourceFile2 Declaration ';'
	{
		$$ = append($1.([]SourceFile2), $2, ";") //TODO 123
	}
|	SourceFile2 FUNC NAME Function ';'
	{
		$$ = append($1.([]SourceFile2), "func", $3, $4, ";") //TODO 124
	}
|	SourceFile2 FUNC NAME Signature ';'
	{
		$$ = append($1.([]SourceFile2), "func", $3, $4, ";") //TODO 125
	}
|	SourceFile2 FUNC '(' Receiver1 Receiver2 BaseTypeName ')' NAME Function ';'
	{
		$$ = append($1.([]SourceFile2), "func", "(", $4, $5, $6, ")", $8, $9, ";") //TODO 126
	}
|	SourceFile2 FUNC '(' Receiver1 Receiver2 BaseTypeName ')' NAME Signature ';'
	{
		$$ = append($1.([]SourceFile2), "func", "(", $4, $5, $6, ")", $8, $9, ";") //TODO 127
	}

Start:
	SourceFile
	{
		_parserResult = $1 //TODO 128
	}

Statement:
	Declaration
	{
		$$ = $1 //TODO 129
	}
|	IDENTIFIER_LABEL Statement
	{
		$$ = []Statement{$1, $2} //TODO 130
	}
|	SimpleStmt
	{
		$$ = $1 //TODO 131
	}
|	GO Expression
	{
		$$ = []Statement{"go", $2} //TODO 132
	}
|	RETURN
	{
		$$ = "return" //TODO 133
	}
|	RETURN ExpressionList
	{
		$$ = []Statement{"return", $2} //TODO 134
	}
|	BREAK
	{
		$$ = "break" //TODO 135
	}
|	BREAK Label
	{
		$$ = []Statement{"break", $2} //TODO 136
	}
|	CONTINUE
	{
		$$ = "continue" //TODO 137
	}
|	CONTINUE Label
	{
		$$ = []Statement{"continue", $2} //TODO 138
	}
|	GOTO Label
	{
		$$ = []Statement{"goto", $2} //TODO 139
	}
|	FALLTHROUGH
	{
		$$ = "fallthrough" //TODO 140
	}
|	Block
	{
		$$ = $1 //TODO 141
	}
|	IfStmt
	{
		$$ = $1 //TODO 142
	}
|	SWITCH '{' ExprSwitchStmt3 '}'
	{
		$$ = []Statement{"switch", "{", $3, "}"} //TODO 143
	}
|	SWITCH SimpleStmt ';' '{' ExprSwitchStmt3 '}'
	{
		$$ = []Statement{"switch", $2, ";", "{", $5, "}"} //TODO 144
	}
|	SWITCH Expression '{' ExprSwitchStmt3 '}'
	{
		$$ = []Statement{"switch", $2, "{", $4, "}"} //TODO 145
	}
|	SWITCH SimpleStmt ';' Expression '{' ExprSwitchStmt3 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, "{", $6, "}"} //TODO 146
	}
|	SWITCH TypeSwitchGuard '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, "{", $4, "}"} //TODO 147
	}
|	SWITCH SimpleStmt ';' TypeSwitchGuard '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, "{", $6, "}"} //TODO 148
	}
|	SELECT '{' SelectStmt1 '}'
	{
		$$ = []Statement{"select", "{", $3, "}"} //TODO 149
	}
|	FOR Block
	{
		$$ = []Statement{"for", $2} //TODO 150
	}
|	FOR Condition Block
	{
		$$ = []Statement{"for", $2, $3} //TODO 151
	}
|	FOR ';' ForClause2 ';' Block
	{
		$$ = []Statement{"for", ";", $3, ";", $5} //TODO 152
	}
|	FOR SimpleStmt ';' ForClause2 ';' Block
	{
		$$ = []Statement{"for", $2, ";", $4, ";", $6} //TODO 153
	}
|	FOR ';' ForClause2 ';' SimpleStmt Block
	{
		$$ = []Statement{"for", ";", $3, ";", $5, $6} //TODO 154
	}
|	FOR SimpleStmt ';' ForClause2 ';' SimpleStmt Block
	{
		$$ = []Statement{"for", $2, ";", $4, ";", $6, $7} //TODO 155
	}
|	FOR ExpressionList '=' RANGE Expression Block
	{
		$$ = []Statement{"for", $2, "=", "range", $5, $6} //TODO 156
	}
|	FOR IDENTIFIER_LIST COLAS RANGE Expression Block
	{
		$$ = []Statement{"for", $2, $3, "range", $5, $6} //TODO 157
	}
|	DEFER Expression
	{
		$$ = []Statement{"defer", $2} //TODO 158
	}

StatementList:
	StatementList1
	{
		$$ = $1 //TODO 159
	}

StatementList1:
	/* EMPTY */
	{
		$$ = []StatementList1(nil) //TODO 160
	}
|	StatementList1 Statement ';'
	{
		$$ = append($1.([]StatementList1), $2, ";") //TODO 161
	}

StructType:
	STRUCT '{' StructType1 '}'
	{
		$$ = []StructType{"struct", "{", $3, "}"} //TODO 162
	}

StructType1:
	/* EMPTY */
	{
		$$ = []StructType1(nil) //TODO 163
	}
|	StructType1 FieldDecl1 ';'
	{
		$$ = append($1.([]StructType1), $2, ";") //TODO 164
	}
|	StructType1 FieldDecl1 STRING_LIT ';'
	{
		$$ = append($1.([]StructType1), $2, $3, ";") //TODO 165
	}

Type:
	TypeName
	{
		$$ = $1 //TODO 166
	}
|	ArrayType
	{
		$$ = $1 //TODO 167
	}
|	StructType
	{
		$$ = $1 //TODO 168
	}
|	'*' Type
	{
		$$ = []Type{"*", $2} //TODO 169
	}
|	FUNC Signature
	{
		$$ = []Type{"func", $2} //TODO 170
	}
|	INTERFACE '{' InterfaceType1 '}'
	{
		$$ = []Type{"interface", "{", $3, "}"} //TODO 171
	}
|	SliceType
	{
		$$ = $1 //TODO 172
	}
|	MapType
	{
		$$ = $1 //TODO 173
	}
|	CHAN CHANCOMM ElementType
	{
		$$ = []Type{"chan", $2, $3} //TODO 174
	}
|	COMMCHAN ElementType
	{
		$$ = []Type{$1, $2} //TODO 175
	}
|	'(' Type ')'
	{
		$$ = []Type{"(", $2, ")"} //TODO 176
	}

TypeDecl11:
	/* EMPTY */
	{
		$$ = []TypeDecl11(nil) //TODO 177
	}
|	TypeDecl11 TypeSpec ';'
	{
		$$ = append($1.([]TypeDecl11), $2, ";") //TODO 178
	}

TypeList1:
	/* EMPTY */
	{
		$$ = []TypeList1(nil) //TODO 179
	}
|	TypeList1 ',' Type
	{
		$$ = append($1.([]TypeList1), ",", $3) //TODO 180
	}

TypeName:
	IDENTIFIER_TYPE
	{
		$$ = $1 //TODO 181
	}

TypeSpec:
	NAME Type
	{
		$$ = []TypeSpec{$1, $2} //TODO 182
	}

TypeSwitchGuard:
	INT_LIT PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, ".", "(", "type", ")"} //TODO 183
	}
|	FLOAT_LIT PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, ".", "(", "type", ")"} //TODO 184
	}
|	IMAGINARY_LIT PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, ".", "(", "type", ")"} //TODO 185
	}
|	RUNE_LIT PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, ".", "(", "type", ")"} //TODO 186
	}
|	STRING_LIT PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, ".", "(", "type", ")"} //TODO 187
	}
|	StructType LiteralValue PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, ".", "(", "type", ")"} //TODO 188
	}
|	ArrayType LiteralValue PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, ".", "(", "type", ")"} //TODO 189
	}
|	'[' DDD ']' ElementType LiteralValue PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{"[", $2, "]", $4, $5, $6, ".", "(", "type", ")"} //TODO 190
	}
|	SliceType LiteralValue PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, ".", "(", "type", ")"} //TODO 191
	}
|	MapType LiteralValue PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, ".", "(", "type", ")"} //TODO 192
	}
|	TypeName LiteralValue PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, ".", "(", "type", ")"} //TODO 193
	}
|	FUNC Function PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{"func", $2, $3, ".", "(", "type", ")"} //TODO 194
	}
|	IDENTIFIER_OPERAND PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, ".", "(", "type", ")"} //TODO 195
	}
|	TypeName '.' IDENTIFIER_METHOD PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, ".", $3, $4, ".", "(", "type", ")"} //TODO 196
	}
|	'(' '*' TypeName ')' '.' IDENTIFIER_METHOD PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{"(", "*", $3, ")", ".", $6, $7, ".", "(", "type", ")"} //TODO 197
	}
|	'(' TypeName ')' '.' IDENTIFIER_METHOD PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{"(", $2, ")", ".", $5, $6, ".", "(", "type", ")"} //TODO 198
	}
|	'(' Expression ')' PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{"(", $2, ")", $4, ".", "(", "type", ")"} //TODO 199
	}
|	Type '(' Expression ')' PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, "(", $3, ")", $5, ".", "(", "type", ")"} //TODO 200
	}
|	Type '(' Expression ',' ')' PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, "(", $3, ",", ")", $6, ".", "(", "type", ")"} //TODO 201
	}
|	IDENTIFIER_BUILT_IN '(' ')' PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, "(", ")", $4, ".", "(", "type", ")"} //TODO 202
	}
|	IDENTIFIER_BUILT_IN '(' Type ')' PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, "(", $3, ")", $5, ".", "(", "type", ")"} //TODO 203
	}
|	IDENTIFIER_BUILT_IN '(' Type ',' ArgumentList ')' PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, "(", $3, ",", $5, ")", $7, ".", "(", "type", ")"} //TODO 204
	}
|	IDENTIFIER_BUILT_IN '(' ArgumentList ')' PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, "(", $3, ")", $5, ".", "(", "type", ")"} //TODO 205
	}
|	IDENTIFIER_BUILT_IN '(' Type ',' ')' PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, "(", $3, ",", ")", $6, ".", "(", "type", ")"} //TODO 206
	}
|	IDENTIFIER_BUILT_IN '(' Type ',' ArgumentList ',' ')' PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, "(", $3, ",", $5, ",", ")", $8, ".", "(", "type", ")"} //TODO 207
	}
|	IDENTIFIER_BUILT_IN '(' ArgumentList ',' ')' PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, "(", $3, ",", ")", $6, ".", "(", "type", ")"} //TODO 208
	}
|	IDENTIFIER_LIST COLAS INT_LIT PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, $4, ".", "(", "type", ")"} //TODO 209
	}
|	IDENTIFIER_LIST COLAS FLOAT_LIT PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, $4, ".", "(", "type", ")"} //TODO 210
	}
|	IDENTIFIER_LIST COLAS IMAGINARY_LIT PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, $4, ".", "(", "type", ")"} //TODO 211
	}
|	IDENTIFIER_LIST COLAS RUNE_LIT PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, $4, ".", "(", "type", ")"} //TODO 212
	}
|	IDENTIFIER_LIST COLAS STRING_LIT PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, $4, ".", "(", "type", ")"} //TODO 213
	}
|	IDENTIFIER_LIST COLAS StructType LiteralValue PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, $4, $5, ".", "(", "type", ")"} //TODO 214
	}
|	IDENTIFIER_LIST COLAS ArrayType LiteralValue PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, $4, $5, ".", "(", "type", ")"} //TODO 215
	}
|	IDENTIFIER_LIST COLAS '[' DDD ']' ElementType LiteralValue PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, "[", $4, "]", $6, $7, $8, ".", "(", "type", ")"} //TODO 216
	}
|	IDENTIFIER_LIST COLAS SliceType LiteralValue PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, $4, $5, ".", "(", "type", ")"} //TODO 217
	}
|	IDENTIFIER_LIST COLAS MapType LiteralValue PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, $4, $5, ".", "(", "type", ")"} //TODO 218
	}
|	IDENTIFIER_LIST COLAS TypeName LiteralValue PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, $4, $5, ".", "(", "type", ")"} //TODO 219
	}
|	IDENTIFIER_LIST COLAS FUNC Function PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, "func", $4, $5, ".", "(", "type", ")"} //TODO 220
	}
|	IDENTIFIER_LIST COLAS IDENTIFIER_OPERAND PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, $4, ".", "(", "type", ")"} //TODO 221
	}
|	IDENTIFIER_LIST COLAS TypeName '.' IDENTIFIER_METHOD PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, ".", $5, $6, ".", "(", "type", ")"} //TODO 222
	}
|	IDENTIFIER_LIST COLAS '(' '*' TypeName ')' '.' IDENTIFIER_METHOD PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, "(", "*", $5, ")", ".", $8, $9, ".", "(", "type", ")"} //TODO 223
	}
|	IDENTIFIER_LIST COLAS '(' TypeName ')' '.' IDENTIFIER_METHOD PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, "(", $4, ")", ".", $7, $8, ".", "(", "type", ")"} //TODO 224
	}
|	IDENTIFIER_LIST COLAS '(' Expression ')' PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, "(", $4, ")", $6, ".", "(", "type", ")"} //TODO 225
	}
|	IDENTIFIER_LIST COLAS Type '(' Expression ')' PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, "(", $5, ")", $7, ".", "(", "type", ")"} //TODO 226
	}
|	IDENTIFIER_LIST COLAS Type '(' Expression ',' ')' PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, "(", $5, ",", ")", $8, ".", "(", "type", ")"} //TODO 227
	}
|	IDENTIFIER_LIST COLAS IDENTIFIER_BUILT_IN '(' ')' PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, "(", ")", $6, ".", "(", "type", ")"} //TODO 228
	}
|	IDENTIFIER_LIST COLAS IDENTIFIER_BUILT_IN '(' Type ')' PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, "(", $5, ")", $7, ".", "(", "type", ")"} //TODO 229
	}
|	IDENTIFIER_LIST COLAS IDENTIFIER_BUILT_IN '(' Type ',' ArgumentList ')' PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, "(", $5, ",", $7, ")", $9, ".", "(", "type", ")"} //TODO 230
	}
|	IDENTIFIER_LIST COLAS IDENTIFIER_BUILT_IN '(' ArgumentList ')' PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, "(", $5, ")", $7, ".", "(", "type", ")"} //TODO 231
	}
|	IDENTIFIER_LIST COLAS IDENTIFIER_BUILT_IN '(' Type ',' ')' PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, "(", $5, ",", ")", $8, ".", "(", "type", ")"} //TODO 232
	}
|	IDENTIFIER_LIST COLAS IDENTIFIER_BUILT_IN '(' Type ',' ArgumentList ',' ')' PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, "(", $5, ",", $7, ",", ")", $10, ".", "(", "type", ")"} //TODO 233
	}
|	IDENTIFIER_LIST COLAS IDENTIFIER_BUILT_IN '(' ArgumentList ',' ')' PrimaryExpr2 '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, $3, "(", $5, ",", ")", $8, ".", "(", "type", ")"} //TODO 234
	}

TypeSwitchStmt2:
	/* EMPTY */
	{
		$$ = []TypeSwitchStmt2(nil) //TODO 235
	}
|	TypeSwitchStmt2 CASE Type TypeList1 ':' StatementList
	{
		$$ = append($1.([]TypeSwitchStmt2), "case", $3, $4, ":", $6) //TODO 236
	}
|	TypeSwitchStmt2 DEFAULT ':' StatementList
	{
		$$ = append($1.([]TypeSwitchStmt2), "default", ":", $4) //TODO 237
	}

UnaryExpr:
	INT_LIT PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, $2} //TODO 238
	}
|	FLOAT_LIT PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, $2} //TODO 239
	}
|	IMAGINARY_LIT PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, $2} //TODO 240
	}
|	RUNE_LIT PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, $2} //TODO 241
	}
|	STRING_LIT PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, $2} //TODO 242
	}
|	StructType LiteralValue PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, $2, $3} //TODO 243
	}
|	ArrayType LiteralValue PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, $2, $3} //TODO 244
	}
|	'[' DDD ']' ElementType LiteralValue PrimaryExpr2
	{
		$$ = []UnaryExpr{"[", $2, "]", $4, $5, $6} //TODO 245
	}
|	SliceType LiteralValue PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, $2, $3} //TODO 246
	}
|	MapType LiteralValue PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, $2, $3} //TODO 247
	}
|	TypeName LiteralValue PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, $2, $3} //TODO 248
	}
|	FUNC Function PrimaryExpr2
	{
		$$ = []UnaryExpr{"func", $2, $3} //TODO 249
	}
|	IDENTIFIER_OPERAND PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, $2} //TODO 250
	}
|	TypeName '.' IDENTIFIER_METHOD PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, ".", $3, $4} //TODO 251
	}
|	'(' '*' TypeName ')' '.' IDENTIFIER_METHOD PrimaryExpr2
	{
		$$ = []UnaryExpr{"(", "*", $3, ")", ".", $6, $7} //TODO 252
	}
|	'(' TypeName ')' '.' IDENTIFIER_METHOD PrimaryExpr2
	{
		$$ = []UnaryExpr{"(", $2, ")", ".", $5, $6} //TODO 253
	}
|	'(' Expression ')' PrimaryExpr2
	{
		$$ = []UnaryExpr{"(", $2, ")", $4} //TODO 254
	}
|	Type '(' Expression ')' PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, "(", $3, ")", $5} //TODO 255
	}
|	Type '(' Expression ',' ')' PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, "(", $3, ",", ")", $6} //TODO 256
	}
|	IDENTIFIER_BUILT_IN '(' ')' PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, "(", ")", $4} //TODO 257
	}
|	IDENTIFIER_BUILT_IN '(' Type ')' PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, "(", $3, ")", $5} //TODO 258
	}
|	IDENTIFIER_BUILT_IN '(' Type ',' ArgumentList ')' PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, "(", $3, ",", $5, ")", $7} //TODO 259
	}
|	IDENTIFIER_BUILT_IN '(' ArgumentList ')' PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, "(", $3, ")", $5} //TODO 260
	}
|	IDENTIFIER_BUILT_IN '(' Type ',' ')' PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, "(", $3, ",", ")", $6} //TODO 261
	}
|	IDENTIFIER_BUILT_IN '(' Type ',' ArgumentList ',' ')' PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, "(", $3, ",", $5, ",", ")", $8} //TODO 262
	}
|	IDENTIFIER_BUILT_IN '(' ArgumentList ',' ')' PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, "(", $3, ",", ")", $6} //TODO 263
	}
|	'+' UnaryExpr
	{
		$$ = []UnaryExpr{"+", $2} //TODO 264
	}
|	'-' UnaryExpr
	{
		$$ = []UnaryExpr{"-", $2} //TODO 265
	}
|	'!' UnaryExpr
	{
		$$ = []UnaryExpr{"!", $2} //TODO 266
	}
|	'^' UnaryExpr
	{
		$$ = []UnaryExpr{"^", $2} //TODO 267
	}
|	'*' UnaryExpr
	{
		$$ = []UnaryExpr{"*", $2} //TODO 268
	}
|	'&' UnaryExpr
	{
		$$ = []UnaryExpr{"&", $2} //TODO 269
	}
|	COMM UnaryExpr
	{
		$$ = []UnaryExpr{$1, $2} //TODO 270
	}

Value:
	Expression
	{
		$$ = $1 //TODO 271
	}
|	LiteralValue
	{
		$$ = $1 //TODO 272
	}

VarDecl11:
	/* EMPTY */
	{
		$$ = []VarDecl11(nil) //TODO 273
	}
|	VarDecl11 VarSpec ';'
	{
		$$ = append($1.([]VarDecl11), $2, ";") //TODO 274
	}

VarSpec:
	IDENTIFIER_LIST Type
	{
		$$ = []VarSpec{$1, $2} //TODO 275
	}
|	IDENTIFIER_LIST Type '=' ExpressionList
	{
		$$ = []VarSpec{$1, $2, "=", $4} //TODO 276
	}
|	IDENTIFIER_LIST '=' ExpressionList
	{
		$$ = []VarSpec{$1, "=", $3} //TODO 277
	}

%%

//TODO remove demo stuff below

var _parserResult interface{}

type (
	ArgumentList interface{}
	ArrayType interface{}
	BaseTypeName interface{}
	Block interface{}
	Condition interface{}
	ConstDecl11 interface{}
	ConstSpec interface{}
	Declaration interface{}
	Element interface{}
	ElementList1 interface{}
	ElementType interface{}
	ExprSwitchStmt3 interface{}
	Expression interface{}
	ExpressionList interface{}
	ExpressionList1 interface{}
	FieldDecl1 interface{}
	ForClause2 interface{}
	Function interface{}
	IfStmt interface{}
	IfStmt2 interface{}
	ImportDecl11 interface{}
	ImportSpec interface{}
	InterfaceType1 interface{}
	Label interface{}
	LiteralValue interface{}
	MapType interface{}
	ParameterDecl interface{}
	ParameterList1 interface{}
	Parameters interface{}
	PrimaryExpr2 interface{}
	Receiver1 interface{}
	Receiver2 interface{}
	RecvExpr interface{}
	SelectStmt1 interface{}
	SendStmt interface{}
	Signature interface{}
	SimpleStmt interface{}
	Slice2 interface{}
	SliceType interface{}
	SourceFile interface{}
	SourceFile1 interface{}
	SourceFile2 interface{}
	Start interface{}
	Statement interface{}
	StatementList interface{}
	StatementList1 interface{}
	StructType interface{}
	StructType1 interface{}
	Type interface{}
	TypeDecl11 interface{}
	TypeList1 interface{}
	TypeName interface{}
	TypeSpec interface{}
	TypeSwitchGuard interface{}
	TypeSwitchStmt2 interface{}
	UnaryExpr interface{}
	Value interface{}
	VarDecl11 interface{}
	VarSpec interface{}
)
	
func _dump() {
	s := fmt.Sprintf("%#v", _parserResult)
	s = strings.Replace(s, "%", "%%", -1)
	s = strings.Replace(s, "{", "{%i\n", -1)
	s = strings.Replace(s, "}", "%u\n}", -1)
	s = strings.Replace(s, ", ", ",\n", -1)
	var buf bytes.Buffer
	strutil.IndentFormatter(&buf, ". ").Format(s)
	buf.WriteString("\n")
	a := strings.Split(buf.String(), "\n")
	for _, v := range a {
		if strings.HasSuffix(v, "(nil)") || strings.HasSuffix(v, "(nil),") {
			continue
		}
	
		fmt.Println(v)
	}
}

// End of demo stuff
