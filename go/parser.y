%{

//TODO Put your favorite license here
		
// yacc source generated by ebnf2y[1]
// at 2014-02-07 21:17:30.781591055 +0100 CET
//
//  $ ebnf2y -o parser.y -pkg parser parser.ebnf
//
// CAUTION: If this file is a Go source file (*.go), it was generated
// automatically by '$ go tool yacc' from a *.y file - DO NOT EDIT in that case!
// 
//   [1]: http://github.com/cznic/ebnf2y

package parser //TODO real package name

//TODO required only be the demo _dump function
import (
	"bytes"
	"fmt"
	"strings"

	"github.com/cznic/strutil"
)

%}

%union {
	item interface{} //TODO insert real field(s)
}

%token	ADD_ASGN
%token	ANDAND
%token	ANDNOT
%token	ANDNOT_ASGN
%token	AND_ASGN
%token	COLAS
%token	COMM
%token	DDD
%token	DEC
%token	DIV_ASGN
%token	EQ
%token	FLOAT_LIT
%token	GE
%token	IDENTIFIER
%token	IMAGINARY_LIT
%token	INC
%token	INT_LIT
%token	LE
%token	LSH
%token	LSH_ASGN
%token	MOD_ASGN
%token	MUL_ASGN
%token	NEQ
%token	OROR
%token	OR_ASGN
%token	RSH
%token	RSH_ASGN
%token	RUNE_LIT
%token	STRING_LIT
%token	SUB_ASGN
%token	XOR_ASGN

%type	<item> 	/*TODO real type(s), if/where applicable */
	ADD_ASGN
	ANDAND
	ANDNOT
	ANDNOT_ASGN
	AND_ASGN
	COLAS
	COMM
	DDD
	DEC
	DIV_ASGN
	EQ
	FLOAT_LIT
	GE
	IDENTIFIER
	IMAGINARY_LIT
	INC
	INT_LIT
	LE
	LSH
	LSH_ASGN
	MOD_ASGN
	MUL_ASGN
	NEQ
	OROR
	OR_ASGN
	RSH
	RSH_ASGN
	RUNE_LIT
	STRING_LIT
	SUB_ASGN
	XOR_ASGN

%token BREAK
%token CASE
%token CHAN
%token CONST
%token CONTINUE
%token DEFAULT
%token DEFER
%token ELSE
%token FALLTHROUGH
%token FOR
%token FUNC
%token GO
%token GOTO
%token IF
%token IMPORT
%token INTERFACE
%token MAP
%token PACKAGE
%token RANGE
%token RETURN
%token SELECT
%token STRUCT
%token SWITCH
%token TYPE
%token VAR

%type	<item> 	/*TODO real type(s), if/where applicable */
	AnonymousField
	ArgumentList
	ArgumentList1
	ArrayLength
	ArrayType
	Assignment
	BaseType
	BaseTypeName
	BasicLit
	Block
	BreakStmt
	BreakStmt1
	BuiltinArgs
	BuiltinArgs1
	BuiltinCall
	BuiltinCall1
	BuiltinCall11
	Call
	Call1
	Call11
	Channel
	ChannelType
	ChannelType1
	ChannelType11
	CommCase
	CommCase1
	CommClause
	CompositeLit
	Condition
	ConstDecl
	ConstDecl1
	ConstDecl11
	ConstSpec
	ConstSpec1
	ConstSpec11
	ContinueStmt
	ContinueStmt1
	Conversion
	Conversion1
	Declaration
	DeferStmt
	Element
	Element1
	ElementIndex
	ElementList
	ElementList1
	ElementType
	ExprCaseClause
	ExprSwitchCase
	ExprSwitchStmt
	ExprSwitchStmt1
	ExprSwitchStmt2
	ExprSwitchStmt3
	Expression
	Expression1
	ExpressionList
	ExpressionList1
	ExpressionStmt
	Factor
	Factor1
	Factor11
	FallthroughStmt
	FieldDecl
	FieldDecl1
	FieldDecl2
	FieldName
	ForClause
	ForClause1
	ForClause2
	ForClause3
	ForStmt
	ForStmt1
	ForStmt11
	Function
	FunctionBody
	FunctionDecl
	FunctionDecl1
	FunctionLit
	FunctionName
	FunctionType
	GoStmt
	GotoStmt
	IdentifierList
	IdentifierList1
	IfStmt
	IfStmt1
	IfStmt2
	IfStmt21
	ImportDecl
	ImportDecl1
	ImportDecl11
	ImportPath
	ImportSpec
	ImportSpec1
	ImportSpec11
	IncDecStmt
	IncDecStmt1
	Index
	InitStmt
	InterfaceType
	InterfaceType1
	InterfaceTypeName
	Key
	KeyType
	Label
	LabeledStmt
	Literal
	LiteralType
	LiteralValue
	LiteralValue1
	LiteralValue11
	MapType
	MethodDecl
	MethodDecl1
	MethodExpr
	MethodName
	MethodSpec
	Operand
	OperandName
	PackageClause
	PackageName
	ParameterDecl
	ParameterDecl1
	ParameterDecl2
	ParameterList
	ParameterList1
	Parameters
	Parameters1
	Parameters11
	PointerType
	PostStmt
	PrimaryExpr
	PrimaryFactor
	PrimaryFactor1
	PrimaryFactor11
	PrimaryTerm
	PrimaryTerm1
	PrimaryTerm11
	QualifiedIdent
	RangeClause
	RangeClause1
	Receiver
	Receiver1
	Receiver2
	ReceiverType
	RecvExpr
	RecvStmt
	RecvStmt1
	RecvStmt11
	Result
	ReturnStmt
	ReturnStmt1
	SelectStmt
	SelectStmt1
	Selector
	SendStmt
	ShortVarDecl
	Signature
	Signature1
	SimpleStmt
	Slice
	Slice1
	Slice11
	Slice12
	Slice2
	Slice21
	SliceType
	SourceFile
	SourceFile1
	SourceFile2
	Start
	Statement
	StatementList
	StatementList1
	StatementList2
	StatementList21
	StructType
	StructType1
	SwitchStmt
	Tag
	Term
	Term1
	TopLevelDecl
	Type
	TypeAssertion
	TypeCaseClause
	TypeDecl
	TypeDecl1
	TypeDecl11
	TypeList
	TypeList1
	TypeLit
	TypeName
	TypeSpec
	TypeSwitchCase
	TypeSwitchGuard
	TypeSwitchGuard1
	TypeSwitchStmt
	TypeSwitchStmt1
	TypeSwitchStmt2
	UnaryExpr
	UnaryExpr1
	UnaryExpr11
	Value
	VarDecl
	VarDecl1
	VarDecl11
	VarSpec
	VarSpec1
	VarSpec11

/*TODO %left, %right, ... declarations */

%start Start

%%

AnonymousField:
	TypeName
	{
		$$ = $1 //TODO 1
	}
|	'*' TypeName
	{
		$$ = []AnonymousField{"*", $2} //TODO 2
	}

ArgumentList:
	ExpressionList ArgumentList1
	{
		$$ = []ArgumentList{$1, $2} //TODO 3
	}

ArgumentList1:
	/* EMPTY */
	{
		$$ = nil //TODO 4
	}
|	DDD
	{
		$$ = $1 //TODO 5
	}

ArrayLength:
	Expression
	{
		$$ = $1 //TODO 6
	}

ArrayType:
	'[' ArrayLength ']' ElementType
	{
		$$ = []ArrayType{"[", $2, "]", $4} //TODO 7
	}

Assignment:
	ExpressionList '=' ExpressionList
	{
		$$ = []Assignment{$1, "=", $3} //TODO 8
	}
|	ExpressionList ADD_ASGN ExpressionList
	{
		$$ = []Assignment{$1, $2, $3} //TODO 9
	}
|	ExpressionList AND_ASGN ExpressionList
	{
		$$ = []Assignment{$1, $2, $3} //TODO 10
	}
|	ExpressionList ANDNOT_ASGN ExpressionList
	{
		$$ = []Assignment{$1, $2, $3} //TODO 11
	}
|	ExpressionList DIV_ASGN ExpressionList
	{
		$$ = []Assignment{$1, $2, $3} //TODO 12
	}
|	ExpressionList LSH_ASGN ExpressionList
	{
		$$ = []Assignment{$1, $2, $3} //TODO 13
	}
|	ExpressionList MOD_ASGN ExpressionList
	{
		$$ = []Assignment{$1, $2, $3} //TODO 14
	}
|	ExpressionList MUL_ASGN ExpressionList
	{
		$$ = []Assignment{$1, $2, $3} //TODO 15
	}
|	ExpressionList OR_ASGN ExpressionList
	{
		$$ = []Assignment{$1, $2, $3} //TODO 16
	}
|	ExpressionList RSH_ASGN ExpressionList
	{
		$$ = []Assignment{$1, $2, $3} //TODO 17
	}
|	ExpressionList SUB_ASGN ExpressionList
	{
		$$ = []Assignment{$1, $2, $3} //TODO 18
	}
|	ExpressionList XOR_ASGN ExpressionList
	{
		$$ = []Assignment{$1, $2, $3} //TODO 19
	}

BaseType:
	Type
	{
		$$ = $1 //TODO 20
	}

BaseTypeName:
	IDENTIFIER
	{
		$$ = $1 //TODO 21
	}

BasicLit:
	INT_LIT
	{
		$$ = $1 //TODO 22
	}
|	FLOAT_LIT
	{
		$$ = $1 //TODO 23
	}
|	IMAGINARY_LIT
	{
		$$ = $1 //TODO 24
	}
|	RUNE_LIT
	{
		$$ = $1 //TODO 25
	}
|	STRING_LIT
	{
		$$ = $1 //TODO 26
	}

Block:
	'{' StatementList '}'
	{
		$$ = []Block{"{", $2, "}"} //TODO 27
	}

BreakStmt:
	BREAK BreakStmt1
	{
		$$ = []BreakStmt{"break", $2} //TODO 28
	}

BreakStmt1:
	/* EMPTY */
	{
		$$ = nil //TODO 29
	}
|	Label
	{
		$$ = $1 //TODO 30
	}

BuiltinArgs:
	Type BuiltinArgs1
	{
		$$ = []BuiltinArgs{$1, $2} //TODO 31
	}
|	ArgumentList
	{
		$$ = $1 //TODO 32
	}

BuiltinArgs1:
	/* EMPTY */
	{
		$$ = nil //TODO 33
	}
|	',' ArgumentList
	{
		$$ = []BuiltinArgs1{",", $2} //TODO 34
	}

BuiltinCall:
	IDENTIFIER '(' BuiltinCall1 ')'
	{
		$$ = []BuiltinCall{$1, "(", $3, ")"} //TODO 35
	}

BuiltinCall1:
	/* EMPTY */
	{
		$$ = nil //TODO 36
	}
|	BuiltinArgs BuiltinCall11
	{
		$$ = []BuiltinCall1{$1, $2} //TODO 37
	}

BuiltinCall11:
	/* EMPTY */
	{
		$$ = nil //TODO 38
	}
|	','
	{
		$$ = "," //TODO 39
	}

Call:
	'(' Call1 ')'
	{
		$$ = []Call{"(", $2, ")"} //TODO 40
	}

Call1:
	/* EMPTY */
	{
		$$ = nil //TODO 41
	}
|	ArgumentList Call11
	{
		$$ = []Call1{$1, $2} //TODO 42
	}

Call11:
	/* EMPTY */
	{
		$$ = nil //TODO 43
	}
|	','
	{
		$$ = "," //TODO 44
	}

Channel:
	Expression
	{
		$$ = $1 //TODO 45
	}

ChannelType:
	ChannelType1 ElementType
	{
		$$ = []ChannelType{$1, $2} //TODO 46
	}

ChannelType1:
	CHAN ChannelType11
	{
		$$ = []ChannelType1{"chan", $2} //TODO 47
	}
|	COMM CHAN
	{
		$$ = []ChannelType1{$1, "chan"} //TODO 48
	}

ChannelType11:
	/* EMPTY */
	{
		$$ = nil //TODO 49
	}
|	COMM
	{
		$$ = $1 //TODO 50
	}

CommCase:
	CASE CommCase1
	{
		$$ = []CommCase{"case", $2} //TODO 51
	}
|	DEFAULT
	{
		$$ = "default" //TODO 52
	}

CommCase1:
	SendStmt
	{
		$$ = $1 //TODO 53
	}
|	RecvStmt
	{
		$$ = $1 //TODO 54
	}

CommClause:
	CommCase ':' StatementList
	{
		$$ = []CommClause{$1, ":", $3} //TODO 55
	}

CompositeLit:
	LiteralType LiteralValue
	{
		$$ = []CompositeLit{$1, $2} //TODO 56
	}

Condition:
	Expression
	{
		$$ = $1 //TODO 57
	}

ConstDecl:
	CONST ConstDecl1
	{
		$$ = []ConstDecl{"const", $2} //TODO 58
	}

ConstDecl1:
	ConstSpec
	{
		$$ = $1 //TODO 59
	}
|	'(' ConstDecl11 ')'
	{
		$$ = []ConstDecl1{"(", $2, ")"} //TODO 60
	}

ConstDecl11:
	/* EMPTY */
	{
		$$ = []ConstDecl11(nil) //TODO 61
	}
|	ConstDecl11 ConstSpec ';'
	{
		$$ = append($1.([]ConstDecl11), $2, ";") //TODO 62
	}

ConstSpec:
	IdentifierList ConstSpec1
	{
		$$ = []ConstSpec{$1, $2} //TODO 63
	}

ConstSpec1:
	/* EMPTY */
	{
		$$ = nil //TODO 64
	}
|	ConstSpec11 '=' ExpressionList
	{
		$$ = []ConstSpec1{$1, "=", $3} //TODO 65
	}

ConstSpec11:
	/* EMPTY */
	{
		$$ = nil //TODO 66
	}
|	Type
	{
		$$ = $1 //TODO 67
	}

ContinueStmt:
	CONTINUE ContinueStmt1
	{
		$$ = []ContinueStmt{"continue", $2} //TODO 68
	}

ContinueStmt1:
	/* EMPTY */
	{
		$$ = nil //TODO 69
	}
|	Label
	{
		$$ = $1 //TODO 70
	}

Conversion:
	Type '(' Expression Conversion1 ')'
	{
		$$ = []Conversion{$1, "(", $3, $4, ")"} //TODO 71
	}

Conversion1:
	/* EMPTY */
	{
		$$ = nil //TODO 72
	}
|	','
	{
		$$ = "," //TODO 73
	}

Declaration:
	ConstDecl
	{
		$$ = $1 //TODO 74
	}
|	TypeDecl
	{
		$$ = $1 //TODO 75
	}
|	VarDecl
	{
		$$ = $1 //TODO 76
	}

DeferStmt:
	DEFER Expression
	{
		$$ = []DeferStmt{"defer", $2} //TODO 77
	}

Element:
	Element1 Value
	{
		$$ = []Element{$1, $2} //TODO 78
	}

Element1:
	/* EMPTY */
	{
		$$ = nil //TODO 79
	}
|	Key ':'
	{
		$$ = []Element1{$1, ":"} //TODO 80
	}

ElementIndex:
	Expression
	{
		$$ = $1 //TODO 81
	}

ElementList:
	Element ElementList1
	{
		$$ = []ElementList{$1, $2} //TODO 82
	}

ElementList1:
	/* EMPTY */
	{
		$$ = []ElementList1(nil) //TODO 83
	}
|	ElementList1 ',' Element
	{
		$$ = append($1.([]ElementList1), ",", $3) //TODO 84
	}

ElementType:
	Type
	{
		$$ = $1 //TODO 85
	}

ExprCaseClause:
	ExprSwitchCase ':' StatementList
	{
		$$ = []ExprCaseClause{$1, ":", $3} //TODO 86
	}

ExprSwitchCase:
	CASE ExpressionList
	{
		$$ = []ExprSwitchCase{"case", $2} //TODO 87
	}
|	DEFAULT
	{
		$$ = "default" //TODO 88
	}

ExprSwitchStmt:
	SWITCH ExprSwitchStmt1 ExprSwitchStmt2 '{' ExprSwitchStmt3 '}'
	{
		$$ = []ExprSwitchStmt{"switch", $2, $3, "{", $5, "}"} //TODO 89
	}

ExprSwitchStmt1:
	/* EMPTY */
	{
		$$ = nil //TODO 90
	}
|	SimpleStmt ';'
	{
		$$ = []ExprSwitchStmt1{$1, ";"} //TODO 91
	}

ExprSwitchStmt2:
	/* EMPTY */
	{
		$$ = nil //TODO 92
	}
|	Expression
	{
		$$ = $1 //TODO 93
	}

ExprSwitchStmt3:
	/* EMPTY */
	{
		$$ = []ExprSwitchStmt3(nil) //TODO 94
	}
|	ExprSwitchStmt3 ExprCaseClause
	{
		$$ = append($1.([]ExprSwitchStmt3), $2) //TODO 95
	}

Expression:
	Term Expression1
	{
		$$ = []Expression{$1, $2} //TODO 96
	}

Expression1:
	/* EMPTY */
	{
		$$ = []Expression1(nil) //TODO 97
	}
|	Expression1 OROR Term
	{
		$$ = append($1.([]Expression1), $2, $3) //TODO 98
	}

ExpressionList:
	Expression ExpressionList1
	{
		$$ = []ExpressionList{$1, $2} //TODO 99
	}

ExpressionList1:
	/* EMPTY */
	{
		$$ = []ExpressionList1(nil) //TODO 100
	}
|	ExpressionList1 ',' Expression
	{
		$$ = append($1.([]ExpressionList1), ",", $3) //TODO 101
	}

ExpressionStmt:
	Expression
	{
		$$ = $1 //TODO 102
	}

Factor:
	PrimaryFactor Factor1
	{
		$$ = []Factor{$1, $2} //TODO 103
	}

Factor1:
	/* EMPTY */
	{
		$$ = []Factor1(nil) //TODO 104
	}
|	Factor1 Factor11 PrimaryFactor
	{
		$$ = append($1.([]Factor1), $2, $3) //TODO 105
	}

Factor11:
	GE
	{
		$$ = $1 //TODO 106
	}
|	'>'
	{
		$$ = ">" //TODO 107
	}
|	LE
	{
		$$ = $1 //TODO 108
	}
|	'<'
	{
		$$ = "<" //TODO 109
	}
|	NEQ
	{
		$$ = $1 //TODO 110
	}
|	EQ
	{
		$$ = $1 //TODO 111
	}

FallthroughStmt:
	FALLTHROUGH
	{
		$$ = "fallthrough" //TODO 112
	}

FieldDecl:
	FieldDecl1 FieldDecl2
	{
		$$ = []FieldDecl{$1, $2} //TODO 113
	}

FieldDecl1:
	IdentifierList Type
	{
		$$ = []FieldDecl1{$1, $2} //TODO 114
	}
|	AnonymousField
	{
		$$ = $1 //TODO 115
	}

FieldDecl2:
	/* EMPTY */
	{
		$$ = nil //TODO 116
	}
|	Tag
	{
		$$ = $1 //TODO 117
	}

FieldName:
	IDENTIFIER
	{
		$$ = $1 //TODO 118
	}

ForClause:
	ForClause1 ';' ForClause2 ';' ForClause3
	{
		$$ = []ForClause{$1, ";", $3, ";", $5} //TODO 119
	}

ForClause1:
	/* EMPTY */
	{
		$$ = nil //TODO 120
	}
|	InitStmt
	{
		$$ = $1 //TODO 121
	}

ForClause2:
	/* EMPTY */
	{
		$$ = nil //TODO 122
	}
|	Condition
	{
		$$ = $1 //TODO 123
	}

ForClause3:
	/* EMPTY */
	{
		$$ = nil //TODO 124
	}
|	PostStmt
	{
		$$ = $1 //TODO 125
	}

ForStmt:
	FOR ForStmt1 Block
	{
		$$ = []ForStmt{"for", $2, $3} //TODO 126
	}

ForStmt1:
	/* EMPTY */
	{
		$$ = nil //TODO 127
	}
|	ForStmt11
	{
		$$ = $1 //TODO 128
	}

ForStmt11:
	Condition
	{
		$$ = $1 //TODO 129
	}
|	ForClause
	{
		$$ = $1 //TODO 130
	}
|	RangeClause
	{
		$$ = $1 //TODO 131
	}

Function:
	Signature FunctionBody
	{
		$$ = []Function{$1, $2} //TODO 132
	}

FunctionBody:
	Block
	{
		$$ = $1 //TODO 133
	}

FunctionDecl:
	FUNC FunctionName FunctionDecl1
	{
		$$ = []FunctionDecl{"func", $2, $3} //TODO 134
	}

FunctionDecl1:
	Function
	{
		$$ = $1 //TODO 135
	}
|	Signature
	{
		$$ = $1 //TODO 136
	}

FunctionLit:
	FUNC Function
	{
		$$ = []FunctionLit{"func", $2} //TODO 137
	}

FunctionName:
	IDENTIFIER
	{
		$$ = $1 //TODO 138
	}

FunctionType:
	FUNC Signature
	{
		$$ = []FunctionType{"func", $2} //TODO 139
	}

GoStmt:
	GO Expression
	{
		$$ = []GoStmt{"go", $2} //TODO 140
	}

GotoStmt:
	GOTO Label
	{
		$$ = []GotoStmt{"goto", $2} //TODO 141
	}

IdentifierList:
	IDENTIFIER IdentifierList1
	{
		$$ = []IdentifierList{$1, $2} //TODO 142
	}

IdentifierList1:
	/* EMPTY */
	{
		$$ = []IdentifierList1(nil) //TODO 143
	}
|	IdentifierList1 ',' IDENTIFIER
	{
		$$ = append($1.([]IdentifierList1), ",", $3) //TODO 144
	}

IfStmt:
	IF IfStmt1 Expression Block IfStmt2
	{
		$$ = []IfStmt{"if", $2, $3, $4, $5} //TODO 145
	}

IfStmt1:
	/* EMPTY */
	{
		$$ = nil //TODO 146
	}
|	SimpleStmt ';'
	{
		$$ = []IfStmt1{$1, ";"} //TODO 147
	}

IfStmt2:
	/* EMPTY */
	{
		$$ = nil //TODO 148
	}
|	ELSE IfStmt21
	{
		$$ = []IfStmt2{"else", $2} //TODO 149
	}

IfStmt21:
	IfStmt
	{
		$$ = $1 //TODO 150
	}
|	Block
	{
		$$ = $1 //TODO 151
	}

ImportDecl:
	IMPORT ImportDecl1
	{
		$$ = []ImportDecl{"import", $2} //TODO 152
	}

ImportDecl1:
	ImportSpec
	{
		$$ = $1 //TODO 153
	}
|	'(' ImportDecl11 ')'
	{
		$$ = []ImportDecl1{"(", $2, ")"} //TODO 154
	}

ImportDecl11:
	/* EMPTY */
	{
		$$ = []ImportDecl11(nil) //TODO 155
	}
|	ImportDecl11 ImportSpec ';'
	{
		$$ = append($1.([]ImportDecl11), $2, ";") //TODO 156
	}

ImportPath:
	STRING_LIT
	{
		$$ = $1 //TODO 157
	}

ImportSpec:
	ImportSpec1 ImportPath
	{
		$$ = []ImportSpec{$1, $2} //TODO 158
	}

ImportSpec1:
	/* EMPTY */
	{
		$$ = nil //TODO 159
	}
|	ImportSpec11
	{
		$$ = $1 //TODO 160
	}

ImportSpec11:
	'.'
	{
		$$ = "." //TODO 161
	}
|	PackageName
	{
		$$ = $1 //TODO 162
	}

IncDecStmt:
	Expression IncDecStmt1
	{
		$$ = []IncDecStmt{$1, $2} //TODO 163
	}

IncDecStmt1:
	INC
	{
		$$ = $1 //TODO 164
	}
|	DEC
	{
		$$ = $1 //TODO 165
	}

Index:
	'[' Expression ']'
	{
		$$ = []Index{"[", $2, "]"} //TODO 166
	}

InitStmt:
	SimpleStmt
	{
		$$ = $1 //TODO 167
	}

InterfaceType:
	INTERFACE '{' InterfaceType1 '}'
	{
		$$ = []InterfaceType{"interface", "{", $3, "}"} //TODO 168
	}

InterfaceType1:
	/* EMPTY */
	{
		$$ = []InterfaceType1(nil) //TODO 169
	}
|	InterfaceType1 MethodSpec ';'
	{
		$$ = append($1.([]InterfaceType1), $2, ";") //TODO 170
	}

InterfaceTypeName:
	TypeName
	{
		$$ = $1 //TODO 171
	}

Key:
	FieldName
	{
		$$ = $1 //TODO 172
	}
|	ElementIndex
	{
		$$ = $1 //TODO 173
	}

KeyType:
	Type
	{
		$$ = $1 //TODO 174
	}

Label:
	IDENTIFIER
	{
		$$ = $1 //TODO 175
	}

LabeledStmt:
	Label ':' Statement
	{
		$$ = []LabeledStmt{$1, ":", $3} //TODO 176
	}

Literal:
	BasicLit
	{
		$$ = $1 //TODO 177
	}
|	CompositeLit
	{
		$$ = $1 //TODO 178
	}
|	FunctionLit
	{
		$$ = $1 //TODO 179
	}

LiteralType:
	StructType
	{
		$$ = $1 //TODO 180
	}
|	ArrayType
	{
		$$ = $1 //TODO 181
	}
|	'[' DDD ']' ElementType
	{
		$$ = []LiteralType{"[", $2, "]", $4} //TODO 182
	}
|	SliceType
	{
		$$ = $1 //TODO 183
	}
|	MapType
	{
		$$ = $1 //TODO 184
	}
|	TypeName
	{
		$$ = $1 //TODO 185
	}

LiteralValue:
	'{' LiteralValue1 '}'
	{
		$$ = []LiteralValue{"{", $2, "}"} //TODO 186
	}

LiteralValue1:
	/* EMPTY */
	{
		$$ = nil //TODO 187
	}
|	ElementList LiteralValue11
	{
		$$ = []LiteralValue1{$1, $2} //TODO 188
	}

LiteralValue11:
	/* EMPTY */
	{
		$$ = nil //TODO 189
	}
|	','
	{
		$$ = "," //TODO 190
	}

MapType:
	MAP '[' KeyType ']' ElementType
	{
		$$ = []MapType{"map", "[", $3, "]", $5} //TODO 191
	}

MethodDecl:
	FUNC Receiver MethodName MethodDecl1
	{
		$$ = []MethodDecl{"func", $2, $3, $4} //TODO 192
	}

MethodDecl1:
	Function
	{
		$$ = $1 //TODO 193
	}
|	Signature
	{
		$$ = $1 //TODO 194
	}

MethodExpr:
	ReceiverType '.' MethodName
	{
		$$ = []MethodExpr{$1, ".", $3} //TODO 195
	}

MethodName:
	IDENTIFIER
	{
		$$ = $1 //TODO 196
	}

MethodSpec:
	MethodName Signature
	{
		$$ = []MethodSpec{$1, $2} //TODO 197
	}
|	InterfaceTypeName
	{
		$$ = $1 //TODO 198
	}

Operand:
	Literal
	{
		$$ = $1 //TODO 199
	}
|	OperandName
	{
		$$ = $1 //TODO 200
	}
|	MethodExpr
	{
		$$ = $1 //TODO 201
	}
|	'(' Expression ')'
	{
		$$ = []Operand{"(", $2, ")"} //TODO 202
	}

OperandName:
	IDENTIFIER
	{
		$$ = $1 //TODO 203
	}
|	QualifiedIdent
	{
		$$ = $1 //TODO 204
	}

PackageClause:
	PACKAGE PackageName
	{
		$$ = []PackageClause{"package", $2} //TODO 205
	}

PackageName:
	IDENTIFIER
	{
		$$ = $1 //TODO 206
	}

ParameterDecl:
	ParameterDecl1 ParameterDecl2 Type
	{
		$$ = []ParameterDecl{$1, $2, $3} //TODO 207
	}

ParameterDecl1:
	/* EMPTY */
	{
		$$ = nil //TODO 208
	}
|	IdentifierList
	{
		$$ = $1 //TODO 209
	}

ParameterDecl2:
	/* EMPTY */
	{
		$$ = nil //TODO 210
	}
|	DDD
	{
		$$ = $1 //TODO 211
	}

ParameterList:
	ParameterDecl ParameterList1
	{
		$$ = []ParameterList{$1, $2} //TODO 212
	}

ParameterList1:
	/* EMPTY */
	{
		$$ = []ParameterList1(nil) //TODO 213
	}
|	ParameterList1 ',' ParameterDecl
	{
		$$ = append($1.([]ParameterList1), ",", $3) //TODO 214
	}

Parameters:
	'(' Parameters1 ')'
	{
		$$ = []Parameters{"(", $2, ")"} //TODO 215
	}

Parameters1:
	/* EMPTY */
	{
		$$ = nil //TODO 216
	}
|	ParameterList Parameters11
	{
		$$ = []Parameters1{$1, $2} //TODO 217
	}

Parameters11:
	/* EMPTY */
	{
		$$ = nil //TODO 218
	}
|	','
	{
		$$ = "," //TODO 219
	}

PointerType:
	'*' BaseType
	{
		$$ = []PointerType{"*", $2} //TODO 220
	}

PostStmt:
	SimpleStmt
	{
		$$ = $1 //TODO 221
	}

PrimaryExpr:
	Operand
	{
		$$ = $1 //TODO 222
	}
|	Conversion
	{
		$$ = $1 //TODO 223
	}
|	BuiltinCall
	{
		$$ = $1 //TODO 224
	}
|	PrimaryExpr Selector
	{
		$$ = []PrimaryExpr{$1, $2} //TODO 225
	}
|	PrimaryExpr Index
	{
		$$ = []PrimaryExpr{$1, $2} //TODO 226
	}
|	PrimaryExpr Slice
	{
		$$ = []PrimaryExpr{$1, $2} //TODO 227
	}
|	PrimaryExpr TypeAssertion
	{
		$$ = []PrimaryExpr{$1, $2} //TODO 228
	}
|	PrimaryExpr Call
	{
		$$ = []PrimaryExpr{$1, $2} //TODO 229
	}

PrimaryFactor:
	PrimaryTerm PrimaryFactor1
	{
		$$ = []PrimaryFactor{$1, $2} //TODO 230
	}

PrimaryFactor1:
	/* EMPTY */
	{
		$$ = []PrimaryFactor1(nil) //TODO 231
	}
|	PrimaryFactor1 PrimaryFactor11 PrimaryTerm
	{
		$$ = append($1.([]PrimaryFactor1), $2, $3) //TODO 232
	}

PrimaryFactor11:
	'^'
	{
		$$ = "^" //TODO 233
	}
|	'|'
	{
		$$ = "|" //TODO 234
	}
|	'-'
	{
		$$ = "-" //TODO 235
	}
|	'+'
	{
		$$ = "+" //TODO 236
	}

PrimaryTerm:
	UnaryExpr PrimaryTerm1
	{
		$$ = []PrimaryTerm{$1, $2} //TODO 237
	}

PrimaryTerm1:
	/* EMPTY */
	{
		$$ = []PrimaryTerm1(nil) //TODO 238
	}
|	PrimaryTerm1 PrimaryTerm11 UnaryExpr
	{
		$$ = append($1.([]PrimaryTerm1), $2, $3) //TODO 239
	}

PrimaryTerm11:
	ANDNOT
	{
		$$ = $1 //TODO 240
	}
|	'&'
	{
		$$ = "&" //TODO 241
	}
|	LSH
	{
		$$ = $1 //TODO 242
	}
|	RSH
	{
		$$ = $1 //TODO 243
	}
|	'%'
	{
		$$ = "%" //TODO 244
	}
|	'/'
	{
		$$ = "/" //TODO 245
	}
|	'*'
	{
		$$ = "*" //TODO 246
	}

QualifiedIdent:
	PackageName '.' IDENTIFIER
	{
		$$ = []QualifiedIdent{$1, ".", $3} //TODO 247
	}

RangeClause:
	RangeClause1 RANGE Expression
	{
		$$ = []RangeClause{$1, "range", $3} //TODO 248
	}

RangeClause1:
	ExpressionList '='
	{
		$$ = []RangeClause1{$1, "="} //TODO 249
	}
|	IdentifierList COLAS
	{
		$$ = []RangeClause1{$1, $2} //TODO 250
	}

Receiver:
	'(' Receiver1 Receiver2 BaseTypeName ')'
	{
		$$ = []Receiver{"(", $2, $3, $4, ")"} //TODO 251
	}

Receiver1:
	/* EMPTY */
	{
		$$ = nil //TODO 252
	}
|	IDENTIFIER
	{
		$$ = $1 //TODO 253
	}

Receiver2:
	/* EMPTY */
	{
		$$ = nil //TODO 254
	}
|	'*'
	{
		$$ = "*" //TODO 255
	}

ReceiverType:
	TypeName
	{
		$$ = $1 //TODO 256
	}
|	'(' '*' TypeName ')'
	{
		$$ = []ReceiverType{"(", "*", $3, ")"} //TODO 257
	}
|	'(' ReceiverType ')'
	{
		$$ = []ReceiverType{"(", $2, ")"} //TODO 258
	}

RecvExpr:
	Expression
	{
		$$ = $1 //TODO 259
	}

RecvStmt:
	RecvStmt1 RecvExpr
	{
		$$ = []RecvStmt{$1, $2} //TODO 260
	}

RecvStmt1:
	/* EMPTY */
	{
		$$ = nil //TODO 261
	}
|	RecvStmt11
	{
		$$ = $1 //TODO 262
	}

RecvStmt11:
	ExpressionList '='
	{
		$$ = []RecvStmt11{$1, "="} //TODO 263
	}
|	IdentifierList COLAS
	{
		$$ = []RecvStmt11{$1, $2} //TODO 264
	}

Result:
	Parameters
	{
		$$ = $1 //TODO 265
	}
|	Type
	{
		$$ = $1 //TODO 266
	}

ReturnStmt:
	RETURN ReturnStmt1
	{
		$$ = []ReturnStmt{"return", $2} //TODO 267
	}

ReturnStmt1:
	/* EMPTY */
	{
		$$ = nil //TODO 268
	}
|	ExpressionList
	{
		$$ = $1 //TODO 269
	}

SelectStmt:
	SELECT '{' SelectStmt1 '}'
	{
		$$ = []SelectStmt{"select", "{", $3, "}"} //TODO 270
	}

SelectStmt1:
	/* EMPTY */
	{
		$$ = []SelectStmt1(nil) //TODO 271
	}
|	SelectStmt1 CommClause
	{
		$$ = append($1.([]SelectStmt1), $2) //TODO 272
	}

Selector:
	'.' IDENTIFIER
	{
		$$ = []Selector{".", $2} //TODO 273
	}

SendStmt:
	Channel COMM Expression
	{
		$$ = []SendStmt{$1, $2, $3} //TODO 274
	}

ShortVarDecl:
	IdentifierList COLAS ExpressionList
	{
		$$ = []ShortVarDecl{$1, $2, $3} //TODO 275
	}

Signature:
	Parameters Signature1
	{
		$$ = []Signature{$1, $2} //TODO 276
	}

Signature1:
	/* EMPTY */
	{
		$$ = nil //TODO 277
	}
|	Result
	{
		$$ = $1 //TODO 278
	}

SimpleStmt:
	Assignment
	{
		$$ = $1 //TODO 279
	}
|	ExpressionStmt
	{
		$$ = $1 //TODO 280
	}
|	IncDecStmt
	{
		$$ = $1 //TODO 281
	}
|	SendStmt
	{
		$$ = $1 //TODO 282
	}
|	ShortVarDecl
	{
		$$ = $1 //TODO 283
	}

Slice:
	'[' Slice1
	{
		$$ = []Slice{"[", $2} //TODO 284
	}
|	Slice2 ']'
	{
		$$ = []Slice{$1, "]"} //TODO 285
	}

Slice1:
	Slice11 ':' Slice12
	{
		$$ = []Slice1{$1, ":", $3} //TODO 286
	}

Slice11:
	/* EMPTY */
	{
		$$ = nil //TODO 287
	}
|	Expression
	{
		$$ = $1 //TODO 288
	}

Slice12:
	/* EMPTY */
	{
		$$ = nil //TODO 289
	}
|	Expression
	{
		$$ = $1 //TODO 290
	}

Slice2:
	Slice21 ':' Expression ':' Expression
	{
		$$ = []Slice2{$1, ":", $3, ":", $5} //TODO 291
	}

Slice21:
	/* EMPTY */
	{
		$$ = nil //TODO 292
	}
|	Expression
	{
		$$ = $1 //TODO 293
	}

SliceType:
	'[' ']' ElementType
	{
		$$ = []SliceType{"[", "]", $3} //TODO 294
	}

SourceFile:
	PackageClause ';' SourceFile1 SourceFile2
	{
		$$ = []SourceFile{$1, ";", $3, $4} //TODO 295
	}

SourceFile1:
	/* EMPTY */
	{
		$$ = []SourceFile1(nil) //TODO 296
	}
|	SourceFile1 ImportDecl ';'
	{
		$$ = append($1.([]SourceFile1), $2, ";") //TODO 297
	}

SourceFile2:
	/* EMPTY */
	{
		$$ = []SourceFile2(nil) //TODO 298
	}
|	SourceFile2 TopLevelDecl ';'
	{
		$$ = append($1.([]SourceFile2), $2, ";") //TODO 299
	}

Start:
	SourceFile
	{
		_parserResult = $1 //TODO 300
	}

Statement:
	Declaration
	{
		$$ = $1 //TODO 301
	}
|	LabeledStmt
	{
		$$ = $1 //TODO 302
	}
|	SimpleStmt
	{
		$$ = $1 //TODO 303
	}
|	GoStmt
	{
		$$ = $1 //TODO 304
	}
|	ReturnStmt
	{
		$$ = $1 //TODO 305
	}
|	BreakStmt
	{
		$$ = $1 //TODO 306
	}
|	ContinueStmt
	{
		$$ = $1 //TODO 307
	}
|	GotoStmt
	{
		$$ = $1 //TODO 308
	}
|	FallthroughStmt
	{
		$$ = $1 //TODO 309
	}
|	Block
	{
		$$ = $1 //TODO 310
	}
|	IfStmt
	{
		$$ = $1 //TODO 311
	}
|	SwitchStmt
	{
		$$ = $1 //TODO 312
	}
|	SelectStmt
	{
		$$ = $1 //TODO 313
	}
|	ForStmt
	{
		$$ = $1 //TODO 314
	}
|	DeferStmt
	{
		$$ = $1 //TODO 315
	}

StatementList:
	StatementList1 StatementList2
	{
		$$ = []StatementList{$1, $2} //TODO 316
	}

StatementList1:
	/* EMPTY */
	{
		$$ = nil //TODO 317
	}
|	Statement
	{
		$$ = $1 //TODO 318
	}

StatementList2:
	/* EMPTY */
	{
		$$ = []StatementList2(nil) //TODO 319
	}
|	StatementList2 ';' StatementList21
	{
		$$ = append($1.([]StatementList2), ";", $3) //TODO 320
	}

StatementList21:
	/* EMPTY */
	{
		$$ = nil //TODO 321
	}
|	Statement
	{
		$$ = $1 //TODO 322
	}

StructType:
	STRUCT '{' StructType1 '}'
	{
		$$ = []StructType{"struct", "{", $3, "}"} //TODO 323
	}

StructType1:
	/* EMPTY */
	{
		$$ = []StructType1(nil) //TODO 324
	}
|	StructType1 FieldDecl ';'
	{
		$$ = append($1.([]StructType1), $2, ";") //TODO 325
	}

SwitchStmt:
	ExprSwitchStmt
	{
		$$ = $1 //TODO 326
	}
|	TypeSwitchStmt
	{
		$$ = $1 //TODO 327
	}

Tag:
	STRING_LIT
	{
		$$ = $1 //TODO 328
	}

Term:
	Factor Term1
	{
		$$ = []Term{$1, $2} //TODO 329
	}

Term1:
	/* EMPTY */
	{
		$$ = []Term1(nil) //TODO 330
	}
|	Term1 ANDAND Factor
	{
		$$ = append($1.([]Term1), $2, $3) //TODO 331
	}

TopLevelDecl:
	Declaration
	{
		$$ = $1 //TODO 332
	}
|	FunctionDecl
	{
		$$ = $1 //TODO 333
	}
|	MethodDecl
	{
		$$ = $1 //TODO 334
	}

Type:
	TypeName
	{
		$$ = $1 //TODO 335
	}
|	TypeLit
	{
		$$ = $1 //TODO 336
	}
|	'(' Type ')'
	{
		$$ = []Type{"(", $2, ")"} //TODO 337
	}

TypeAssertion:
	'.' '(' Type ')'
	{
		$$ = []TypeAssertion{".", "(", $3, ")"} //TODO 338
	}

TypeCaseClause:
	TypeSwitchCase ':' StatementList
	{
		$$ = []TypeCaseClause{$1, ":", $3} //TODO 339
	}

TypeDecl:
	TYPE TypeDecl1
	{
		$$ = []TypeDecl{"type", $2} //TODO 340
	}

TypeDecl1:
	TypeSpec
	{
		$$ = $1 //TODO 341
	}
|	'(' TypeDecl11 ')'
	{
		$$ = []TypeDecl1{"(", $2, ")"} //TODO 342
	}

TypeDecl11:
	/* EMPTY */
	{
		$$ = []TypeDecl11(nil) //TODO 343
	}
|	TypeDecl11 TypeSpec ';'
	{
		$$ = append($1.([]TypeDecl11), $2, ";") //TODO 344
	}

TypeList:
	Type TypeList1
	{
		$$ = []TypeList{$1, $2} //TODO 345
	}

TypeList1:
	/* EMPTY */
	{
		$$ = []TypeList1(nil) //TODO 346
	}
|	TypeList1 ',' Type
	{
		$$ = append($1.([]TypeList1), ",", $3) //TODO 347
	}

TypeLit:
	ArrayType
	{
		$$ = $1 //TODO 348
	}
|	StructType
	{
		$$ = $1 //TODO 349
	}
|	PointerType
	{
		$$ = $1 //TODO 350
	}
|	FunctionType
	{
		$$ = $1 //TODO 351
	}
|	InterfaceType
	{
		$$ = $1 //TODO 352
	}
|	SliceType
	{
		$$ = $1 //TODO 353
	}
|	MapType
	{
		$$ = $1 //TODO 354
	}
|	ChannelType
	{
		$$ = $1 //TODO 355
	}

TypeName:
	IDENTIFIER
	{
		$$ = $1 //TODO 356
	}
|	QualifiedIdent
	{
		$$ = $1 //TODO 357
	}

TypeSpec:
	IDENTIFIER Type
	{
		$$ = []TypeSpec{$1, $2} //TODO 358
	}

TypeSwitchCase:
	CASE TypeList
	{
		$$ = []TypeSwitchCase{"case", $2} //TODO 359
	}
|	DEFAULT
	{
		$$ = "default" //TODO 360
	}

TypeSwitchGuard:
	TypeSwitchGuard1 PrimaryExpr '.' '(' TYPE ')'
	{
		$$ = []TypeSwitchGuard{$1, $2, ".", "(", "type", ")"} //TODO 361
	}

TypeSwitchGuard1:
	/* EMPTY */
	{
		$$ = nil //TODO 362
	}
|	IDENTIFIER COLAS
	{
		$$ = []TypeSwitchGuard1{$1, $2} //TODO 363
	}

TypeSwitchStmt:
	SWITCH TypeSwitchStmt1 TypeSwitchGuard '{' TypeSwitchStmt2 '}'
	{
		$$ = []TypeSwitchStmt{"switch", $2, $3, "{", $5, "}"} //TODO 364
	}

TypeSwitchStmt1:
	/* EMPTY */
	{
		$$ = nil //TODO 365
	}
|	SimpleStmt ';'
	{
		$$ = []TypeSwitchStmt1{$1, ";"} //TODO 366
	}

TypeSwitchStmt2:
	/* EMPTY */
	{
		$$ = []TypeSwitchStmt2(nil) //TODO 367
	}
|	TypeSwitchStmt2 TypeCaseClause
	{
		$$ = append($1.([]TypeSwitchStmt2), $2) //TODO 368
	}

UnaryExpr:
	UnaryExpr1 PrimaryExpr
	{
		$$ = []UnaryExpr{$1, $2} //TODO 369
	}

UnaryExpr1:
	/* EMPTY */
	{
		$$ = nil //TODO 370
	}
|	UnaryExpr11
	{
		$$ = $1 //TODO 371
	}

UnaryExpr11:
	'^'
	{
		$$ = "^" //TODO 372
	}
|	'!'
	{
		$$ = "!" //TODO 373
	}
|	'-'
	{
		$$ = "-" //TODO 374
	}
|	'+'
	{
		$$ = "+" //TODO 375
	}

Value:
	Expression
	{
		$$ = $1 //TODO 376
	}
|	LiteralValue
	{
		$$ = $1 //TODO 377
	}

VarDecl:
	VAR VarDecl1
	{
		$$ = []VarDecl{"var", $2} //TODO 378
	}

VarDecl1:
	VarSpec
	{
		$$ = $1 //TODO 379
	}
|	'(' VarDecl11 ')'
	{
		$$ = []VarDecl1{"(", $2, ")"} //TODO 380
	}

VarDecl11:
	/* EMPTY */
	{
		$$ = []VarDecl11(nil) //TODO 381
	}
|	VarDecl11 VarSpec ';'
	{
		$$ = append($1.([]VarDecl11), $2, ";") //TODO 382
	}

VarSpec:
	IdentifierList VarSpec1
	{
		$$ = []VarSpec{$1, $2} //TODO 383
	}

VarSpec1:
	Type VarSpec11
	{
		$$ = []VarSpec1{$1, $2} //TODO 384
	}
|	'=' ExpressionList
	{
		$$ = []VarSpec1{"=", $2} //TODO 385
	}

VarSpec11:
	/* EMPTY */
	{
		$$ = nil //TODO 386
	}
|	'=' ExpressionList
	{
		$$ = []VarSpec11{"=", $2} //TODO 387
	}

%%

//TODO remove demo stuff below

var _parserResult interface{}

type (
	AnonymousField interface{}
	ArgumentList interface{}
	ArgumentList1 interface{}
	ArrayLength interface{}
	ArrayType interface{}
	Assignment interface{}
	BaseType interface{}
	BaseTypeName interface{}
	BasicLit interface{}
	Block interface{}
	BreakStmt interface{}
	BreakStmt1 interface{}
	BuiltinArgs interface{}
	BuiltinArgs1 interface{}
	BuiltinCall interface{}
	BuiltinCall1 interface{}
	BuiltinCall11 interface{}
	Call interface{}
	Call1 interface{}
	Call11 interface{}
	Channel interface{}
	ChannelType interface{}
	ChannelType1 interface{}
	ChannelType11 interface{}
	CommCase interface{}
	CommCase1 interface{}
	CommClause interface{}
	CompositeLit interface{}
	Condition interface{}
	ConstDecl interface{}
	ConstDecl1 interface{}
	ConstDecl11 interface{}
	ConstSpec interface{}
	ConstSpec1 interface{}
	ConstSpec11 interface{}
	ContinueStmt interface{}
	ContinueStmt1 interface{}
	Conversion interface{}
	Conversion1 interface{}
	Declaration interface{}
	DeferStmt interface{}
	Element interface{}
	Element1 interface{}
	ElementIndex interface{}
	ElementList interface{}
	ElementList1 interface{}
	ElementType interface{}
	ExprCaseClause interface{}
	ExprSwitchCase interface{}
	ExprSwitchStmt interface{}
	ExprSwitchStmt1 interface{}
	ExprSwitchStmt2 interface{}
	ExprSwitchStmt3 interface{}
	Expression interface{}
	Expression1 interface{}
	ExpressionList interface{}
	ExpressionList1 interface{}
	ExpressionStmt interface{}
	Factor interface{}
	Factor1 interface{}
	Factor11 interface{}
	FallthroughStmt interface{}
	FieldDecl interface{}
	FieldDecl1 interface{}
	FieldDecl2 interface{}
	FieldName interface{}
	ForClause interface{}
	ForClause1 interface{}
	ForClause2 interface{}
	ForClause3 interface{}
	ForStmt interface{}
	ForStmt1 interface{}
	ForStmt11 interface{}
	Function interface{}
	FunctionBody interface{}
	FunctionDecl interface{}
	FunctionDecl1 interface{}
	FunctionLit interface{}
	FunctionName interface{}
	FunctionType interface{}
	GoStmt interface{}
	GotoStmt interface{}
	IdentifierList interface{}
	IdentifierList1 interface{}
	IfStmt interface{}
	IfStmt1 interface{}
	IfStmt2 interface{}
	IfStmt21 interface{}
	ImportDecl interface{}
	ImportDecl1 interface{}
	ImportDecl11 interface{}
	ImportPath interface{}
	ImportSpec interface{}
	ImportSpec1 interface{}
	ImportSpec11 interface{}
	IncDecStmt interface{}
	IncDecStmt1 interface{}
	Index interface{}
	InitStmt interface{}
	InterfaceType interface{}
	InterfaceType1 interface{}
	InterfaceTypeName interface{}
	Key interface{}
	KeyType interface{}
	Label interface{}
	LabeledStmt interface{}
	Literal interface{}
	LiteralType interface{}
	LiteralValue interface{}
	LiteralValue1 interface{}
	LiteralValue11 interface{}
	MapType interface{}
	MethodDecl interface{}
	MethodDecl1 interface{}
	MethodExpr interface{}
	MethodName interface{}
	MethodSpec interface{}
	Operand interface{}
	OperandName interface{}
	PackageClause interface{}
	PackageName interface{}
	ParameterDecl interface{}
	ParameterDecl1 interface{}
	ParameterDecl2 interface{}
	ParameterList interface{}
	ParameterList1 interface{}
	Parameters interface{}
	Parameters1 interface{}
	Parameters11 interface{}
	PointerType interface{}
	PostStmt interface{}
	PrimaryExpr interface{}
	PrimaryFactor interface{}
	PrimaryFactor1 interface{}
	PrimaryFactor11 interface{}
	PrimaryTerm interface{}
	PrimaryTerm1 interface{}
	PrimaryTerm11 interface{}
	QualifiedIdent interface{}
	RangeClause interface{}
	RangeClause1 interface{}
	Receiver interface{}
	Receiver1 interface{}
	Receiver2 interface{}
	ReceiverType interface{}
	RecvExpr interface{}
	RecvStmt interface{}
	RecvStmt1 interface{}
	RecvStmt11 interface{}
	Result interface{}
	ReturnStmt interface{}
	ReturnStmt1 interface{}
	SelectStmt interface{}
	SelectStmt1 interface{}
	Selector interface{}
	SendStmt interface{}
	ShortVarDecl interface{}
	Signature interface{}
	Signature1 interface{}
	SimpleStmt interface{}
	Slice interface{}
	Slice1 interface{}
	Slice11 interface{}
	Slice12 interface{}
	Slice2 interface{}
	Slice21 interface{}
	SliceType interface{}
	SourceFile interface{}
	SourceFile1 interface{}
	SourceFile2 interface{}
	Start interface{}
	Statement interface{}
	StatementList interface{}
	StatementList1 interface{}
	StatementList2 interface{}
	StatementList21 interface{}
	StructType interface{}
	StructType1 interface{}
	SwitchStmt interface{}
	Tag interface{}
	Term interface{}
	Term1 interface{}
	TopLevelDecl interface{}
	Type interface{}
	TypeAssertion interface{}
	TypeCaseClause interface{}
	TypeDecl interface{}
	TypeDecl1 interface{}
	TypeDecl11 interface{}
	TypeList interface{}
	TypeList1 interface{}
	TypeLit interface{}
	TypeName interface{}
	TypeSpec interface{}
	TypeSwitchCase interface{}
	TypeSwitchGuard interface{}
	TypeSwitchGuard1 interface{}
	TypeSwitchStmt interface{}
	TypeSwitchStmt1 interface{}
	TypeSwitchStmt2 interface{}
	UnaryExpr interface{}
	UnaryExpr1 interface{}
	UnaryExpr11 interface{}
	Value interface{}
	VarDecl interface{}
	VarDecl1 interface{}
	VarDecl11 interface{}
	VarSpec interface{}
	VarSpec1 interface{}
	VarSpec11 interface{}
)
	
func _dump() {
	s := fmt.Sprintf("%#v", _parserResult)
	s = strings.Replace(s, "%", "%%", -1)
	s = strings.Replace(s, "{", "{%i\n", -1)
	s = strings.Replace(s, "}", "%u\n}", -1)
	s = strings.Replace(s, ", ", ",\n", -1)
	var buf bytes.Buffer
	strutil.IndentFormatter(&buf, ". ").Format(s)
	buf.WriteString("\n")
	a := strings.Split(buf.String(), "\n")
	for _, v := range a {
		if strings.HasSuffix(v, "(nil)") || strings.HasSuffix(v, "(nil),") {
			continue
		}
	
		fmt.Println(v)
	}
}

// End of demo stuff
