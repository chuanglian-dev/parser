%{

//TODO Put your favorite license here
		
// yacc source generated by ebnf2y[1]
// at 2013-08-08 11:55:35.450963026 +0200 CEST.
//
// CAUTION: If this file is a Go source file (*.go), it was generated
// automatically by '$ go tool yacc' from a *.y file - DO NOT EDIT in that case!
// 
//   [1]: http://github.com/cznic/ebnf2y

package main //TODO real package name

//TODO required only be the demo _dump function
import (
	"bytes"
	"fmt"
	"strings"

	"github.com/cznic/strutil"
)

%}

%union {
	item interface{} //TODO insert real field(s)
}

%token	ANDAND
%token	ANDNOT
%token	ASSIGN_OP
%token	CHANCOMM
%token	COLAS
%token	COMM
%token	COMMCHAN
%token	DDD
%token	DEC
%token	EQ
%token	FLOAT_LIT
%token	GE
%token	IDENTIFIER_BUILT_IN
%token	IDENTIFIER_FIELD
%token	IDENTIFIER_LABEL
%token	IDENTIFIER_LIST
%token	IDENTIFIER_METHOD
%token	IDENTIFIER_OPERAND
%token	IDENTIFIER_SELECTOR
%token	IDENTIFIER_TYPE
%token	IMAGINARY_LIT
%token	INC
%token	INT_LIT
%token	LE
%token	LSH
%token	NAME
%token	NE
%token	OROR
%token	RSH
%token	RUNE_LIT
%token	STRING_LIT

%type	<item> 	/*TODO real type(s), if/where applicable */
	ANDAND
	ANDNOT
	ASSIGN_OP
	CHANCOMM
	COLAS
	COMM
	COMMCHAN
	DDD
	DEC
	EQ
	FLOAT_LIT
	GE
	IDENTIFIER_BUILT_IN
	IDENTIFIER_FIELD
	IDENTIFIER_LABEL
	IDENTIFIER_LIST
	IDENTIFIER_METHOD
	IDENTIFIER_OPERAND
	IDENTIFIER_SELECTOR
	IDENTIFIER_TYPE
	IMAGINARY_LIT
	INC
	INT_LIT
	LE
	LSH
	NAME
	NE
	OROR
	RSH
	RUNE_LIT
	STRING_LIT

%token BREAK
%token CASE
%token CHAN
%token CONST
%token CONTINUE
%token DEFAULT
%token DEFER
%token ELSE
%token FALLTHROUGH
%token FOR
%token FUNC
%token GO
%token GOTO
%token IF
%token IMPORT
%token INTERFACE
%token MAP
%token PACKAGE
%token RANGE
%token RETURN
%token SELECT
%token STRUCT
%token SWITCH
%token TYPE
%token VAR

%type	<item> 	/*TODO real type(s), if/where applicable */
	ArgumentList
	ArrayType
	BaseTypeName
	Block
	BuiltinCall11
	Condition
	ConstDecl11
	ConstSpec
	Declaration
	Element
	ElementList1
	ElementType
	ExprSwitchStmt3
	Expression
	ExpressionList
	ExpressionList1
	FieldDecl1
	ForClause2
	Function
	IfStmt
	ImportDecl11
	ImportPath
	ImportSpec
	InterfaceType1
	Label
	LiteralValue
	MapType
	MethodDecl1
	ParameterDecl
	ParameterList1
	Parameters
	PrimaryExpr2
	Receiver1
	ReceiverType
	SelectStmt1
	SendStmt
	Signature
	SimpleStmt
	Slice2
	SliceType
	SourceFile
	SourceFile1
	SourceFile2
	Start
	Statement
	StatementList
	StatementList1
	StructType
	StructType1
	Type
	TypeDecl11
	TypeList1
	TypeName
	TypeSpec
	TypeSwitchStmt2
	UnaryExpr
	Value
	VarDecl11
	VarSpec

/*TODO %left, %right, ... declarations */

%start Start

%%

ArgumentList:
	ExpressionList
	{
		$$ = $1 //TODO 1
	}
|	ExpressionList DDD
	{
		$$ = []ArgumentList{$1, $2} //TODO 2
	}

ArrayType:
	'[' Expression ']' ElementType
	{
		$$ = []ArrayType{"[", $2, "]", $4} //TODO 3
	}

BaseTypeName:
	IDENTIFIER_TYPE
	{
		$$ = $1 //TODO 4
	}

Block:
	'{' StatementList '}'
	{
		$$ = []Block{"{", $2, "}"} //TODO 5
	}

BuiltinCall11:
	/* EMPTY */
	{
		$$ = nil //TODO 6
	}
|	','
	{
		$$ = "," //TODO 7
	}

Condition:
	Expression
	{
		$$ = $1 //TODO 8
	}

ConstDecl11:
	/* EMPTY */
	{
		$$ = []ConstDecl11(nil) //TODO 9
	}
|	ConstDecl11 ConstSpec ';'
	{
		$$ = append($1.([]ConstDecl11), $2, ";") //TODO 10
	}

ConstSpec:
	IDENTIFIER_LIST
	{
		$$ = $1 //TODO 11
	}
|	IDENTIFIER_LIST '=' ExpressionList
	{
		$$ = []ConstSpec{$1, "=", $3} //TODO 12
	}
|	IDENTIFIER_LIST Type '=' ExpressionList
	{
		$$ = []ConstSpec{$1, $2, "=", $4} //TODO 13
	}

Declaration:
	CONST ConstSpec
	{
		$$ = []Declaration{"const", $2} //TODO 14
	}
|	CONST '(' ConstDecl11 ')'
	{
		$$ = []Declaration{"const", "(", $3, ")"} //TODO 15
	}
|	TYPE TypeSpec
	{
		$$ = []Declaration{"type", $2} //TODO 16
	}
|	TYPE '(' TypeDecl11 ')'
	{
		$$ = []Declaration{"type", "(", $3, ")"} //TODO 17
	}
|	VAR VarSpec
	{
		$$ = []Declaration{"var", $2} //TODO 18
	}
|	VAR '(' VarDecl11 ')'
	{
		$$ = []Declaration{"var", "(", $3, ")"} //TODO 19
	}

Element:
	Value
	{
		$$ = $1 //TODO 20
	}
|	IDENTIFIER_FIELD ':' Value
	{
		$$ = []Element{$1, ":", $3} //TODO 21
	}
|	Expression ':' Value
	{
		$$ = []Element{$1, ":", $3} //TODO 22
	}

ElementList1:
	/* EMPTY */
	{
		$$ = []ElementList1(nil) //TODO 23
	}
|	ElementList1 ',' Element
	{
		$$ = append($1.([]ElementList1), ",", $3) //TODO 24
	}

ElementType:
	Type
	{
		$$ = $1 //TODO 25
	}

ExprSwitchStmt3:
	/* EMPTY */
	{
		$$ = []ExprSwitchStmt3(nil) //TODO 26
	}
|	ExprSwitchStmt3 CASE ExpressionList ':' StatementList
	{
		$$ = append($1.([]ExprSwitchStmt3), "case", $3, ":", $5) //TODO 27
	}
|	ExprSwitchStmt3 DEFAULT ':' StatementList
	{
		$$ = append($1.([]ExprSwitchStmt3), "default", ":", $4) //TODO 28
	}

Expression:
	UnaryExpr
	{
		$$ = $1 //TODO 29
	}
|	Expression OROR UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 30
	}
|	Expression ANDAND UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 31
	}
|	Expression EQ UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 32
	}
|	Expression NE UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 33
	}
|	Expression '<' UnaryExpr
	{
		$$ = []Expression{$1, "<", $3} //TODO 34
	}
|	Expression LE UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 35
	}
|	Expression '>' UnaryExpr
	{
		$$ = []Expression{$1, ">", $3} //TODO 36
	}
|	Expression GE UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 37
	}
|	Expression '+' UnaryExpr
	{
		$$ = []Expression{$1, "+", $3} //TODO 38
	}
|	Expression '-' UnaryExpr
	{
		$$ = []Expression{$1, "-", $3} //TODO 39
	}
|	Expression '|' UnaryExpr
	{
		$$ = []Expression{$1, "|", $3} //TODO 40
	}
|	Expression '^' UnaryExpr
	{
		$$ = []Expression{$1, "^", $3} //TODO 41
	}
|	Expression '*' UnaryExpr
	{
		$$ = []Expression{$1, "*", $3} //TODO 42
	}
|	Expression '/' UnaryExpr
	{
		$$ = []Expression{$1, "/", $3} //TODO 43
	}
|	Expression '%' UnaryExpr
	{
		$$ = []Expression{$1, "%", $3} //TODO 44
	}
|	Expression LSH UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 45
	}
|	Expression RSH UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 46
	}
|	Expression '&' UnaryExpr
	{
		$$ = []Expression{$1, "&", $3} //TODO 47
	}
|	Expression ANDNOT UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 48
	}

ExpressionList:
	Expression ExpressionList1
	{
		$$ = []ExpressionList{$1, $2} //TODO 49
	}

ExpressionList1:
	/* EMPTY */
	{
		$$ = []ExpressionList1(nil) //TODO 50
	}
|	ExpressionList1 ',' Expression
	{
		$$ = append($1.([]ExpressionList1), ",", $3) //TODO 51
	}

FieldDecl1:
	IDENTIFIER_LIST Type
	{
		$$ = []FieldDecl1{$1, $2} //TODO 52
	}
|	TypeName
	{
		$$ = $1 //TODO 53
	}
|	'*' TypeName
	{
		$$ = []FieldDecl1{"*", $2} //TODO 54
	}

ForClause2:
	/* EMPTY */
	{
		$$ = nil //TODO 55
	}
|	Condition
	{
		$$ = $1 //TODO 56
	}

Function:
	Signature Block
	{
		$$ = []Function{$1, $2} //TODO 57
	}

IfStmt:
	IF Expression Block
	{
		$$ = []IfStmt{"if", $2, $3} //TODO 58
	}
|	IF SimpleStmt ';' Expression Block
	{
		$$ = []IfStmt{"if", $2, ";", $4, $5} //TODO 59
	}
|	IF Expression Block ELSE IfStmt
	{
		$$ = []IfStmt{"if", $2, $3, "else", $5} //TODO 60
	}
|	IF SimpleStmt ';' Expression Block ELSE IfStmt
	{
		$$ = []IfStmt{"if", $2, ";", $4, $5, "else", $7} //TODO 61
	}
|	IF Expression Block ELSE Block
	{
		$$ = []IfStmt{"if", $2, $3, "else", $5} //TODO 62
	}
|	IF SimpleStmt ';' Expression Block ELSE Block
	{
		$$ = []IfStmt{"if", $2, ";", $4, $5, "else", $7} //TODO 63
	}

ImportDecl11:
	/* EMPTY */
	{
		$$ = []ImportDecl11(nil) //TODO 64
	}
|	ImportDecl11 ImportSpec ';'
	{
		$$ = append($1.([]ImportDecl11), $2, ";") //TODO 65
	}

ImportPath:
	STRING_LIT
	{
		$$ = $1 //TODO 66
	}

ImportSpec:
	ImportPath
	{
		$$ = $1 //TODO 67
	}
|	'.' ImportPath
	{
		$$ = []ImportSpec{".", $2} //TODO 68
	}
|	NAME ImportPath
	{
		$$ = []ImportSpec{$1, $2} //TODO 69
	}

InterfaceType1:
	/* EMPTY */
	{
		$$ = []InterfaceType1(nil) //TODO 70
	}
|	InterfaceType1 NAME Signature ';'
	{
		$$ = append($1.([]InterfaceType1), $2, $3, ";") //TODO 71
	}
|	InterfaceType1 NAME ';'
	{
		$$ = append($1.([]InterfaceType1), $2, ";") //TODO 72
	}
|	InterfaceType1 NAME '.' NAME ';'
	{
		$$ = append($1.([]InterfaceType1), $2, ".", $4, ";") //TODO 73
	}

Label:
	IDENTIFIER_LABEL
	{
		$$ = $1 //TODO 74
	}

LiteralValue:
	'{' '}'
	{
		$$ = []LiteralValue{"{", "}"} //TODO 75
	}
|	'{' Element ElementList1 '}'
	{
		$$ = []LiteralValue{"{", $2, $3, "}"} //TODO 76
	}
|	'{' Element ElementList1 ',' '}'
	{
		$$ = []LiteralValue{"{", $2, $3, ",", "}"} //TODO 77
	}

MapType:
	MAP '[' Type ']' ElementType
	{
		$$ = []MapType{"map", "[", $3, "]", $5} //TODO 78
	}

MethodDecl1:
	Function
	{
		$$ = $1 //TODO 79
	}
|	Signature
	{
		$$ = $1 //TODO 80
	}

ParameterDecl:
	Type
	{
		$$ = $1 //TODO 81
	}
|	DDD Type
	{
		$$ = []ParameterDecl{$1, $2} //TODO 82
	}
|	IDENTIFIER_LIST Type
	{
		$$ = []ParameterDecl{$1, $2} //TODO 83
	}
|	IDENTIFIER_LIST DDD Type
	{
		$$ = []ParameterDecl{$1, $2, $3} //TODO 84
	}

ParameterList1:
	/* EMPTY */
	{
		$$ = []ParameterList1(nil) //TODO 85
	}
|	ParameterList1 ',' ParameterDecl
	{
		$$ = append($1.([]ParameterList1), ",", $3) //TODO 86
	}

Parameters:
	'(' ')'
	{
		$$ = []Parameters{"(", ")"} //TODO 87
	}
|	'(' ParameterDecl ParameterList1 ')'
	{
		$$ = []Parameters{"(", $2, $3, ")"} //TODO 88
	}
|	'(' ParameterDecl ParameterList1 ',' ')'
	{
		$$ = []Parameters{"(", $2, $3, ",", ")"} //TODO 89
	}

PrimaryExpr2:
	/* EMPTY */
	{
		$$ = []PrimaryExpr2(nil) //TODO 90
	}
|	PrimaryExpr2 '.' IDENTIFIER_SELECTOR
	{
		$$ = append($1.([]PrimaryExpr2), ".", $3) //TODO 91
	}
|	PrimaryExpr2 '[' Expression ']'
	{
		$$ = append($1.([]PrimaryExpr2), "[", $3, "]") //TODO 92
	}
|	PrimaryExpr2 '[' ':' Slice2 ']'
	{
		$$ = append($1.([]PrimaryExpr2), "[", ":", $4, "]") //TODO 93
	}
|	PrimaryExpr2 '[' Expression ':' Slice2 ']'
	{
		$$ = append($1.([]PrimaryExpr2), "[", $3, ":", $5, "]") //TODO 94
	}
|	PrimaryExpr2 '.' '(' Type ')'
	{
		$$ = append($1.([]PrimaryExpr2), ".", "(", $4, ")") //TODO 95
	}
|	PrimaryExpr2 '(' ')'
	{
		$$ = append($1.([]PrimaryExpr2), "(", ")") //TODO 96
	}
|	PrimaryExpr2 '(' ArgumentList ')'
	{
		$$ = append($1.([]PrimaryExpr2), "(", $3, ")") //TODO 97
	}
|	PrimaryExpr2 '(' ArgumentList ',' ')'
	{
		$$ = append($1.([]PrimaryExpr2), "(", $3, ",", ")") //TODO 98
	}

Receiver1:
	/* EMPTY */
	{
		$$ = nil //TODO 99
	}
|	NAME
	{
		$$ = $1 //TODO 100
	}

ReceiverType:
	TypeName
	{
		$$ = $1 //TODO 101
	}
|	'(' '*' TypeName ')'
	{
		$$ = []ReceiverType{"(", "*", $3, ")"} //TODO 102
	}
|	'(' ReceiverType ')'
	{
		$$ = []ReceiverType{"(", $2, ")"} //TODO 103
	}

SelectStmt1:
	/* EMPTY */
	{
		$$ = []SelectStmt1(nil) //TODO 104
	}
|	SelectStmt1 CASE SendStmt ':' StatementList
	{
		$$ = append($1.([]SelectStmt1), "case", $3, ":", $5) //TODO 105
	}
|	SelectStmt1 CASE Expression ':' StatementList
	{
		$$ = append($1.([]SelectStmt1), "case", $3, ":", $5) //TODO 106
	}
|	SelectStmt1 CASE ExpressionList '=' Expression ':' StatementList
	{
		$$ = append($1.([]SelectStmt1), "case", $3, "=", $5, ":", $7) //TODO 107
	}
|	SelectStmt1 CASE IDENTIFIER_LIST COLAS Expression ':' StatementList
	{
		$$ = append($1.([]SelectStmt1), "case", $3, $4, $5, ":", $7) //TODO 108
	}
|	SelectStmt1 DEFAULT ':' StatementList
	{
		$$ = append($1.([]SelectStmt1), "default", ":", $4) //TODO 109
	}

SendStmt:
	Expression COMM Expression
	{
		$$ = []SendStmt{$1, $2, $3} //TODO 110
	}

Signature:
	Parameters
	{
		$$ = $1 //TODO 111
	}
|	Parameters Parameters
	{
		$$ = []Signature{$1, $2} //TODO 112
	}
|	Parameters Type
	{
		$$ = []Signature{$1, $2} //TODO 113
	}

SimpleStmt:
	/* EMPTY */
	{
		$$ = nil //TODO 114
	}
|	Expression
	{
		$$ = $1 //TODO 115
	}
|	SendStmt
	{
		$$ = $1 //TODO 116
	}
|	Expression INC
	{
		$$ = []SimpleStmt{$1, $2} //TODO 117
	}
|	Expression DEC
	{
		$$ = []SimpleStmt{$1, $2} //TODO 118
	}
|	ExpressionList ASSIGN_OP ExpressionList
	{
		$$ = []SimpleStmt{$1, $2, $3} //TODO 119
	}
|	IDENTIFIER_LIST COLAS ExpressionList
	{
		$$ = []SimpleStmt{$1, $2, $3} //TODO 120
	}

Slice2:
	/* EMPTY */
	{
		$$ = nil //TODO 121
	}
|	Expression
	{
		$$ = $1 //TODO 122
	}

SliceType:
	'[' ']' ElementType
	{
		$$ = []SliceType{"[", "]", $3} //TODO 123
	}

SourceFile:
	PACKAGE NAME ';' SourceFile1 SourceFile2
	{
		$$ = []SourceFile{"package", $2, ";", $4, $5} //TODO 124
	}

SourceFile1:
	/* EMPTY */
	{
		$$ = []SourceFile1(nil) //TODO 125
	}
|	SourceFile1 IMPORT ImportSpec ';'
	{
		$$ = append($1.([]SourceFile1), "import", $3, ";") //TODO 126
	}
|	SourceFile1 IMPORT '(' ImportDecl11 ')' ';'
	{
		$$ = append($1.([]SourceFile1), "import", "(", $4, ")", ";") //TODO 127
	}

SourceFile2:
	/* EMPTY */
	{
		$$ = []SourceFile2(nil) //TODO 128
	}
|	SourceFile2 Declaration ';'
	{
		$$ = append($1.([]SourceFile2), $2, ";") //TODO 129
	}
|	SourceFile2 FUNC NAME Function ';'
	{
		$$ = append($1.([]SourceFile2), "func", $3, $4, ";") //TODO 130
	}
|	SourceFile2 FUNC NAME Signature ';'
	{
		$$ = append($1.([]SourceFile2), "func", $3, $4, ";") //TODO 131
	}
|	SourceFile2 FUNC '(' Receiver1 BaseTypeName ')' NAME MethodDecl1 ';'
	{
		$$ = append($1.([]SourceFile2), "func", "(", $4, $5, ")", $7, $8, ";") //TODO 132
	}
|	SourceFile2 FUNC '(' Receiver1 '*' BaseTypeName ')' NAME MethodDecl1 ';'
	{
		$$ = append($1.([]SourceFile2), "func", "(", $4, "*", $6, ")", $8, $9, ";") //TODO 133
	}

Start:
	SourceFile
	{
		_parserResult = $1 //TODO 134
	}

Statement:
	Declaration
	{
		$$ = $1 //TODO 135
	}
|	IDENTIFIER_LABEL Statement
	{
		$$ = []Statement{$1, $2} //TODO 136
	}
|	SimpleStmt
	{
		$$ = $1 //TODO 137
	}
|	GO Expression
	{
		$$ = []Statement{"go", $2} //TODO 138
	}
|	RETURN
	{
		$$ = "return" //TODO 139
	}
|	RETURN ExpressionList
	{
		$$ = []Statement{"return", $2} //TODO 140
	}
|	BREAK
	{
		$$ = "break" //TODO 141
	}
|	BREAK Label
	{
		$$ = []Statement{"break", $2} //TODO 142
	}
|	CONTINUE
	{
		$$ = "continue" //TODO 143
	}
|	CONTINUE Label
	{
		$$ = []Statement{"continue", $2} //TODO 144
	}
|	GOTO Label
	{
		$$ = []Statement{"goto", $2} //TODO 145
	}
|	FALLTHROUGH
	{
		$$ = "fallthrough" //TODO 146
	}
|	Block
	{
		$$ = $1 //TODO 147
	}
|	IfStmt
	{
		$$ = $1 //TODO 148
	}
|	SWITCH '{' ExprSwitchStmt3 '}'
	{
		$$ = []Statement{"switch", "{", $3, "}"} //TODO 149
	}
|	SWITCH SimpleStmt ';' '{' ExprSwitchStmt3 '}'
	{
		$$ = []Statement{"switch", $2, ";", "{", $5, "}"} //TODO 150
	}
|	SWITCH Expression '{' ExprSwitchStmt3 '}'
	{
		$$ = []Statement{"switch", $2, "{", $4, "}"} //TODO 151
	}
|	SWITCH SimpleStmt ';' Expression '{' ExprSwitchStmt3 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, "{", $6, "}"} //TODO 152
	}
|	SWITCH INT_LIT PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, $3, ".", "(", "type", ")", "{", $9, "}"} //TODO 153
	}
|	SWITCH FLOAT_LIT PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, $3, ".", "(", "type", ")", "{", $9, "}"} //TODO 154
	}
|	SWITCH IMAGINARY_LIT PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, $3, ".", "(", "type", ")", "{", $9, "}"} //TODO 155
	}
|	SWITCH RUNE_LIT PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, $3, ".", "(", "type", ")", "{", $9, "}"} //TODO 156
	}
|	SWITCH STRING_LIT PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, $3, ".", "(", "type", ")", "{", $9, "}"} //TODO 157
	}
|	SWITCH StructType LiteralValue PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, $3, $4, ".", "(", "type", ")", "{", $10, "}"} //TODO 158
	}
|	SWITCH ArrayType LiteralValue PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, $3, $4, ".", "(", "type", ")", "{", $10, "}"} //TODO 159
	}
|	SWITCH '[' DDD ']' ElementType LiteralValue PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", "[", $3, "]", $5, $6, $7, ".", "(", "type", ")", "{", $13, "}"} //TODO 160
	}
|	SWITCH SliceType LiteralValue PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, $3, $4, ".", "(", "type", ")", "{", $10, "}"} //TODO 161
	}
|	SWITCH MapType LiteralValue PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, $3, $4, ".", "(", "type", ")", "{", $10, "}"} //TODO 162
	}
|	SWITCH TypeName LiteralValue PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, $3, $4, ".", "(", "type", ")", "{", $10, "}"} //TODO 163
	}
|	SWITCH FUNC Function PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", "func", $3, $4, ".", "(", "type", ")", "{", $10, "}"} //TODO 164
	}
|	SWITCH IDENTIFIER_OPERAND PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, $3, ".", "(", "type", ")", "{", $9, "}"} //TODO 165
	}
|	SWITCH ReceiverType '.' IDENTIFIER_METHOD PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ".", $4, $5, ".", "(", "type", ")", "{", $11, "}"} //TODO 166
	}
|	SWITCH '(' Expression ')' PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", "(", $3, ")", $5, ".", "(", "type", ")", "{", $11, "}"} //TODO 167
	}
|	SWITCH Type '(' Expression ')' PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, "(", $4, ")", $6, ".", "(", "type", ")", "{", $12, "}"} //TODO 168
	}
|	SWITCH Type '(' Expression ',' ')' PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, "(", $4, ",", ")", $7, ".", "(", "type", ")", "{", $13, "}"} //TODO 169
	}
|	SWITCH IDENTIFIER_BUILT_IN '(' ')' PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, "(", ")", $5, ".", "(", "type", ")", "{", $11, "}"} //TODO 170
	}
|	SWITCH IDENTIFIER_BUILT_IN '(' Type BuiltinCall11 ')' PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, "(", $4, $5, ")", $7, ".", "(", "type", ")", "{", $13, "}"} //TODO 171
	}
|	SWITCH IDENTIFIER_BUILT_IN '(' Type ',' ArgumentList BuiltinCall11 ')' PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, "(", $4, ",", $6, $7, ")", $9, ".", "(", "type", ")", "{", $15, "}"} //TODO 172
	}
|	SWITCH IDENTIFIER_BUILT_IN '(' ArgumentList BuiltinCall11 ')' PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, "(", $4, $5, ")", $7, ".", "(", "type", ")", "{", $13, "}"} //TODO 173
	}
|	SWITCH IDENTIFIER_LIST COLAS INT_LIT PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, $3, $4, $5, ".", "(", "type", ")", "{", $11, "}"} //TODO 174
	}
|	SWITCH IDENTIFIER_LIST COLAS FLOAT_LIT PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, $3, $4, $5, ".", "(", "type", ")", "{", $11, "}"} //TODO 175
	}
|	SWITCH IDENTIFIER_LIST COLAS IMAGINARY_LIT PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, $3, $4, $5, ".", "(", "type", ")", "{", $11, "}"} //TODO 176
	}
|	SWITCH IDENTIFIER_LIST COLAS RUNE_LIT PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, $3, $4, $5, ".", "(", "type", ")", "{", $11, "}"} //TODO 177
	}
|	SWITCH IDENTIFIER_LIST COLAS STRING_LIT PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, $3, $4, $5, ".", "(", "type", ")", "{", $11, "}"} //TODO 178
	}
|	SWITCH IDENTIFIER_LIST COLAS StructType LiteralValue PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, $3, $4, $5, $6, ".", "(", "type", ")", "{", $12, "}"} //TODO 179
	}
|	SWITCH IDENTIFIER_LIST COLAS ArrayType LiteralValue PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, $3, $4, $5, $6, ".", "(", "type", ")", "{", $12, "}"} //TODO 180
	}
|	SWITCH IDENTIFIER_LIST COLAS '[' DDD ']' ElementType LiteralValue PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, $3, "[", $5, "]", $7, $8, $9, ".", "(", "type", ")", "{", $15, "}"} //TODO 181
	}
|	SWITCH IDENTIFIER_LIST COLAS SliceType LiteralValue PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, $3, $4, $5, $6, ".", "(", "type", ")", "{", $12, "}"} //TODO 182
	}
|	SWITCH IDENTIFIER_LIST COLAS MapType LiteralValue PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, $3, $4, $5, $6, ".", "(", "type", ")", "{", $12, "}"} //TODO 183
	}
|	SWITCH IDENTIFIER_LIST COLAS TypeName LiteralValue PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, $3, $4, $5, $6, ".", "(", "type", ")", "{", $12, "}"} //TODO 184
	}
|	SWITCH IDENTIFIER_LIST COLAS FUNC Function PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, $3, "func", $5, $6, ".", "(", "type", ")", "{", $12, "}"} //TODO 185
	}
|	SWITCH IDENTIFIER_LIST COLAS IDENTIFIER_OPERAND PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, $3, $4, $5, ".", "(", "type", ")", "{", $11, "}"} //TODO 186
	}
|	SWITCH IDENTIFIER_LIST COLAS ReceiverType '.' IDENTIFIER_METHOD PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, $3, $4, ".", $6, $7, ".", "(", "type", ")", "{", $13, "}"} //TODO 187
	}
|	SWITCH IDENTIFIER_LIST COLAS '(' Expression ')' PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, $3, "(", $5, ")", $7, ".", "(", "type", ")", "{", $13, "}"} //TODO 188
	}
|	SWITCH IDENTIFIER_LIST COLAS Type '(' Expression ')' PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, $3, $4, "(", $6, ")", $8, ".", "(", "type", ")", "{", $14, "}"} //TODO 189
	}
|	SWITCH IDENTIFIER_LIST COLAS Type '(' Expression ',' ')' PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, $3, $4, "(", $6, ",", ")", $9, ".", "(", "type", ")", "{", $15, "}"} //TODO 190
	}
|	SWITCH IDENTIFIER_LIST COLAS IDENTIFIER_BUILT_IN '(' ')' PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, $3, $4, "(", ")", $7, ".", "(", "type", ")", "{", $13, "}"} //TODO 191
	}
|	SWITCH IDENTIFIER_LIST COLAS IDENTIFIER_BUILT_IN '(' Type BuiltinCall11 ')' PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, $3, $4, "(", $6, $7, ")", $9, ".", "(", "type", ")", "{", $15, "}"} //TODO 192
	}
|	SWITCH IDENTIFIER_LIST COLAS IDENTIFIER_BUILT_IN '(' Type ',' ArgumentList BuiltinCall11 ')' PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, $3, $4, "(", $6, ",", $8, $9, ")", $11, ".", "(", "type", ")", "{", $17, "}"} //TODO 193
	}
|	SWITCH IDENTIFIER_LIST COLAS IDENTIFIER_BUILT_IN '(' ArgumentList BuiltinCall11 ')' PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, $3, $4, "(", $6, $7, ")", $9, ".", "(", "type", ")", "{", $15, "}"} //TODO 194
	}
|	SWITCH SimpleStmt ';' INT_LIT PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, $5, ".", "(", "type", ")", "{", $11, "}"} //TODO 195
	}
|	SWITCH SimpleStmt ';' FLOAT_LIT PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, $5, ".", "(", "type", ")", "{", $11, "}"} //TODO 196
	}
|	SWITCH SimpleStmt ';' IMAGINARY_LIT PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, $5, ".", "(", "type", ")", "{", $11, "}"} //TODO 197
	}
|	SWITCH SimpleStmt ';' RUNE_LIT PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, $5, ".", "(", "type", ")", "{", $11, "}"} //TODO 198
	}
|	SWITCH SimpleStmt ';' STRING_LIT PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, $5, ".", "(", "type", ")", "{", $11, "}"} //TODO 199
	}
|	SWITCH SimpleStmt ';' StructType LiteralValue PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, $5, $6, ".", "(", "type", ")", "{", $12, "}"} //TODO 200
	}
|	SWITCH SimpleStmt ';' ArrayType LiteralValue PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, $5, $6, ".", "(", "type", ")", "{", $12, "}"} //TODO 201
	}
|	SWITCH SimpleStmt ';' '[' DDD ']' ElementType LiteralValue PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", "[", $5, "]", $7, $8, $9, ".", "(", "type", ")", "{", $15, "}"} //TODO 202
	}
|	SWITCH SimpleStmt ';' SliceType LiteralValue PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, $5, $6, ".", "(", "type", ")", "{", $12, "}"} //TODO 203
	}
|	SWITCH SimpleStmt ';' MapType LiteralValue PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, $5, $6, ".", "(", "type", ")", "{", $12, "}"} //TODO 204
	}
|	SWITCH SimpleStmt ';' TypeName LiteralValue PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, $5, $6, ".", "(", "type", ")", "{", $12, "}"} //TODO 205
	}
|	SWITCH SimpleStmt ';' FUNC Function PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", "func", $5, $6, ".", "(", "type", ")", "{", $12, "}"} //TODO 206
	}
|	SWITCH SimpleStmt ';' IDENTIFIER_OPERAND PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, $5, ".", "(", "type", ")", "{", $11, "}"} //TODO 207
	}
|	SWITCH SimpleStmt ';' ReceiverType '.' IDENTIFIER_METHOD PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, ".", $6, $7, ".", "(", "type", ")", "{", $13, "}"} //TODO 208
	}
|	SWITCH SimpleStmt ';' '(' Expression ')' PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", "(", $5, ")", $7, ".", "(", "type", ")", "{", $13, "}"} //TODO 209
	}
|	SWITCH SimpleStmt ';' Type '(' Expression ')' PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, "(", $6, ")", $8, ".", "(", "type", ")", "{", $14, "}"} //TODO 210
	}
|	SWITCH SimpleStmt ';' Type '(' Expression ',' ')' PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, "(", $6, ",", ")", $9, ".", "(", "type", ")", "{", $15, "}"} //TODO 211
	}
|	SWITCH SimpleStmt ';' IDENTIFIER_BUILT_IN '(' ')' PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, "(", ")", $7, ".", "(", "type", ")", "{", $13, "}"} //TODO 212
	}
|	SWITCH SimpleStmt ';' IDENTIFIER_BUILT_IN '(' Type BuiltinCall11 ')' PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, "(", $6, $7, ")", $9, ".", "(", "type", ")", "{", $15, "}"} //TODO 213
	}
|	SWITCH SimpleStmt ';' IDENTIFIER_BUILT_IN '(' Type ',' ArgumentList BuiltinCall11 ')' PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, "(", $6, ",", $8, $9, ")", $11, ".", "(", "type", ")", "{", $17, "}"} //TODO 214
	}
|	SWITCH SimpleStmt ';' IDENTIFIER_BUILT_IN '(' ArgumentList BuiltinCall11 ')' PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, "(", $6, $7, ")", $9, ".", "(", "type", ")", "{", $15, "}"} //TODO 215
	}
|	SWITCH SimpleStmt ';' IDENTIFIER_LIST COLAS INT_LIT PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, $5, $6, $7, ".", "(", "type", ")", "{", $13, "}"} //TODO 216
	}
|	SWITCH SimpleStmt ';' IDENTIFIER_LIST COLAS FLOAT_LIT PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, $5, $6, $7, ".", "(", "type", ")", "{", $13, "}"} //TODO 217
	}
|	SWITCH SimpleStmt ';' IDENTIFIER_LIST COLAS IMAGINARY_LIT PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, $5, $6, $7, ".", "(", "type", ")", "{", $13, "}"} //TODO 218
	}
|	SWITCH SimpleStmt ';' IDENTIFIER_LIST COLAS RUNE_LIT PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, $5, $6, $7, ".", "(", "type", ")", "{", $13, "}"} //TODO 219
	}
|	SWITCH SimpleStmt ';' IDENTIFIER_LIST COLAS STRING_LIT PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, $5, $6, $7, ".", "(", "type", ")", "{", $13, "}"} //TODO 220
	}
|	SWITCH SimpleStmt ';' IDENTIFIER_LIST COLAS StructType LiteralValue PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, $5, $6, $7, $8, ".", "(", "type", ")", "{", $14, "}"} //TODO 221
	}
|	SWITCH SimpleStmt ';' IDENTIFIER_LIST COLAS ArrayType LiteralValue PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, $5, $6, $7, $8, ".", "(", "type", ")", "{", $14, "}"} //TODO 222
	}
|	SWITCH SimpleStmt ';' IDENTIFIER_LIST COLAS '[' DDD ']' ElementType LiteralValue PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, $5, "[", $7, "]", $9, $10, $11, ".", "(", "type", ")", "{", $17, "}"} //TODO 223
	}
|	SWITCH SimpleStmt ';' IDENTIFIER_LIST COLAS SliceType LiteralValue PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, $5, $6, $7, $8, ".", "(", "type", ")", "{", $14, "}"} //TODO 224
	}
|	SWITCH SimpleStmt ';' IDENTIFIER_LIST COLAS MapType LiteralValue PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, $5, $6, $7, $8, ".", "(", "type", ")", "{", $14, "}"} //TODO 225
	}
|	SWITCH SimpleStmt ';' IDENTIFIER_LIST COLAS TypeName LiteralValue PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, $5, $6, $7, $8, ".", "(", "type", ")", "{", $14, "}"} //TODO 226
	}
|	SWITCH SimpleStmt ';' IDENTIFIER_LIST COLAS FUNC Function PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, $5, "func", $7, $8, ".", "(", "type", ")", "{", $14, "}"} //TODO 227
	}
|	SWITCH SimpleStmt ';' IDENTIFIER_LIST COLAS IDENTIFIER_OPERAND PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, $5, $6, $7, ".", "(", "type", ")", "{", $13, "}"} //TODO 228
	}
|	SWITCH SimpleStmt ';' IDENTIFIER_LIST COLAS ReceiverType '.' IDENTIFIER_METHOD PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, $5, $6, ".", $8, $9, ".", "(", "type", ")", "{", $15, "}"} //TODO 229
	}
|	SWITCH SimpleStmt ';' IDENTIFIER_LIST COLAS '(' Expression ')' PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, $5, "(", $7, ")", $9, ".", "(", "type", ")", "{", $15, "}"} //TODO 230
	}
|	SWITCH SimpleStmt ';' IDENTIFIER_LIST COLAS Type '(' Expression ')' PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, $5, $6, "(", $8, ")", $10, ".", "(", "type", ")", "{", $16, "}"} //TODO 231
	}
|	SWITCH SimpleStmt ';' IDENTIFIER_LIST COLAS Type '(' Expression ',' ')' PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, $5, $6, "(", $8, ",", ")", $11, ".", "(", "type", ")", "{", $17, "}"} //TODO 232
	}
|	SWITCH SimpleStmt ';' IDENTIFIER_LIST COLAS IDENTIFIER_BUILT_IN '(' ')' PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, $5, $6, "(", ")", $9, ".", "(", "type", ")", "{", $15, "}"} //TODO 233
	}
|	SWITCH SimpleStmt ';' IDENTIFIER_LIST COLAS IDENTIFIER_BUILT_IN '(' Type BuiltinCall11 ')' PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, $5, $6, "(", $8, $9, ")", $11, ".", "(", "type", ")", "{", $17, "}"} //TODO 234
	}
|	SWITCH SimpleStmt ';' IDENTIFIER_LIST COLAS IDENTIFIER_BUILT_IN '(' Type ',' ArgumentList BuiltinCall11 ')' PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, $5, $6, "(", $8, ",", $10, $11, ")", $13, ".", "(", "type", ")", "{", $19, "}"} //TODO 235
	}
|	SWITCH SimpleStmt ';' IDENTIFIER_LIST COLAS IDENTIFIER_BUILT_IN '(' ArgumentList BuiltinCall11 ')' PrimaryExpr2 '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}'
	{
		$$ = []Statement{"switch", $2, ";", $4, $5, $6, "(", $8, $9, ")", $11, ".", "(", "type", ")", "{", $17, "}"} //TODO 236
	}
|	SELECT '{' SelectStmt1 '}'
	{
		$$ = []Statement{"select", "{", $3, "}"} //TODO 237
	}
|	FOR Block
	{
		$$ = []Statement{"for", $2} //TODO 238
	}
|	FOR Condition Block
	{
		$$ = []Statement{"for", $2, $3} //TODO 239
	}
|	FOR ';' ForClause2 ';' Block
	{
		$$ = []Statement{"for", ";", $3, ";", $5} //TODO 240
	}
|	FOR ';' ForClause2 ';' SimpleStmt Block
	{
		$$ = []Statement{"for", ";", $3, ";", $5, $6} //TODO 241
	}
|	FOR SimpleStmt ';' ForClause2 ';' Block
	{
		$$ = []Statement{"for", $2, ";", $4, ";", $6} //TODO 242
	}
|	FOR SimpleStmt ';' ForClause2 ';' SimpleStmt Block
	{
		$$ = []Statement{"for", $2, ";", $4, ";", $6, $7} //TODO 243
	}
|	FOR ExpressionList '=' RANGE Expression Block
	{
		$$ = []Statement{"for", $2, "=", "range", $5, $6} //TODO 244
	}
|	FOR IDENTIFIER_LIST COLAS RANGE Expression Block
	{
		$$ = []Statement{"for", $2, $3, "range", $5, $6} //TODO 245
	}
|	DEFER Expression
	{
		$$ = []Statement{"defer", $2} //TODO 246
	}

StatementList:
	StatementList1
	{
		$$ = $1 //TODO 247
	}

StatementList1:
	/* EMPTY */
	{
		$$ = []StatementList1(nil) //TODO 248
	}
|	StatementList1 Statement ';'
	{
		$$ = append($1.([]StatementList1), $2, ";") //TODO 249
	}

StructType:
	STRUCT '{' StructType1 '}'
	{
		$$ = []StructType{"struct", "{", $3, "}"} //TODO 250
	}

StructType1:
	/* EMPTY */
	{
		$$ = []StructType1(nil) //TODO 251
	}
|	StructType1 FieldDecl1 ';'
	{
		$$ = append($1.([]StructType1), $2, ";") //TODO 252
	}
|	StructType1 FieldDecl1 STRING_LIT ';'
	{
		$$ = append($1.([]StructType1), $2, $3, ";") //TODO 253
	}

Type:
	TypeName
	{
		$$ = $1 //TODO 254
	}
|	ArrayType
	{
		$$ = $1 //TODO 255
	}
|	StructType
	{
		$$ = $1 //TODO 256
	}
|	'*' Type
	{
		$$ = []Type{"*", $2} //TODO 257
	}
|	FUNC Signature
	{
		$$ = []Type{"func", $2} //TODO 258
	}
|	INTERFACE '{' InterfaceType1 '}'
	{
		$$ = []Type{"interface", "{", $3, "}"} //TODO 259
	}
|	SliceType
	{
		$$ = $1 //TODO 260
	}
|	MapType
	{
		$$ = $1 //TODO 261
	}
|	CHAN CHANCOMM ElementType
	{
		$$ = []Type{"chan", $2, $3} //TODO 262
	}
|	COMMCHAN ElementType
	{
		$$ = []Type{$1, $2} //TODO 263
	}
|	'(' Type ')'
	{
		$$ = []Type{"(", $2, ")"} //TODO 264
	}

TypeDecl11:
	/* EMPTY */
	{
		$$ = []TypeDecl11(nil) //TODO 265
	}
|	TypeDecl11 TypeSpec ';'
	{
		$$ = append($1.([]TypeDecl11), $2, ";") //TODO 266
	}

TypeList1:
	/* EMPTY */
	{
		$$ = []TypeList1(nil) //TODO 267
	}
|	TypeList1 ',' Type
	{
		$$ = append($1.([]TypeList1), ",", $3) //TODO 268
	}

TypeName:
	IDENTIFIER_TYPE
	{
		$$ = $1 //TODO 269
	}

TypeSpec:
	NAME Type
	{
		$$ = []TypeSpec{$1, $2} //TODO 270
	}

TypeSwitchStmt2:
	/* EMPTY */
	{
		$$ = []TypeSwitchStmt2(nil) //TODO 271
	}
|	TypeSwitchStmt2 CASE Type TypeList1 ':' StatementList
	{
		$$ = append($1.([]TypeSwitchStmt2), "case", $3, $4, ":", $6) //TODO 272
	}
|	TypeSwitchStmt2 DEFAULT ':' StatementList
	{
		$$ = append($1.([]TypeSwitchStmt2), "default", ":", $4) //TODO 273
	}

UnaryExpr:
	INT_LIT PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, $2} //TODO 274
	}
|	FLOAT_LIT PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, $2} //TODO 275
	}
|	IMAGINARY_LIT PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, $2} //TODO 276
	}
|	RUNE_LIT PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, $2} //TODO 277
	}
|	STRING_LIT PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, $2} //TODO 278
	}
|	StructType LiteralValue PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, $2, $3} //TODO 279
	}
|	ArrayType LiteralValue PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, $2, $3} //TODO 280
	}
|	'[' DDD ']' ElementType LiteralValue PrimaryExpr2
	{
		$$ = []UnaryExpr{"[", $2, "]", $4, $5, $6} //TODO 281
	}
|	SliceType LiteralValue PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, $2, $3} //TODO 282
	}
|	MapType LiteralValue PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, $2, $3} //TODO 283
	}
|	TypeName LiteralValue PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, $2, $3} //TODO 284
	}
|	FUNC Function PrimaryExpr2
	{
		$$ = []UnaryExpr{"func", $2, $3} //TODO 285
	}
|	IDENTIFIER_OPERAND PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, $2} //TODO 286
	}
|	ReceiverType '.' IDENTIFIER_METHOD PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, ".", $3, $4} //TODO 287
	}
|	'(' Expression ')' PrimaryExpr2
	{
		$$ = []UnaryExpr{"(", $2, ")", $4} //TODO 288
	}
|	Type '(' Expression ')' PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, "(", $3, ")", $5} //TODO 289
	}
|	Type '(' Expression ',' ')' PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, "(", $3, ",", ")", $6} //TODO 290
	}
|	IDENTIFIER_BUILT_IN '(' ')' PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, "(", ")", $4} //TODO 291
	}
|	IDENTIFIER_BUILT_IN '(' Type BuiltinCall11 ')' PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, "(", $3, $4, ")", $6} //TODO 292
	}
|	IDENTIFIER_BUILT_IN '(' Type ',' ArgumentList BuiltinCall11 ')' PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, "(", $3, ",", $5, $6, ")", $8} //TODO 293
	}
|	IDENTIFIER_BUILT_IN '(' ArgumentList BuiltinCall11 ')' PrimaryExpr2
	{
		$$ = []UnaryExpr{$1, "(", $3, $4, ")", $6} //TODO 294
	}
|	'+' UnaryExpr
	{
		$$ = []UnaryExpr{"+", $2} //TODO 295
	}
|	'-' UnaryExpr
	{
		$$ = []UnaryExpr{"-", $2} //TODO 296
	}
|	'!' UnaryExpr
	{
		$$ = []UnaryExpr{"!", $2} //TODO 297
	}
|	'^' UnaryExpr
	{
		$$ = []UnaryExpr{"^", $2} //TODO 298
	}
|	'*' UnaryExpr
	{
		$$ = []UnaryExpr{"*", $2} //TODO 299
	}
|	'&' UnaryExpr
	{
		$$ = []UnaryExpr{"&", $2} //TODO 300
	}
|	COMM UnaryExpr
	{
		$$ = []UnaryExpr{$1, $2} //TODO 301
	}

Value:
	Expression
	{
		$$ = $1 //TODO 302
	}
|	LiteralValue
	{
		$$ = $1 //TODO 303
	}

VarDecl11:
	/* EMPTY */
	{
		$$ = []VarDecl11(nil) //TODO 304
	}
|	VarDecl11 VarSpec ';'
	{
		$$ = append($1.([]VarDecl11), $2, ";") //TODO 305
	}

VarSpec:
	IDENTIFIER_LIST Type
	{
		$$ = []VarSpec{$1, $2} //TODO 306
	}
|	IDENTIFIER_LIST Type '=' ExpressionList
	{
		$$ = []VarSpec{$1, $2, "=", $4} //TODO 307
	}
|	IDENTIFIER_LIST '=' ExpressionList
	{
		$$ = []VarSpec{$1, "=", $3} //TODO 308
	}

%%

//TODO remove demo stuff below

var _parserResult interface{}

type (
	ArgumentList interface{}
	ArrayType interface{}
	BaseTypeName interface{}
	Block interface{}
	BuiltinCall11 interface{}
	Condition interface{}
	ConstDecl11 interface{}
	ConstSpec interface{}
	Declaration interface{}
	Element interface{}
	ElementList1 interface{}
	ElementType interface{}
	ExprSwitchStmt3 interface{}
	Expression interface{}
	ExpressionList interface{}
	ExpressionList1 interface{}
	FieldDecl1 interface{}
	ForClause2 interface{}
	Function interface{}
	IfStmt interface{}
	ImportDecl11 interface{}
	ImportPath interface{}
	ImportSpec interface{}
	InterfaceType1 interface{}
	Label interface{}
	LiteralValue interface{}
	MapType interface{}
	MethodDecl1 interface{}
	ParameterDecl interface{}
	ParameterList1 interface{}
	Parameters interface{}
	PrimaryExpr2 interface{}
	Receiver1 interface{}
	ReceiverType interface{}
	SelectStmt1 interface{}
	SendStmt interface{}
	Signature interface{}
	SimpleStmt interface{}
	Slice2 interface{}
	SliceType interface{}
	SourceFile interface{}
	SourceFile1 interface{}
	SourceFile2 interface{}
	Start interface{}
	Statement interface{}
	StatementList interface{}
	StatementList1 interface{}
	StructType interface{}
	StructType1 interface{}
	Type interface{}
	TypeDecl11 interface{}
	TypeList1 interface{}
	TypeName interface{}
	TypeSpec interface{}
	TypeSwitchStmt2 interface{}
	UnaryExpr interface{}
	Value interface{}
	VarDecl11 interface{}
	VarSpec interface{}
)
	
func _dump() {
	s := fmt.Sprintf("%#v", _parserResult)
	s = strings.Replace(s, "%", "%%", -1)
	s = strings.Replace(s, "{", "{%i\n", -1)
	s = strings.Replace(s, "}", "%u\n}", -1)
	s = strings.Replace(s, ", ", ",\n", -1)
	var buf bytes.Buffer
	strutil.IndentFormatter(&buf, ". ").Format(s)
	buf.WriteString("\n")
	a := strings.Split(buf.String(), "\n")
	for _, v := range a {
		if strings.HasSuffix(v, "(nil)") || strings.HasSuffix(v, "(nil),") {
			continue
		}
	
		fmt.Println(v)
	}
}

// End of demo stuff
