%{

//TODO Put your favorite license here
		
// yacc source generated by ebnf2y[1]
// at 2013-08-05 11:23:47.459419581 +0200 CEST.
//
// CAUTION: If this file is a Go source file (*.go), it was generated
// automatically by '$ go tool yacc' from a *.y file - DO NOT EDIT in that case!
// 
//   [1]: http://github.com/cznic/ebnf2y

package main //TODO real package name

//TODO required only be the demo _dump function
import (
	"bytes"
	"fmt"
	"strings"

	"github.com/cznic/strutil"
)

%}

%union {
	item interface{} //TODO insert real field(s)
}

%token	ANDAND
%token	ANDNOT
%token	ASSIGN_OP
%token	CHANCOMM
%token	COLAS
%token	COMM
%token	COMMCHAN
%token	DDD
%token	DEC
%token	EQ
%token	FLOAT_LIT
%token	GE
%token	IDENTIFIER
%token	IMAGINARY_LIT
%token	INC
%token	INT_LIT
%token	LBRACE
%token	LE
%token	LSH
%token	NE
%token	OPERAND_NAME_OR_TYPE_NAME
%token	OPT_COMMA_RBRACE
%token	OROR
%token	RSH
%token	RUNE_LIT
%token	STRING_LIT

%type	<item> 	/*TODO real type(s), if/where applicable */
	ANDAND
	ANDNOT
	ASSIGN_OP
	CHANCOMM
	COLAS
	COMM
	COMMCHAN
	DDD
	DEC
	EQ
	FLOAT_LIT
	GE
	IDENTIFIER
	IMAGINARY_LIT
	INC
	INT_LIT
	LBRACE
	LE
	LSH
	NE
	OPERAND_NAME_OR_TYPE_NAME
	OPT_COMMA_RBRACE
	OROR
	RSH
	RUNE_LIT
	STRING_LIT

%token BREAK
%token CASE
%token CHAN
%token CONST
%token CONTINUE
%token DEFAULT
%token DEFER
%token ELSE
%token FALLTHROUGH
%token FOR
%token FUNC
%token GO
%token GOTO
%token IF
%token IMPORT
%token INTERFACE
%token MAP
%token PACKAGE
%token RANGE
%token RETURN
%token SELECT
%token STRUCT
%token SWITCH
%token TYPE
%token VAR

%type	<item> 	/*TODO real type(s), if/where applicable */
	ArgumentList
	ArrayType
	Block
	BuiltinCall11
	Condition
	ConstDecl11
	ConstSpec
	Declaration
	Element
	ElementList
	ElementList1
	ElementType
	ExprSwitchStmt3
	Expression
	ExpressionList
	ExpressionList1
	FieldDecl2
	ForClause1
	ForClause3
	Function
	FunctionName
	IdentifierList
	IdentifierList1
	IfStmt
	ImportDecl11
	ImportPath
	ImportSpec
	InterfaceType1
	Label
	LiteralValue
	MapType
	MethodName
	ParameterList1
	Parameters
	PrimaryExpr
	Receiver
	RecvExpr
	SelectStmt1
	SendStmt
	Signature
	SimpleStmt
	Slice1
	SliceType
	SourceFile
	SourceFile1
	SourceFile2
	Start
	StatementList
	StatementList1
	StructType
	StructType1
	Type
	TypeDecl11
	TypeList1
	TypeLit
	TypeSpec
	TypeSwitchStmt2
	UnaryExpr
	Value
	VarDecl11
	VarSpec

/*TODO %left, %right, ... declarations */

%left		NotPackage
%left		LPACKAGE

%left		NotParen
%left		'('

%left		')'
%left		PreferToRightParen

%start Start

%%

ArgumentList:
	ExpressionList
	{
		$$ = $1 //TODO 1
	}
|	ExpressionList DDD
	{
		$$ = []ArgumentList{$1, $2} //TODO 2
	}

ArrayType:
	'[' Expression ']' ElementType
	{
		$$ = []ArrayType{"[", $2, "]", $4} //TODO 3
	}

Block:
	'{' StatementList '}'
	{
		$$ = []Block{"{", $2, "}"} //TODO 4
	}

BuiltinCall11:
	/* EMPTY */
	{
		$$ = nil //TODO 5
	}
|	','
	{
		$$ = "," //TODO 6
	}

Condition:
	Expression
	{
		$$ = $1 //TODO 7
	}

ConstDecl11:
	/* EMPTY */
	{
		$$ = []ConstDecl11(nil) //TODO 8
	}
|	ConstDecl11 ConstSpec ';'
	{
		$$ = append($1.([]ConstDecl11), $2, ";") //TODO 9
	}

ConstSpec:
	IdentifierList
	{
		$$ = $1 //TODO 10
	}
|	IdentifierList '=' ExpressionList
	{
		$$ = []ConstSpec{$1, "=", $3} //TODO 11
	}
|	IdentifierList Type '=' ExpressionList
	{
		$$ = []ConstSpec{$1, $2, "=", $4} //TODO 12
	}

Declaration:
	CONST ConstSpec
	{
		$$ = []Declaration{"const", $2} //TODO 13
	}
|	CONST '(' ConstDecl11 ')'
	{
		$$ = []Declaration{"const", "(", $3, ")"} //TODO 14
	}
|	TYPE TypeSpec
	{
		$$ = []Declaration{"type", $2} //TODO 15
	}
|	TYPE '(' TypeDecl11 ')'
	{
		$$ = []Declaration{"type", "(", $3, ")"} //TODO 16
	}
|	VAR VarSpec
	{
		$$ = []Declaration{"var", $2} //TODO 17
	}
|	VAR '(' VarDecl11 ')'
	{
		$$ = []Declaration{"var", "(", $3, ")"} //TODO 18
	}

Element:
	Value
	{
		$$ = $1 //TODO 19
	}
|	IDENTIFIER ':' Value
	{
		$$ = []Element{$1, ":", $3} //TODO 20
	}
|	Expression ':' Value
	{
		$$ = []Element{$1, ":", $3} //TODO 21
	}

ElementList:
	Element ElementList1
	{
		$$ = []ElementList{$1, $2} //TODO 22
	}

ElementList1:
	/* EMPTY */
	{
		$$ = []ElementList1(nil) //TODO 23
	}
|	ElementList1 ',' Element
	{
		$$ = append($1.([]ElementList1), ",", $3) //TODO 24
	}

ElementType:
	Type
	{
		$$ = $1 //TODO 25
	}

ExprSwitchStmt3:
	/* EMPTY */
	{
		$$ = []ExprSwitchStmt3(nil) //TODO 26
	}
|	ExprSwitchStmt3 CASE ExpressionList ':' StatementList
	{
		$$ = append($1.([]ExprSwitchStmt3), "case", $3, ":", $5) //TODO 27
	}
|	ExprSwitchStmt3 DEFAULT ':' StatementList
	{
		$$ = append($1.([]ExprSwitchStmt3), "default", ":", $4) //TODO 28
	}

Expression:
	UnaryExpr
	{
		$$ = $1 //TODO 29
	}
|	Expression OROR UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 30
	}
|	Expression ANDAND UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 31
	}
|	Expression EQ UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 32
	}
|	Expression NE UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 33
	}
|	Expression '<' UnaryExpr
	{
		$$ = []Expression{$1, "<", $3} //TODO 34
	}
|	Expression LE UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 35
	}
|	Expression '>' UnaryExpr
	{
		$$ = []Expression{$1, ">", $3} //TODO 36
	}
|	Expression GE UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 37
	}
|	Expression '+' UnaryExpr
	{
		$$ = []Expression{$1, "+", $3} //TODO 38
	}
|	Expression '-' UnaryExpr
	{
		$$ = []Expression{$1, "-", $3} //TODO 39
	}
|	Expression '|' UnaryExpr
	{
		$$ = []Expression{$1, "|", $3} //TODO 40
	}
|	Expression '^' UnaryExpr
	{
		$$ = []Expression{$1, "^", $3} //TODO 41
	}
|	Expression '*' UnaryExpr
	{
		$$ = []Expression{$1, "*", $3} //TODO 42
	}
|	Expression '/' UnaryExpr
	{
		$$ = []Expression{$1, "/", $3} //TODO 43
	}
|	Expression '%' UnaryExpr
	{
		$$ = []Expression{$1, "%", $3} //TODO 44
	}
|	Expression LSH UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 45
	}
|	Expression RSH UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 46
	}
|	Expression '&' UnaryExpr
	{
		$$ = []Expression{$1, "&", $3} //TODO 47
	}
|	Expression ANDNOT UnaryExpr
	{
		$$ = []Expression{$1, $2, $3} //TODO 48
	}

ExpressionList:
	Expression ExpressionList1
	{
		$$ = []ExpressionList{$1, $2} //TODO 49
	}

ExpressionList1:
	/* EMPTY */
	{
		$$ = []ExpressionList1(nil) //TODO 50
	}
|	ExpressionList1 ',' Expression
	{
		$$ = append($1.([]ExpressionList1), ",", $3) //TODO 51
	}

FieldDecl2:
	/* EMPTY */
	{
		$$ = nil //TODO 52
	}
|	STRING_LIT
	{
		$$ = $1 //TODO 53
	}

ForClause1:
	/* EMPTY */
	{
		$$ = nil //TODO 54
	}
|	SimpleStmt
	{
		$$ = $1 //TODO 55
	}

ForClause3:
	/* EMPTY */
	{
		$$ = nil //TODO 56
	}
|	SimpleStmt
	{
		$$ = $1 //TODO 57
	}

Function:
	Signature Block
	{
		$$ = []Function{$1, $2} //TODO 58
	}

FunctionName:
	IDENTIFIER
	{
		$$ = $1 //TODO 59
	}

IdentifierList:
	IDENTIFIER IdentifierList1
	{
		$$ = []IdentifierList{$1, $2} //TODO 60
	}

IdentifierList1:
	/* EMPTY */
	{
		$$ = []IdentifierList1(nil) //TODO 61
	}
|	IdentifierList1 ',' IDENTIFIER
	{
		$$ = append($1.([]IdentifierList1), ",", $3) //TODO 62
	}

IfStmt:
	IF Expression Block
	{
		$$ = []IfStmt{"if", $2, $3} //TODO 63
	}
|	IF ';' Expression Block
	{
		$$ = []IfStmt{"if", ";", $3, $4} //TODO 64
	}
|	IF SimpleStmt ';' Expression Block
	{
		$$ = []IfStmt{"if", $2, ";", $4, $5} //TODO 65
	}
|	IF Expression Block ELSE IfStmt
	{
		$$ = []IfStmt{"if", $2, $3, "else", $5} //TODO 66
	}
|	IF ';' Expression Block ELSE IfStmt
	{
		$$ = []IfStmt{"if", ";", $3, $4, "else", $6} //TODO 67
	}
|	IF SimpleStmt ';' Expression Block ELSE IfStmt
	{
		$$ = []IfStmt{"if", $2, ";", $4, $5, "else", $7} //TODO 68
	}
|	IF Expression Block ELSE Block
	{
		$$ = []IfStmt{"if", $2, $3, "else", $5} //TODO 69
	}
|	IF ';' Expression Block ELSE Block
	{
		$$ = []IfStmt{"if", ";", $3, $4, "else", $6} //TODO 70
	}
|	IF SimpleStmt ';' Expression Block ELSE Block
	{
		$$ = []IfStmt{"if", $2, ";", $4, $5, "else", $7} //TODO 71
	}

ImportDecl11:
	/* EMPTY */
	{
		$$ = []ImportDecl11(nil) //TODO 72
	}
|	ImportDecl11 ImportSpec ';'
	{
		$$ = append($1.([]ImportDecl11), $2, ";") //TODO 73
	}

ImportPath:
	STRING_LIT
	{
		$$ = $1 //TODO 74
	}

ImportSpec:
	ImportPath
	{
		$$ = $1 //TODO 75
	}
|	'.' ImportPath
	{
		$$ = []ImportSpec{".", $2} //TODO 76
	}
|	IDENTIFIER ImportPath
	{
		$$ = []ImportSpec{$1, $2} //TODO 77
	}

InterfaceType1:
	/* EMPTY */
	{
		$$ = []InterfaceType1(nil) //TODO 78
	}
|	InterfaceType1 MethodName Signature ';'
	{
		$$ = append($1.([]InterfaceType1), $2, $3, ";") //TODO 79
	}
|	InterfaceType1 OPERAND_NAME_OR_TYPE_NAME ';'
	{
		$$ = append($1.([]InterfaceType1), $2, ";") //TODO 80
	}

Label:
	IDENTIFIER
	{
		$$ = $1 //TODO 81
	}

LiteralValue:
	'{' '}'
	{
		$$ = []LiteralValue{"{", "}"} //TODO 82
	}
|	'{' ElementList OPT_COMMA_RBRACE
	{
		$$ = []LiteralValue{"{", $2, $3} //TODO 83
	}

MapType:
	MAP '[' Type ']' ElementType
	{
		$$ = []MapType{"map", "[", $3, "]", $5} //TODO 84
	}

MethodName:
	IDENTIFIER
	{
		$$ = $1 //TODO 85
	}

ParameterList1:
	/* EMPTY */
	{
		$$ = []ParameterList1(nil) //TODO 86
	}
|	ParameterList1 ',' IDENTIFIER Type
	{
		$$ = append($1.([]ParameterList1), ",", $3, $4) //TODO 87
	}
|	ParameterList1 ',' IDENTIFIER DDD Type
	{
		$$ = append($1.([]ParameterList1), ",", $3, $4, $5) //TODO 88
	}
|	ParameterList1 ',' OPERAND_NAME_OR_TYPE_NAME
	{
		$$ = append($1.([]ParameterList1), ",", $3) //TODO 89
	}
|	ParameterList1 ',' TypeLit
	{
		$$ = append($1.([]ParameterList1), ",", $3) //TODO 90
	}
|	ParameterList1 ',' DDD TypeLit
	{
		$$ = append($1.([]ParameterList1), ",", $3, $4) //TODO 91
	}

Parameters:
	'(' ')'
	{
		$$ = []Parameters{"(", ")"} //TODO 92
	}
|	'(' IDENTIFIER Type ParameterList1 ')'
	{
		$$ = []Parameters{"(", $2, $3, $4, ")"} //TODO 93
	}
|	'(' IDENTIFIER DDD Type ParameterList1 ')'
	{
		$$ = []Parameters{"(", $2, $3, $4, $5, ")"} //TODO 94
	}
|	'(' OPERAND_NAME_OR_TYPE_NAME ParameterList1 ')'
	{
		$$ = []Parameters{"(", $2, $3, ")"} //TODO 95
	}
|	'(' TypeLit ParameterList1 ')'
	{
		$$ = []Parameters{"(", $2, $3, ")"} //TODO 96
	}
|	'(' DDD TypeLit ParameterList1 ')'
	{
		$$ = []Parameters{"(", $2, $3, $4, ")"} //TODO 97
	}
|	'(' IDENTIFIER Type ParameterList1 ',' ')'
	{
		$$ = []Parameters{"(", $2, $3, $4, ",", ")"} //TODO 98
	}
|	'(' IDENTIFIER DDD Type ParameterList1 ',' ')'
	{
		$$ = []Parameters{"(", $2, $3, $4, $5, ",", ")"} //TODO 99
	}
|	'(' OPERAND_NAME_OR_TYPE_NAME ParameterList1 ',' ')'
	{
		$$ = []Parameters{"(", $2, $3, ",", ")"} //TODO 100
	}
|	'(' TypeLit ParameterList1 ',' ')'
	{
		$$ = []Parameters{"(", $2, $3, ",", ")"} //TODO 101
	}
|	'(' DDD TypeLit ParameterList1 ',' ')'
	{
		$$ = []Parameters{"(", $2, $3, $4, ",", ")"} //TODO 102
	}

PrimaryExpr:
	INT_LIT
	{
		$$ = $1 //TODO 103
	}
|	FLOAT_LIT
	{
		$$ = $1 //TODO 104
	}
|	IMAGINARY_LIT
	{
		$$ = $1 //TODO 105
	}
|	RUNE_LIT
	{
		$$ = $1 //TODO 106
	}
|	STRING_LIT
	{
		$$ = $1 //TODO 107
	}
|	StructType LiteralValue
	{
		$$ = []PrimaryExpr{$1, $2} //TODO 108
	}
|	ArrayType LiteralValue
	{
		$$ = []PrimaryExpr{$1, $2} //TODO 109
	}
|	'[' DDD ']' ElementType LiteralValue
	{
		$$ = []PrimaryExpr{"[", $2, "]", $4, $5} //TODO 110
	}
|	SliceType LiteralValue
	{
		$$ = []PrimaryExpr{$1, $2} //TODO 111
	}
|	MapType LiteralValue
	{
		$$ = []PrimaryExpr{$1, $2} //TODO 112
	}
|	OPERAND_NAME_OR_TYPE_NAME LBRACE '}'
	{
		$$ = []PrimaryExpr{$1, $2, "}"} //TODO 113
	}
|	OPERAND_NAME_OR_TYPE_NAME LBRACE ElementList OPT_COMMA_RBRACE
	{
		$$ = []PrimaryExpr{$1, $2, $3, $4} //TODO 114
	}
|	FUNC Function
	{
		$$ = []PrimaryExpr{"func", $2} //TODO 115
	}
|	OPERAND_NAME_OR_TYPE_NAME
	{
		$$ = $1 //TODO 116
	}
|	IDENTIFIER Type '.' MethodName
	{
		$$ = []PrimaryExpr{$1, $2, ".", $4} //TODO 117
	}
|	IDENTIFIER DDD Type '.' MethodName
	{
		$$ = []PrimaryExpr{$1, $2, $3, ".", $5} //TODO 118
	}
|	OPERAND_NAME_OR_TYPE_NAME '.' MethodName
	{
		$$ = []PrimaryExpr{$1, ".", $3} //TODO 119
	}
|	TypeLit '.' MethodName
	{
		$$ = []PrimaryExpr{$1, ".", $3} //TODO 120
	}
|	DDD TypeLit '.' MethodName
	{
		$$ = []PrimaryExpr{$1, $2, ".", $4} //TODO 121
	}
|	'(' Expression ')'
	{
		$$ = []PrimaryExpr{"(", $2, ")"} //TODO 122
	}
|	Type '(' Expression ')'
	{
		$$ = []PrimaryExpr{$1, "(", $3, ")"} //TODO 123
	}
|	Type '(' Expression ',' ')'
	{
		$$ = []PrimaryExpr{$1, "(", $3, ",", ")"} //TODO 124
	}
|	IDENTIFIER '(' ')'
	{
		$$ = []PrimaryExpr{$1, "(", ")"} //TODO 125
	}
|	IDENTIFIER '(' Type BuiltinCall11 ')'
	{
		$$ = []PrimaryExpr{$1, "(", $3, $4, ")"} //TODO 126
	}
|	IDENTIFIER '(' Type ',' ArgumentList BuiltinCall11 ')'
	{
		$$ = []PrimaryExpr{$1, "(", $3, ",", $5, $6, ")"} //TODO 127
	}
|	IDENTIFIER '(' ArgumentList BuiltinCall11 ')'
	{
		$$ = []PrimaryExpr{$1, "(", $3, $4, ")"} //TODO 128
	}
|	PrimaryExpr '.' IDENTIFIER
	{
		$$ = []PrimaryExpr{$1, ".", $3} //TODO 129
	}
|	PrimaryExpr '[' Expression ']'
	{
		$$ = []PrimaryExpr{$1, "[", $3, "]"} //TODO 130
	}
|	PrimaryExpr '[' Slice1 ':' ']'
	{
		$$ = []PrimaryExpr{$1, "[", $3, ":", "]"} //TODO 131
	}
|	PrimaryExpr '[' Slice1 ':' Expression ']'
	{
		$$ = []PrimaryExpr{$1, "[", $3, ":", $5, "]"} //TODO 132
	}
|	PrimaryExpr '.' '(' Type ')'
	{
		$$ = []PrimaryExpr{$1, ".", "(", $4, ")"} //TODO 133
	}
|	PrimaryExpr '(' ')'
	{
		$$ = []PrimaryExpr{$1, "(", ")"} //TODO 134
	}
|	PrimaryExpr '(' ArgumentList ')'
	{
		$$ = []PrimaryExpr{$1, "(", $3, ")"} //TODO 135
	}
|	PrimaryExpr '(' ArgumentList ',' ')'
	{
		$$ = []PrimaryExpr{$1, "(", $3, ",", ")"} //TODO 136
	}

Receiver:
	'(' IDENTIFIER ')'
	{
		$$ = []Receiver{"(", $2, ")"} //TODO 137
	}
|	'(' IDENTIFIER IDENTIFIER ')'
	{
		$$ = []Receiver{"(", $2, $3, ")"} //TODO 138
	}
|	'(' '*' IDENTIFIER ')'
	{
		$$ = []Receiver{"(", "*", $3, ")"} //TODO 139
	}
|	'(' IDENTIFIER '*' IDENTIFIER ')'
	{
		$$ = []Receiver{"(", $2, "*", $4, ")"} //TODO 140
	}

RecvExpr:
	Expression
	{
		$$ = $1 //TODO 141
	}

SelectStmt1:
	/* EMPTY */
	{
		$$ = []SelectStmt1(nil) //TODO 142
	}
|	SelectStmt1 CASE SendStmt ':' StatementList
	{
		$$ = append($1.([]SelectStmt1), "case", $3, ":", $5) //TODO 143
	}
|	SelectStmt1 CASE RecvExpr ':' StatementList
	{
		$$ = append($1.([]SelectStmt1), "case", $3, ":", $5) //TODO 144
	}
|	SelectStmt1 CASE ExpressionList '=' RecvExpr ':' StatementList
	{
		$$ = append($1.([]SelectStmt1), "case", $3, "=", $5, ":", $7) //TODO 145
	}
|	SelectStmt1 CASE IdentifierList COLAS RecvExpr ':' StatementList
	{
		$$ = append($1.([]SelectStmt1), "case", $3, $4, $5, ":", $7) //TODO 146
	}
|	SelectStmt1 DEFAULT ':' StatementList
	{
		$$ = append($1.([]SelectStmt1), "default", ":", $4) //TODO 147
	}

SendStmt:
	Expression COMM Expression
	{
		$$ = []SendStmt{$1, $2, $3} //TODO 148
	}

Signature:
	Parameters %prec NotParen
	{
		$$ = $1 //TODO 149
	}
|	Parameters Parameters
	{
		$$ = []Signature{$1, $2} //TODO 150
	}
|	Parameters Type
	{
		$$ = []Signature{$1, $2} //TODO 151
	}

SimpleStmt:
	Expression
	{
		$$ = $1 //TODO 152
	}
|	SendStmt
	{
		$$ = $1 //TODO 153
	}
|	Expression INC
	{
		$$ = []SimpleStmt{$1, $2} //TODO 154
	}
|	Expression DEC
	{
		$$ = []SimpleStmt{$1, $2} //TODO 155
	}
|	ExpressionList ASSIGN_OP ExpressionList
	{
		$$ = []SimpleStmt{$1, $2, $3} //TODO 156
	}
|	IdentifierList COLAS ExpressionList
	{
		$$ = []SimpleStmt{$1, $2, $3} //TODO 157
	}

Slice1:
	/* EMPTY */
	{
		$$ = nil //TODO 158
	}
|	Expression
	{
		$$ = $1 //TODO 159
	}

SliceType:
	'[' ']' ElementType
	{
		$$ = []SliceType{"[", "]", $3} //TODO 160
	}

SourceFile:
	PACKAGE IDENTIFIER ';' SourceFile1 SourceFile2
	{
		$$ = []SourceFile{"package", $2, ";", $4, $5} //TODO 161
	}

SourceFile1:
	/* EMPTY */
	{
		$$ = []SourceFile1(nil) //TODO 162
	}
|	SourceFile1 IMPORT ImportSpec ';'
	{
		$$ = append($1.([]SourceFile1), "import", $3, ";") //TODO 163
	}
|	SourceFile1 IMPORT '(' ImportDecl11 ')' ';'
	{
		$$ = append($1.([]SourceFile1), "import", "(", $4, ")", ";") //TODO 164
	}

SourceFile2:
	/* EMPTY */
	{
		$$ = []SourceFile2(nil) //TODO 165
	}
|	SourceFile2 Declaration ';'
	{
		$$ = append($1.([]SourceFile2), $2, ";") //TODO 166
	}
|	SourceFile2 FUNC FunctionName Function ';'
	{
		$$ = append($1.([]SourceFile2), "func", $3, $4, ";") //TODO 167
	}
|	SourceFile2 FUNC FunctionName Signature ';'
	{
		$$ = append($1.([]SourceFile2), "func", $3, $4, ";") //TODO 168
	}
|	SourceFile2 FUNC Receiver MethodName Function ';'
	{
		$$ = append($1.([]SourceFile2), "func", $3, $4, $5, ";") //TODO 169
	}
|	SourceFile2 FUNC Receiver MethodName Signature ';'
	{
		$$ = append($1.([]SourceFile2), "func", $3, $4, $5, ";") //TODO 170
	}

Start:
	SourceFile
	{
		_parserResult = $1 //TODO 171
	}

StatementList:
	StatementList1
	{
		$$ = $1 //TODO 172
	}

StatementList1:
	/* EMPTY */
	{
		$$ = []StatementList1(nil) //TODO 173
	}
|	StatementList1 ';'
	{
		$$ = append($1.([]StatementList1), ";") //TODO 174
	}
|	StatementList1 Declaration ';'
	{
		$$ = append($1.([]StatementList1), $2, ";") //TODO 175
	}
|	StatementList1 Label ':' ';'
	{
		$$ = append($1.([]StatementList1), $2, ":", ";") //TODO 176
	}
|	StatementList1 SimpleStmt ';'
	{
		$$ = append($1.([]StatementList1), $2, ";") //TODO 177
	}
|	StatementList1 GO Expression ';'
	{
		$$ = append($1.([]StatementList1), "go", $3, ";") //TODO 178
	}
|	StatementList1 RETURN ';'
	{
		$$ = append($1.([]StatementList1), "return", ";") //TODO 179
	}
|	StatementList1 RETURN ExpressionList ';'
	{
		$$ = append($1.([]StatementList1), "return", $3, ";") //TODO 180
	}
|	StatementList1 BREAK ';'
	{
		$$ = append($1.([]StatementList1), "break", ";") //TODO 181
	}
|	StatementList1 BREAK Label ';'
	{
		$$ = append($1.([]StatementList1), "break", $3, ";") //TODO 182
	}
|	StatementList1 CONTINUE ';'
	{
		$$ = append($1.([]StatementList1), "continue", ";") //TODO 183
	}
|	StatementList1 CONTINUE Label ';'
	{
		$$ = append($1.([]StatementList1), "continue", $3, ";") //TODO 184
	}
|	StatementList1 GOTO Label ';'
	{
		$$ = append($1.([]StatementList1), "goto", $3, ";") //TODO 185
	}
|	StatementList1 FALLTHROUGH ';'
	{
		$$ = append($1.([]StatementList1), "fallthrough", ";") //TODO 186
	}
|	StatementList1 Block ';'
	{
		$$ = append($1.([]StatementList1), $2, ";") //TODO 187
	}
|	StatementList1 IfStmt ';'
	{
		$$ = append($1.([]StatementList1), $2, ";") //TODO 188
	}
|	StatementList1 SWITCH '{' ExprSwitchStmt3 '}' ';'
	{
		$$ = append($1.([]StatementList1), "switch", "{", $4, "}", ";") //TODO 189
	}
|	StatementList1 SWITCH ';' '{' ExprSwitchStmt3 '}' ';'
	{
		$$ = append($1.([]StatementList1), "switch", ";", "{", $5, "}", ";") //TODO 190
	}
|	StatementList1 SWITCH SimpleStmt ';' '{' ExprSwitchStmt3 '}' ';'
	{
		$$ = append($1.([]StatementList1), "switch", $3, ";", "{", $6, "}", ";") //TODO 191
	}
|	StatementList1 SWITCH Expression '{' ExprSwitchStmt3 '}' ';'
	{
		$$ = append($1.([]StatementList1), "switch", $3, "{", $5, "}", ";") //TODO 192
	}
|	StatementList1 SWITCH ';' Expression '{' ExprSwitchStmt3 '}' ';'
	{
		$$ = append($1.([]StatementList1), "switch", ";", $4, "{", $6, "}", ";") //TODO 193
	}
|	StatementList1 SWITCH SimpleStmt ';' Expression '{' ExprSwitchStmt3 '}' ';'
	{
		$$ = append($1.([]StatementList1), "switch", $3, ";", $5, "{", $7, "}", ";") //TODO 194
	}
|	StatementList1 SWITCH PrimaryExpr '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}' ';'
	{
		$$ = append($1.([]StatementList1), "switch", $3, ".", "(", "type", ")", "{", $9, "}", ";") //TODO 195
	}
|	StatementList1 SWITCH ';' PrimaryExpr '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}' ';'
	{
		$$ = append($1.([]StatementList1), "switch", ";", $4, ".", "(", "type", ")", "{", $10, "}", ";") //TODO 196
	}
|	StatementList1 SWITCH SimpleStmt ';' PrimaryExpr '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}' ';'
	{
		$$ = append($1.([]StatementList1), "switch", $3, ";", $5, ".", "(", "type", ")", "{", $11, "}", ";") //TODO 197
	}
|	StatementList1 SWITCH IDENTIFIER COLAS PrimaryExpr '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}' ';'
	{
		$$ = append($1.([]StatementList1), "switch", $3, $4, $5, ".", "(", "type", ")", "{", $11, "}", ";") //TODO 198
	}
|	StatementList1 SWITCH ';' IDENTIFIER COLAS PrimaryExpr '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}' ';'
	{
		$$ = append($1.([]StatementList1), "switch", ";", $4, $5, $6, ".", "(", "type", ")", "{", $12, "}", ";") //TODO 199
	}
|	StatementList1 SWITCH SimpleStmt ';' IDENTIFIER COLAS PrimaryExpr '.' '(' TYPE ')' '{' TypeSwitchStmt2 '}' ';'
	{
		$$ = append($1.([]StatementList1), "switch", $3, ";", $5, $6, $7, ".", "(", "type", ")", "{", $13, "}", ";") //TODO 200
	}
|	StatementList1 SELECT '{' SelectStmt1 '}' ';'
	{
		$$ = append($1.([]StatementList1), "select", "{", $4, "}", ";") //TODO 201
	}
|	StatementList1 FOR Block ';'
	{
		$$ = append($1.([]StatementList1), "for", $3, ";") //TODO 202
	}
|	StatementList1 FOR Condition Block ';'
	{
		$$ = append($1.([]StatementList1), "for", $3, $4, ";") //TODO 203
	}
|	StatementList1 FOR ForClause1 ';' ';' ForClause3 Block ';'
	{
		$$ = append($1.([]StatementList1), "for", $3, ";", ";", $6, $7, ";") //TODO 204
	}
|	StatementList1 FOR ForClause1 ';' Condition ';' ForClause3 Block ';'
	{
		$$ = append($1.([]StatementList1), "for", $3, ";", $5, ";", $7, $8, ";") //TODO 205
	}
|	StatementList1 FOR ExpressionList '=' RANGE Expression Block ';'
	{
		$$ = append($1.([]StatementList1), "for", $3, "=", "range", $6, $7, ";") //TODO 206
	}
|	StatementList1 FOR IdentifierList COLAS RANGE Expression Block ';'
	{
		$$ = append($1.([]StatementList1), "for", $3, $4, "range", $6, $7, ";") //TODO 207
	}
|	StatementList1 DEFER Expression ';'
	{
		$$ = append($1.([]StatementList1), "defer", $3, ";") //TODO 208
	}

StructType:
	STRUCT '{' StructType1 '}'
	{
		$$ = []StructType{"struct", "{", $3, "}"} //TODO 209
	}

StructType1:
	/* EMPTY */
	{
		$$ = []StructType1(nil) //TODO 210
	}
|	StructType1 IdentifierList Type FieldDecl2 ';'
	{
		$$ = append($1.([]StructType1), $2, $3, $4, ";") //TODO 211
	}
|	StructType1 OPERAND_NAME_OR_TYPE_NAME FieldDecl2 ';'
	{
		$$ = append($1.([]StructType1), $2, $3, ";") //TODO 212
	}
|	StructType1 '*' OPERAND_NAME_OR_TYPE_NAME FieldDecl2 ';'
	{
		$$ = append($1.([]StructType1), "*", $3, $4, ";") //TODO 213
	}

Type:
	OPERAND_NAME_OR_TYPE_NAME
	{
		$$ = $1 //TODO 214
	}
|	TypeLit
	{
		$$ = $1 //TODO 215
	}
|	'(' Type ')'
	{
		$$ = []Type{"(", $2, ")"} //TODO 216
	}

TypeDecl11:
	/* EMPTY */
	{
		$$ = []TypeDecl11(nil) //TODO 217
	}
|	TypeDecl11 TypeSpec ';'
	{
		$$ = append($1.([]TypeDecl11), $2, ";") //TODO 218
	}

TypeList1:
	/* EMPTY */
	{
		$$ = []TypeList1(nil) //TODO 219
	}
|	TypeList1 ',' Type
	{
		$$ = append($1.([]TypeList1), ",", $3) //TODO 220
	}

TypeLit:
	ArrayType
	{
		$$ = $1 //TODO 221
	}
|	StructType
	{
		$$ = $1 //TODO 222
	}
|	'*' Type
	{
		$$ = []TypeLit{"*", $2} //TODO 223
	}
|	FUNC Signature
	{
		$$ = []TypeLit{"func", $2} //TODO 224
	}
|	INTERFACE '{' InterfaceType1 '}'
	{
		$$ = []TypeLit{"interface", "{", $3, "}"} //TODO 225
	}
|	SliceType
	{
		$$ = $1 //TODO 226
	}
|	MapType
	{
		$$ = $1 //TODO 227
	}
|	CHAN ElementType
	{
		$$ = []TypeLit{"chan", $2} //TODO 228
	}
|	CHANCOMM ElementType
	{
		$$ = []TypeLit{$1, $2} //TODO 229
	}
|	COMMCHAN ElementType
	{
		$$ = []TypeLit{$1, $2} //TODO 230
	}

TypeSpec:
	IDENTIFIER Type
	{
		$$ = []TypeSpec{$1, $2} //TODO 231
	}

TypeSwitchStmt2:
	/* EMPTY */
	{
		$$ = []TypeSwitchStmt2(nil) //TODO 232
	}
|	TypeSwitchStmt2 CASE Type TypeList1 ':' StatementList
	{
		$$ = append($1.([]TypeSwitchStmt2), "case", $3, $4, ":", $6) //TODO 233
	}
|	TypeSwitchStmt2 DEFAULT ':' StatementList
	{
		$$ = append($1.([]TypeSwitchStmt2), "default", ":", $4) //TODO 234
	}

UnaryExpr:
	PrimaryExpr
	{
		$$ = $1 //TODO 235
	}
|	'+' UnaryExpr
	{
		$$ = []UnaryExpr{"+", $2} //TODO 236
	}
|	'-' UnaryExpr
	{
		$$ = []UnaryExpr{"-", $2} //TODO 237
	}
|	'!' UnaryExpr
	{
		$$ = []UnaryExpr{"!", $2} //TODO 238
	}
|	'^' UnaryExpr
	{
		$$ = []UnaryExpr{"^", $2} //TODO 239
	}
|	'*' UnaryExpr
	{
		$$ = []UnaryExpr{"*", $2} //TODO 240
	}
|	'&' UnaryExpr
	{
		$$ = []UnaryExpr{"&", $2} //TODO 241
	}
|	COMM UnaryExpr
	{
		$$ = []UnaryExpr{$1, $2} //TODO 242
	}

Value:
	Expression
	{
		$$ = $1 //TODO 243
	}
|	LiteralValue
	{
		$$ = $1 //TODO 244
	}

VarDecl11:
	/* EMPTY */
	{
		$$ = []VarDecl11(nil) //TODO 245
	}
|	VarDecl11 VarSpec ';'
	{
		$$ = append($1.([]VarDecl11), $2, ";") //TODO 246
	}

VarSpec:
	IdentifierList Type
	{
		$$ = []VarSpec{$1, $2} //TODO 247
	}
|	IdentifierList Type '=' ExpressionList
	{
		$$ = []VarSpec{$1, $2, "=", $4} //TODO 248
	}
|	IdentifierList '=' ExpressionList
	{
		$$ = []VarSpec{$1, "=", $3} //TODO 249
	}

%%

//TODO remove demo stuff below

var _parserResult interface{}

type (
	ArgumentList interface{}
	ArrayType interface{}
	Block interface{}
	BuiltinCall11 interface{}
	Condition interface{}
	ConstDecl11 interface{}
	ConstSpec interface{}
	Declaration interface{}
	Element interface{}
	ElementList interface{}
	ElementList1 interface{}
	ElementType interface{}
	ExprSwitchStmt3 interface{}
	Expression interface{}
	ExpressionList interface{}
	ExpressionList1 interface{}
	FieldDecl2 interface{}
	ForClause1 interface{}
	ForClause3 interface{}
	Function interface{}
	FunctionName interface{}
	IdentifierList interface{}
	IdentifierList1 interface{}
	IfStmt interface{}
	ImportDecl11 interface{}
	ImportPath interface{}
	ImportSpec interface{}
	InterfaceType1 interface{}
	Label interface{}
	LiteralValue interface{}
	MapType interface{}
	MethodName interface{}
	ParameterList1 interface{}
	Parameters interface{}
	PrimaryExpr interface{}
	Receiver interface{}
	RecvExpr interface{}
	SelectStmt1 interface{}
	SendStmt interface{}
	Signature interface{}
	SimpleStmt interface{}
	Slice1 interface{}
	SliceType interface{}
	SourceFile interface{}
	SourceFile1 interface{}
	SourceFile2 interface{}
	Start interface{}
	StatementList interface{}
	StatementList1 interface{}
	StructType interface{}
	StructType1 interface{}
	Type interface{}
	TypeDecl11 interface{}
	TypeList1 interface{}
	TypeLit interface{}
	TypeSpec interface{}
	TypeSwitchStmt2 interface{}
	UnaryExpr interface{}
	Value interface{}
	VarDecl11 interface{}
	VarSpec interface{}
)
	
func _dump() {
	s := fmt.Sprintf("%#v", _parserResult)
	s = strings.Replace(s, "%", "%%", -1)
	s = strings.Replace(s, "{", "{%i\n", -1)
	s = strings.Replace(s, "}", "%u\n}", -1)
	s = strings.Replace(s, ", ", ",\n", -1)
	var buf bytes.Buffer
	strutil.IndentFormatter(&buf, ". ").Format(s)
	buf.WriteString("\n")
	a := strings.Split(buf.String(), "\n")
	for _, v := range a {
		if strings.HasSuffix(v, "(nil)") || strings.HasSuffix(v, "(nil),") {
			continue
		}
	
		fmt.Println(v)
	}
}

// End of demo stuff
