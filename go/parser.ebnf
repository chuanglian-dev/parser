add_asgn = "+=" .
and_asgn = "&=" .
andand = "&&" .
andnot = "&^" .
andnot_asgn = "&^=" .
colas = ":=" .
comm = "<-" .
ddd = "..." .
dec = "--" .
div_asgn = "/=" .
eq = "==" .
ge = ">=" .
inc = "++" .
le = "<=" .
lsh = "<<" .
lsh_asgn = "<<=" .
mod_asgn = "%=" .
mul_asgn = "*=" .
neq = "!=" .
or_asgn = "|=" .
oror = "||" .
rsh = ">>" .
rsh_asgn = ">>=" .
sub_asgn = "-=" .
xor_asgn = "^=" .

//add_op = "+"
//	| "-"
//	| "|"
//	| "^" .
//assign_op = [ add_op | mul_op ] "=" .
//big_u_value = "\\" "U" hex_digit hex_digit hex_digit hex_digit hex_digit hex_digit hex_digit hex_digit .
//binary_op = "||"
//	| "&&"
//	| rel_op
//	| add_op
//	| mul_op .
//byte_value = octal_byte_value | hex_byte_value .
//decimal_digit = "0" … "9" .
//decimal_lit = ( "1" … "9" ) { decimal_digit } .
//decimals = decimal_digit { decimal_digit } .
//escaped_char = "\\" (
//		  "a"
//		| "b"
//		| "f"
//		| "n"
//		| "r"
//		| "t"
//		| "v"
//		| "\\"
//		| "'"
//		| "\""
//	  ) .
//exponent = ( "e" | "E" ) [ "+" | "-" ] decimals .
//float_lit = decimals "." [ decimals ] [ exponent ]
//	| decimals exponent
//	| "." decimals [ exponent ] .
float_lit = .
//hex_byte_value = "\\" "x" hex_digit hex_digit .
//hex_digit = "0" … "9"
//	| "A" … "F"
//	| "a" … "f" .
//hex_lit = "0" ( "x" | "X" ) hex_digit { hex_digit } .
//identifier = letter { letter | unicode_digit } .
identifier = .
//imaginary_lit = ( decimals | float_lit ) "i" .
imaginary_lit = .
//int_lit = decimal_lit
//	| octal_lit
//	| hex_lit .
int_lit = .
//interpreted_string_lit = "\"" { unicode_value | byte_value } "\"" .
//letter = unicode_letter | "_" .
//little_u_value = "\\" "u" hex_digit hex_digit hex_digit hex_digit .
//mul_op = "*"
//	| "/"
//	| "%"
//	| "<<"
//	| ">>"
//	| "&"
//	| "&^" .
//newline = .
//octal_byte_value = "\\" octal_digit octal_digit octal_digit .
//octal_digit = "0" … "7" .
//octal_lit = "0" { octal_digit } .
//raw_string_lit = "`" { unicode_char | newline } "`" .
//rel_op = "=="
//	| "!="
//	| "<"
//	| "<="
//	| ">"
//	| ">=" .
//rune_lit = "'" ( unicode_value | byte_value ) "'" .
rune_lit = .
//string_lit = raw_string_lit | interpreted_string_lit .
string_lit = .
//unary_op = "+"
//	| "-"
//	| "!"
//	| "^"
//	| "*"
//	| "&"
//	| "<-" .
//unicode_char = .
//unicode_digit = .
//unicode_letter = .
//unicode_value = unicode_char
//	| little_u_value
//	| big_u_value
//	| escaped_char .

//AnonymousField = [ "*" ] TypeName .
AnonymousField =
	  TypeName
	| "*" TypeName
	.
ArgumentList = ExpressionList [ ddd ] .
ArrayLength = Expression .
ArrayType = "[" ArrayLength "]" ElementType .
//Assignment = ExpressionList assign_op ExpressionList .
Assignment =
	  ExpressionList "=" ExpressionList
	| ExpressionList add_asgn ExpressionList
	| ExpressionList and_asgn ExpressionList
	| ExpressionList andnot_asgn ExpressionList
	| ExpressionList div_asgn ExpressionList
	| ExpressionList lsh_asgn ExpressionList
	| ExpressionList mod_asgn ExpressionList
	| ExpressionList mul_asgn ExpressionList
	| ExpressionList or_asgn ExpressionList
	| ExpressionList rsh_asgn ExpressionList
	| ExpressionList sub_asgn ExpressionList
	| ExpressionList xor_asgn ExpressionList
	.
BaseType = Type .
BaseTypeName = identifier .
BasicLit = int_lit
	| float_lit
	| imaginary_lit
	| rune_lit
	| string_lit .
Block = "{" StatementList "}" .
BreakStmt = "break" [ Label ] .
BuiltinArgs = Type [ "," ArgumentList ]
	| ArgumentList .
BuiltinCall = identifier "(" [ BuiltinArgs [ "," ] ] ")" .
Call = "(" [ ArgumentList [ "," ] ] ")" .
Channel = Expression .
ChannelType = (
		  "chan" [ comm ]
		| comm "chan"
	  ) ElementType .
CommCase = "case" ( SendStmt | RecvStmt )
	| "default" .
CommClause = CommCase ":" StatementList .
CompositeLit = LiteralType LiteralValue .
Condition = Expression .
ConstDecl = "const" (
		  ConstSpec
		| "(" { ConstSpec ";" } ")"
	  ) .
ConstSpec = IdentifierList [
		 [ Type ] "=" ExpressionList
	  ] .
ContinueStmt = "continue" [ Label ] .
Conversion = Type "(" Expression [ "," ] ")" .
Declaration = ConstDecl
	| TypeDecl
	| VarDecl .
DeferStmt = "defer" Expression .
Element = [ Key ":" ] Value .
ElementIndex = Expression .
ElementList = Element { "," Element } .
ElementType = Type .
//EmptyStmt = .
ExprCaseClause = ExprSwitchCase ":" StatementList .
ExprSwitchCase = "case" ExpressionList
	| "default" .
ExprSwitchStmt = "switch" [ SimpleStmt ";" ] [ Expression ] "{" { ExprCaseClause } "}" .
//Expression = UnaryExpr
//	| Expression binary_op UnaryExpr .
Expression = Term { oror Term } .
Term = Factor { andand Factor } .
Factor =  PrimaryFactor  { ( ge | ">" | le | "<" | neq | eq ) PrimaryFactor } .
PrimaryFactor = PrimaryTerm  { ( "^" | "|" | "-" | "+" ) PrimaryTerm } .
PrimaryTerm = UnaryExpr { ( andnot | "&" | lsh | rsh | "%" | "/" | "*" ) UnaryExpr } .
UnaryExpr = [ "^" | "!" | "-" | "+" ] PrimaryExpr .
ExpressionList = Expression { "," Expression } .
ExpressionStmt = Expression .
FallthroughStmt = "fallthrough" .
FieldDecl = (
		  IdentifierList Type
		| AnonymousField
	  ) [ Tag ] .
FieldName = identifier .
ForClause = [ InitStmt ] ";" [ Condition ] ";" [ PostStmt ] .
ForStmt = "for" [
		  Condition
		| ForClause
		| RangeClause
	  ] Block .
Function = Signature FunctionBody .
FunctionBody = Block .
FunctionDecl = "func" FunctionName ( Function | Signature ) .
FunctionLit = "func" Function .
FunctionName = identifier .
FunctionType = "func" Signature .
GoStmt = "go" Expression .
GotoStmt = "goto" Label .
IdentifierList = identifier { "," identifier } .
IfStmt = "if" [ SimpleStmt ";" ] Expression Block [
		 "else" ( IfStmt | Block )
	  ] .
ImportDecl = "import" (
		  ImportSpec
		| "(" { ImportSpec ";" } ")"
	  ) .
ImportPath = string_lit .
ImportSpec = [ "." | PackageName ] ImportPath .
IncDecStmt = Expression ( inc | dec ) .
Index = "[" Expression "]" .
InitStmt = SimpleStmt .
InterfaceType = "interface" "{" { MethodSpec ";" } "}" .
InterfaceTypeName = TypeName .
Key = FieldName | ElementIndex .
KeyType = Type .
Label = identifier .
LabeledStmt = Label ":" Statement .
Literal = BasicLit
	| CompositeLit
	| FunctionLit .
LiteralType = StructType
	| ArrayType
	| "[" ddd "]" ElementType
	| SliceType
	| MapType
	| TypeName .
LiteralValue = "{" [ ElementList [ "," ] ] "}" .
MapType = "map" "[" KeyType "]" ElementType .
MethodDecl = "func" Receiver MethodName ( Function | Signature ) .
MethodExpr = ReceiverType "." MethodName .
MethodName = identifier .
MethodSpec = MethodName Signature
	| InterfaceTypeName .
Operand = Literal
	| OperandName
	| MethodExpr
	| "(" Expression ")" .
OperandName = identifier | QualifiedIdent .
PackageClause = "package" PackageName .
PackageName = identifier .
ParameterDecl = [ IdentifierList ] [ ddd ] Type .
ParameterList = ParameterDecl { "," ParameterDecl } .
Parameters = "(" [ ParameterList [ "," ] ] ")" .
PointerType = "*" BaseType .
PostStmt = SimpleStmt .
PrimaryExpr = Operand
	| Conversion
	| BuiltinCall
	| PrimaryExpr Selector
	| PrimaryExpr Index
	| PrimaryExpr Slice
	| PrimaryExpr TypeAssertion
	| PrimaryExpr Call .
QualifiedIdent = PackageName "." identifier .
RangeClause = (
		  ExpressionList "="
		| IdentifierList colas
	  ) "range" Expression .
Receiver = "(" [ identifier ] [ "*" ] BaseTypeName ")" .
ReceiverType = TypeName
	| "(" "*" TypeName ")"
	| "(" ReceiverType ")" .
RecvExpr = Expression .
RecvStmt = [
		  ExpressionList "="
		| IdentifierList colas
	  ] RecvExpr .
Result = Parameters | Type .
ReturnStmt = "return" [ ExpressionList ] .
SelectStmt = "select" "{" { CommClause } "}" .
Selector = "." identifier .
SendStmt = Channel comm Expression .
ShortVarDecl = IdentifierList colas ExpressionList .
Signature = Parameters [ Result ] .
//SimpleStmt = EmptyStmt
//	| ExpressionStmt
//	| SendStmt
//	| IncDecStmt
//	| Assignment
//	| ShortVarDecl .
SimpleStmt =
	  Assignment
	| ExpressionStmt
	| IncDecStmt
	| SendStmt
	| ShortVarDecl
	.
Slice = "[" (
		 [ Expression ] ":" [ Expression ]
	  )
	| (
		 [ Expression ] ":" Expression ":" Expression
	  ) "]" .
SliceType = "[" "]" ElementType .
SourceFile = PackageClause ";" { ImportDecl ";" } { TopLevelDecl ";" } .
Statement = Declaration
	| LabeledStmt
	| SimpleStmt
	| GoStmt
	| ReturnStmt
	| BreakStmt
	| ContinueStmt
	| GotoStmt
	| FallthroughStmt
	| Block
	| IfStmt
	| SwitchStmt
	| SelectStmt
	| ForStmt
	| DeferStmt .
//StatementList = { Statement ";" } .
StatementList = [ Statement ] { ";" [ Statement ] } .
StructType = "struct" "{" { FieldDecl ";" } "}" .
SwitchStmt = ExprSwitchStmt | TypeSwitchStmt .
Tag = string_lit .
TopLevelDecl = Declaration
	| FunctionDecl
	| MethodDecl .
Type = TypeName
	| TypeLit
	| "(" Type ")" .
TypeAssertion = "." "(" Type ")" .
TypeCaseClause = TypeSwitchCase ":" StatementList .
TypeDecl = "type" (
		  TypeSpec
		| "(" { TypeSpec ";" } ")"
	  ) .
TypeList = Type { "," Type } .
TypeLit = ArrayType
	| StructType
	| PointerType
	| FunctionType
	| InterfaceType
	| SliceType
	| MapType
	| ChannelType .
TypeName = identifier | QualifiedIdent .
TypeSpec = identifier Type .
TypeSwitchCase = "case" TypeList
	| "default" .
TypeSwitchGuard = [ identifier colas ] PrimaryExpr "." "(" "type" ")" .
//TypeSwitchStmt = "switch" [ SimpleStmt ";" ] TypeSwitchGuard "{" { TypeCaseClause } "}" .
TypeSwitchStmt =
	  "switch" TypeSwitchGuard "{" { TypeCaseClause } "}"
	| "switch" SimpleStmt ";" TypeSwitchGuard "{" { TypeCaseClause } "}"
	.
//UnaryExpr = PrimaryExpr
//	| unary_op UnaryExpr .
Value = Expression | LiteralValue .
VarDecl = "var" (
		  VarSpec
		| "(" { VarSpec ";" } ")"
	  ) .
VarSpec = IdentifierList (
		  Type [ "=" ExpressionList ]
		| "=" ExpressionList
	  ) .
