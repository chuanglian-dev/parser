/*

$ ebnf2y -o parser.y parser.ebnf && go tool yacc parser.y 
                                         # conflicts: 125 shift/reduce, 38 reduce/reduce
$ ebnf2y -M -wr 0 -o parser.y parser.ebnf # conflicts: 34 shift/reduce, 28 reduce/reduce
$ ebnf2y -M -ws 0 -o parser.y parser.ebnf # conflicts: 80 shift/reduce, 16 reduce/reduce

...............................................................................
named tokens, Binary_op, Unary_op

$ ebnf2y -o parser.y parser.ebnf && go tool yacc parser.y
                                          # conflicts: 166 shift/reduce, 38 reduce/reduce
$ ebnf2y -M -wr 0 -o parser.y parser.ebnf #  conflicts: 37 shift/reduce, 37 reduce/reduce
$ ebnf2y -M -ws 0 -o parser.y parser.ebnf # conflicts: 109 shift/reduce, 16 reduce/reduce

1000:67+16=83

...............................................................................
Attempt lbrace hack

$ ebnf2y -o parser.y parser.ebnf && go tool yacc parser.y
                                          # conflicts: 186 shift/reduce, 35 reduce/reduce
$ ebnf2y -M -wr 0 -o parser.y parser.ebnf #  conflicts: 37 shift/reduce, 32 reduce/reduce
$ ebnf2y -M -ws 0 -o parser.y parser.ebnf # conflicts: 129 shift/reduce, 11 reduce/reduce

1000:87+12=99

...............................................................................
OperandOrTypeName ???:

$ ebnf2y -o parser.y parser.ebnf && go tool yacc parser.y
                                          # conflicts: 182 shift/reduce, 29 reduce/reduce
$ ebnf2y -M -wr 0 -o parser.y parser.ebnf #  conflicts: 32 shift/reduce, 26 reduce/reduce
$ ebnf2y -M -ws 0 -o parser.y parser.ebnf # conflicts: 117 shift/reduce,  9 reduce/reduce

1000:55+9=64

...............................................................................
-EmptyStmt, SimpleStmt, LabeledStmt, StatementList

$ ebnf2y -o parser.y parser.ebnf && go tool yacc parser.y
                                          # conflicts: 182 shift/reduce, 14 reduce/reduce
$ ebnf2y -M -wr 0 -o parser.y parser.ebnf #  conflicts: 29 shift/reduce, 26 reduce/reduce
$ ebnf2y -M -ws 0 -o parser.y parser.ebnf # conflicts: 164 shift/reduce,  9 reduce/reduce

1000:52+9=61

...............................................................................
PackageName

$ ebnf2y -o parser.y parser.ebnf && go tool yacc parser.y
                                          # conflicts: 186 shift/reduce, 10 reduce/reduce
$ ebnf2y -M -wr 0 -o parser.y parser.ebnf #  conflicts: 35 shift/reduce, 20 reduce/reduce
$ ebnf2y -M -ws 0 -o parser.y parser.ebnf # conflicts: 164 shift/reduce,  9 reduce/reduce

1000:52+9=61

...............................................................................
operand_name_or_type_name
$ ebnf2y -o parser.y parser.ebnf && go tool yacc parser.y
                                          # conflicts: 182 shift/reduce,  7 reduce/reduce
$ ebnf2y -M -wr 0 -o parser.y parser.ebnf #  conflicts: 21 shift/reduce, 16 reduce/reduce
$ ebnf2y -M -ws 0 -o parser.y parser.ebnf # conflicts: 156 shift/reduce,  5 reduce/reduce

1000:38+5=43
1000 -iy 1:7+16=23

...............................................................................
opt_comma_rbrace, commchan, chancomm, ReceiverType
$ ebnf2y -o parser.y parser.ebnf && go tool yacc parser.y
                                          # conflicts: 197 shift/reduce, 8 reduce/reduce
$ ebnf2y -M -wr 0 -o parser.y parser.ebnf #  conflicts: 24 shift/reduce, 5 reduce/reduce
$ ebnf2y -M -ws 0 -o parser.y parser.ebnf # conflicts: 170 shift/reduce, 4 reduce/reduce

1000:43+4=47
1000 -iy 1:12+5=17

...............................................................................
ParameterDecl

$ ebnf2y -o parser.y parser.ebnf && go tool yacc parser.y
                                          # conflicts: 195 shift/reduce, 9 reduce/reduce
$ ebnf2y -M -wr 0 -o parser.y parser.ebnf #  conflicts: 13 shift/reduce, 7 reduce/reduce
$ ebnf2y -M -ws 0 -o parser.y parser.ebnf # conflicts: 168 shift/reduce, 5 reduce/reduce

1000:41+5:46
1000 -iy 1:11+7=18

...............................................................................
ReceiverType

$ ebnf2y -o parser.y parser.ebnf && go tool yacc parser.y
                                          # conflicts: 543 shift/reduce, 7 reduce/reduce
$ ebnf2y -M -wr 0 -o parser.y parser.ebnf #  conflicts:  6 shift/reduce, 9 reduce/reduce
$ ebnf2y -M -ws 0 -o parser.y parser.ebnf # conflicts: 533 shift/reduce, 5 reduce/reduce

1000:385+5=390
1000 -iy 1:8+5=13

...............................................................................
1000 -iy 1 +

%left		NotPackage
%left		LPACKAGE

%left		NotParen
%left		'('

%left		')'
%left		PreferToRightParen

Signature: Parameters %prec NotParen

7+5=12

$ ebnf2y -o parser.y parser.ebnf && go tool yacc parser.y
                                          # conflicts: 542 shift/reduce, 7 reduce/reduce
$ ebnf2y -M -wr 0 -o parser.y parser.ebnf #  conflicts:  5 shift/reduce, 9 reduce/reduce
$ ebnf2y -M -ws 0 -o parser.y parser.ebnf # conflicts: 532 shift/reduce, 5 reduce/reduce

1000:384+5=389

-iy 1
0:3+10=13 1,2,10,15-17:6+6=12 18-20,1000:7+5=12

*/

// ============================================================================

chancomm		= "chan" "<-" .
commchan		= "<-" "chan" .
andand			= "&&" .
andnot			= "&^" .
colas			= ":=" .
comm			= "<-".
ddd			= "..." .
dec			= "--" .
eq			= "==" .
ge			= ">=" .
inc			= "++" .
lbrace			= . // "{" following a type name .
le			= "<=" .
lsh			= "<<" .
ne			= "!=" .
operand_name_or_type_name	= .
opt_comma_rbrace	= [ "," ] "}" .
oror			= "||" .
rsh			= ">>" .

Binary_op = oror
	| andand
	| eq
	| ne
	| "<"
	| le
	| ">"
	| ge
	| "+"
	| "-"
	| "|"
	| "^"
	| "*"
	| "/"
	| "%"
	| lsh
	| rsh
	| "&"
	| andnot .

Unary_op = "+"
	| "-"
	| "!"
	| "^"
	| "*"
	| "&"
	| comm .

// ----------------------------------------------------------------------------

add_op = "+"
	| "-"
	| "|"
	| "^" .
assign_op = [ add_op | mul_op ] "=" .
big_u_value = "\\" "U" hex_digit hex_digit hex_digit hex_digit hex_digit hex_digit hex_digit hex_digit .

//binary_op = "||"
//	| "&&"
//	| rel_op
//	| add_op
//	| mul_op .

byte_value = octal_byte_value | hex_byte_value .
decimal_digit = "0" … "9" .
decimal_lit = ( "1" … "9" ) { decimal_digit } .
decimals = decimal_digit { decimal_digit } .
escaped_char = "\\" (
		  "a"
		| "b"
		| "f"
		| "n"
		| "r"
		| "t"
		| "v"
		| "\\"
		| "'"
		| "\""
	  ) .
exponent = ( "e" | "E" ) [ "+" | "-" ] decimals .
float_lit = decimals "." [ decimals ] [ exponent ]
	| decimals exponent
	| "." decimals [ exponent ] .
hex_byte_value = "\\" "x" hex_digit hex_digit .
hex_digit = "0" … "9"
	| "A" … "F"
	| "a" … "f" .
hex_lit = "0" ( "x" | "X" ) hex_digit { hex_digit } .
identifier = letter { letter | unicode_digit } .
imaginary_lit = ( decimals | float_lit ) "i" .
int_lit = decimal_lit
	| octal_lit
	| hex_lit .
interpreted_string_lit = "\"" { unicode_value | byte_value } "\"" .
letter = unicode_letter | "_" .
little_u_value = "\\" "u" hex_digit hex_digit hex_digit hex_digit .

//mul_op = "*"
//	| "/"
//	| "%"
//	| "<<"
//	| ">>"
//	| "&"
//	| "&^" .
mul_op = "*"
	| "/"
	| "%"
	| lsh
	| rsh
	| "&"
	| andnot .

newline = .
octal_byte_value = "\\" octal_digit octal_digit octal_digit .
octal_digit = "0" … "7" .
octal_lit = "0" { octal_digit } .
raw_string_lit = "`" { unicode_char | newline } "`" .

//rel_op = "=="
//	| "!="
//	| "<"
//	| "<="
//	| ">"
//	| ">=" .

rune_lit = "'" ( unicode_value | byte_value ) "'" .
string_lit = raw_string_lit | interpreted_string_lit .

//unary_op = "+"
//	| "-"
//	| "!"
//	| "^"
//	| "*"
//	| "&"
//	| "<-" .

unicode_char = .
unicode_digit = .
unicode_letter = .
unicode_value = unicode_char
	| little_u_value
	| big_u_value
	| escaped_char .

//AnonymousField = [ "*" ] TypeName .
//AnonymousField = [ "*" ] OperandOrTypeName .
AnonymousField = [ "*" ] operand_name_or_type_name .

//ArgumentList = ExpressionList [ "..." ] .
ArgumentList = ExpressionList [ ddd ] .

ArrayLength = Expression .
ArrayType = "[" ArrayLength "]" ElementType .
Assignment = ExpressionList assign_op ExpressionList .
BaseType = Type .
BaseTypeName = identifier .
BasicLit = int_lit
	| float_lit
	| imaginary_lit
	| rune_lit
	| string_lit .
Block = "{" StatementList "}" .
BreakStmt = "break" [ Label ] .
BuiltinArgs = Type [ "," ArgumentList ]
	| ArgumentList .
BuiltinCall = identifier "(" [ BuiltinArgs [ "," ] ] ")" .
Call = "(" [ ArgumentList [ "," ] ] ")" .
Channel = Expression .

//ChannelType = (
//		  "chan" [ "<-" ]
//		| "<-" "chan"
//	  ) ElementType .
//ChannelType = (
//		  "chan" [ comm ]
//		| comm "chan"
//	  ) ElementType .
ChannelType = (
		  "chan"
		| chancomm
		| commchan
	  ) ElementType .

CommCase = "case" ( SendStmt | RecvStmt )
	| "default" .
CommClause = CommCase ":" StatementList .

//CompositeLit = LiteralTypeNoTypeName LiteralValue
//	| TypeName lbrace [ ElementList [ "," ] ] "}" .
//CompositeLit = LiteralTypeNoTypeName LiteralValue
//	| OperandOrTypeName lbrace [ ElementList [ "," ] ] "}" .
//CompositeLit = LiteralTypeNoTypeName LiteralValue
//	| operand_name_or_type_name lbrace [ ElementList [ "," ] ] "}" .
CompositeLit = LiteralTypeNoTypeName LiteralValue
	| operand_name_or_type_name lbrace "}"
	| operand_name_or_type_name lbrace ElementList opt_comma_rbrace .

Condition = Expression .
ConstDecl = "const" (
		  ConstSpec
		| "(" { ConstSpec ";" } ")"
	  ) .
ConstSpec = IdentifierList [
		 [ Type ] "=" ExpressionList
	  ] .
ContinueStmt = "continue" [ Label ] .
Conversion = Type "(" Expression [ "," ] ")" .
Declaration = ConstDecl
	| TypeDecl
	| VarDecl .
DeferStmt = "defer" Expression .
Element = [ Key ":" ] Value .
ElementIndex = Expression .
ElementList = Element { "," Element } .
ElementType = Type .

//EmptyStmt = .

ExprCaseClause = ExprSwitchCase ":" StatementList .
ExprSwitchCase = "case" ExpressionList
	| "default" .
ExprSwitchStmt = "switch" [ [ SimpleStmt ] ";" ] [ Expression ] "{" { ExprCaseClause } "}" .
Expression = UnaryExpr
	| Expression Binary_op UnaryExpr .
ExpressionList = Expression { "," Expression } .
ExpressionStmt = Expression .
FallthroughStmt = "fallthrough" .
FieldDecl = (
		  IdentifierList Type
		| AnonymousField
	  ) [ Tag ] .
FieldName = identifier .

//ForClause = [ InitStmt ] ";" [ Condition ] ";" [ PostStmt ] .
ForClause = [ SimpleStmt ] ";" [ Condition ] ";" [ SimpleStmt ] .

ForStmt = "for" [
		  Condition
		| ForClause
		| RangeClause
	  ] Block .
Function = Signature FunctionBody .
FunctionBody = Block .
FunctionDecl = "func" FunctionName ( Function | Signature ) .
FunctionLit = "func" Function .
FunctionName = identifier .
FunctionType = "func" Signature .
GoStmt = "go" Expression .
GotoStmt = "goto" Label .
IdentifierList = identifier { "," identifier } .
IfStmt = "if" [ [ SimpleStmt ] ";" ] Expression Block [
		 "else" ( IfStmt | Block )
	  ] .
ImportDecl = "import" (
		  ImportSpec
		| "(" { ImportSpec ";" } ")"
	  ) .
ImportPath = string_lit .

//ImportSpec = [ "." | PackageName ] ImportPath .
ImportSpec = [ "." | identifier ] ImportPath .

//IncDecStmt = Expression ( "++" | "--" ) .
IncDecStmt = Expression ( inc | dec ) .

Index = "[" Expression "]" .

//InitStmt = SimpleStmt .

InterfaceType = "interface" "{" { MethodSpec ";" } "}" .

//InterfaceTypeName = TypeName .
//InterfaceTypeName = OperandOrTypeName .
InterfaceTypeName = operand_name_or_type_name .

Key = FieldName | ElementIndex .
KeyType = Type .
Label = identifier .

//LabeledStmt = Label ":" Statement .
LabeledStmt = Label ":" .

Literal = BasicLit
	| CompositeLit
	| FunctionLit .

//LiteralType = StructType
//	| ArrayType
//	| "[" "..." "]" ElementType
//	| SliceType
//	| MapType
//	| TypeName .
LiteralTypeNoTypeName = StructType
	| ArrayType
	| "[" ddd "]" ElementType
	| SliceType
	| MapType .

//LiteralValue = "{" [ ElementList [ "," ] ] "}" .
LiteralValue = "{" "}"
	| "{" ElementList opt_comma_rbrace  .

MapType = "map" "[" KeyType "]" ElementType .
MethodDecl = "func" Receiver MethodName ( Function | Signature ) .
MethodExpr = ReceiverType "." MethodName .
MethodName = identifier .
MethodSpec = MethodName Signature
	| InterfaceTypeName .

//Operand = Literal
//	| OperandName
//	| MethodExpr
//	| "(" Expression ")" .
//Operand = Literal
//	| OperandOrTypeName
//	| MethodExpr
//	| "(" Expression ")" .
Operand = Literal
	| operand_name_or_type_name
	| MethodExpr
	| "(" Expression ")" .

//OperandName = identifier | QualifiedIdent .
//OperandOrTypeName = identifier | QualifiedIdent .
//OperandOrTypeName = operand_name_or_type_name .

//PackageClause = "package" PackageName .
PackageClause = "package" identifier .

//PackageName = identifier .

//ParameterDecl = [ IdentifierList ] [ "..." ] Type .
//ParameterDecl = [ IdentifierList ] [ ddd ] Type .
ParameterDecl = 
	  identifier [ ddd ] Type	// n T
	| operand_name_or_type_name	// n or named T
	| [ ddd ] TypeLit .		// T

ParameterList = ParameterDecl { "," ParameterDecl } .
Parameters = "(" [ ParameterList [ "," ] ] ")" .
PointerType = "*" BaseType .

//PostStmt = SimpleStmt .

PrimaryExpr = Operand
	| Conversion
	| BuiltinCall
	| PrimaryExpr Selector
	| PrimaryExpr Index
	| PrimaryExpr Slice
	| PrimaryExpr TypeAssertion
	| PrimaryExpr Call .

//QualifiedIdent = PackageName "." identifier .
//QualifiedIdent = identifier "." identifier .

//RangeClause = (
//		  ExpressionList "="
//		| IdentifierList ":="
//	  ) "range" Expression .
RangeClause = (
		  ExpressionList "="
		| IdentifierList colas
	  ) "range" Expression .

Receiver = "(" [ identifier ] [ "*" ] BaseTypeName ")" .

//ReceiverType = TypeName
//	| "(" "*" TypeName ")"
//	| "(" ReceiverType ")" .
//ReceiverType = OperandOrTypeName
//	| "(" "*" OperandOrTypeName ")"
//	| "(" ReceiverType ")" .
//ReceiverType = operand_name_or_type_name
//	| "(" "*" operand_name_or_type_name ")"
//	| "(" operand_name_or_type_name ")" .
ReceiverType = ParameterDecl .

RecvExpr = Expression .

//RecvStmt = [
//		  ExpressionList "="
//		| IdentifierList ":="
//	  ] RecvExpr .
RecvStmt = [
		  ExpressionList "="
		| IdentifierList colas
	  ] RecvExpr .

Result = Parameters | Type .
ReturnStmt = "return" [ ExpressionList ] .
SelectStmt = "select" "{" { CommClause } "}" .
Selector = "." identifier .

//SendStmt = Channel "<-" Expression .
SendStmt = Channel comm Expression .

//ShortVarDecl = IdentifierList ":=" ExpressionList .
ShortVarDecl = IdentifierList colas ExpressionList .

Signature = Parameters [ Result ] .

//SimpleStmt = EmptyStmt
//	| ExpressionStmt
//	| SendStmt
//	| IncDecStmt
//	| Assignment
//	| ShortVarDecl .
SimpleStmt = ExpressionStmt
	| SendStmt
	| IncDecStmt
	| Assignment
	| ShortVarDecl .

Slice = "[" [ Expression ] ":" [ Expression ] "]" .
SliceType = "[" "]" ElementType .
SourceFile = PackageClause ";" { ImportDecl ";" } { TopLevelDecl ";" } .
Statement = Declaration
	| LabeledStmt
	| SimpleStmt
	| GoStmt
	| ReturnStmt
	| BreakStmt
	| ContinueStmt
	| GotoStmt
	| FallthroughStmt
	| Block
	| IfStmt
	| SwitchStmt
	| SelectStmt
	| ForStmt
	| DeferStmt .

//StatementList = { Statement ";" } .
StatementList = { [ Statement ] ";" } .

StructType = "struct" "{" { FieldDecl ";" } "}" .
SwitchStmt = ExprSwitchStmt | TypeSwitchStmt .
Tag = string_lit .
TopLevelDecl = Declaration
	| FunctionDecl
	| MethodDecl .

//Type = TypeName
//	| TypeLit
//	| "(" Type ")" .
//Type = OperandOrTypeName
//	| TypeLit
//	| "(" Type ")" .
Type = operand_name_or_type_name
	| TypeLit
	| "(" Type ")" .

TypeAssertion = "." "(" Type ")" .
TypeCaseClause = TypeSwitchCase ":" StatementList .
TypeDecl = "type" (
		  TypeSpec
		| "(" { TypeSpec ";" } ")"
	  ) .
TypeList = Type { "," Type } .
TypeLit = ArrayType
	| StructType
	| PointerType
	| FunctionType
	| InterfaceType
	| SliceType
	| MapType
	| ChannelType .

//TypeName = identifier | QualifiedIdent .

TypeSpec = identifier Type .
TypeSwitchCase = "case" TypeList
	| "default" .

//TypeSwitchGuard = [ identifier ":=" ] PrimaryExpr "." "(" "type" ")" .
TypeSwitchGuard = [ identifier colas ] PrimaryExpr "." "(" "type" ")" .

TypeSwitchStmt = "switch" [ [ SimpleStmt ] ";" ] TypeSwitchGuard "{" { TypeCaseClause } "}" .

UnaryExpr = PrimaryExpr
	| Unary_op UnaryExpr .
Value = Expression | LiteralValue .
VarDecl = "var" (
		  VarSpec
		| "(" { VarSpec ";" } ")"
	  ) .
VarSpec = IdentifierList (
		  Type [ "=" ExpressionList ]
		| "=" ExpressionList
	  ) .
